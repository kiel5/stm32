
dk_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004214  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004214  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009513  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002145  00000000  00000000  000295ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193ff  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9bc  00000000  00000000  00045b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d73  00000000  00000000  00053523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  000d72e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ddc 	.word	0x08003ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003ddc 	.word	0x08003ddc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <app_led_excute>:
void app_led_init(void )
{
    app_led_state.led_state_name = LED_IDLE_STATUS;
}
void app_led_excute()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
    switch (app_led_state.led_state_name)
 80001b4:	4b14      	ldr	r3, [pc, #80]	; (8000208 <app_led_excute+0x58>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	2b03      	cmp	r3, #3
 80001ba:	d002      	beq.n	80001c2 <app_led_excute+0x12>
 80001bc:	2b04      	cmp	r3, #4
 80001be:	d006      	beq.n	80001ce <app_led_excute+0x1e>
        {
            app_led_state.effect.light_up.sta = 1;
            app_led_state.effect.light_up.direct = 1;
        }
    default:
        break;
 80001c0:	e01f      	b.n	8000202 <app_led_excute+0x52>
        set_all_led(app_led_state.effect.blink.sta);
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <app_led_excute+0x58>)
 80001c4:	799b      	ldrb	r3, [r3, #6]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 f93e 	bl	8000448 <set_all_led>
        break;
 80001cc:	e01a      	b.n	8000204 <app_led_excute+0x54>
        set_led(app_led_state.effect.light_up.index,app_led_state.effect.light_up.direct);  // bật led thứ index, ban đầu =0;
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <app_led_excute+0x58>)
 80001d0:	799b      	ldrb	r3, [r3, #6]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <app_led_excute+0x58>)
 80001d4:	79d2      	ldrb	r2, [r2, #7]
 80001d6:	4611      	mov	r1, r2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f91d 	bl	8000418 <set_led>
        app_led_state.effect.light_up.index += app_led_state.effect.light_up.direct;        //tăng index
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <app_led_excute+0x58>)
 80001e0:	799a      	ldrb	r2, [r3, #6]
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <app_led_excute+0x58>)
 80001e4:	79db      	ldrb	r3, [r3, #7]
 80001e6:	4413      	add	r3, r2
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <app_led_excute+0x58>)
 80001ec:	719a      	strb	r2, [r3, #6]
        if(app_led_state.effect.light_up.index > 7)    //bật xog 8 led thì đổi chiều ngc lại
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <app_led_excute+0x58>)
 80001f0:	799b      	ldrb	r3, [r3, #6]
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	d905      	bls.n	8000202 <app_led_excute+0x52>
            app_led_state.effect.light_up.sta = 0;
 80001f6:	4b04      	ldr	r3, [pc, #16]	; (8000208 <app_led_excute+0x58>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	721a      	strb	r2, [r3, #8]
            app_led_state.effect.light_up.direct = -1;
 80001fc:	4b02      	ldr	r3, [pc, #8]	; (8000208 <app_led_excute+0x58>)
 80001fe:	22ff      	movs	r2, #255	; 0xff
 8000200:	71da      	strb	r2, [r3, #7]
        break;
 8000202:	bf00      	nop
    }
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	2000008c 	.word	0x2000008c

0800020c <app_led_handle>:
void app_led_handle(){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    if(app_led_state.led_state_name != LED_IDLE_STATUS)
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <app_led_handle+0x34>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d011      	beq.n	800023c <app_led_handle+0x30>
    {
        if(HAL_GetTick() - app_led_state.tick >= app_led_state.time)
 8000218:	f000 fcfe 	bl	8000c18 <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	4a08      	ldr	r2, [pc, #32]	; (8000240 <app_led_handle+0x34>)
 8000220:	8892      	ldrh	r2, [r2, #4]
 8000222:	1a9b      	subs	r3, r3, r2
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <app_led_handle+0x34>)
 8000226:	8852      	ldrh	r2, [r2, #2]
 8000228:	4293      	cmp	r3, r2
 800022a:	d307      	bcc.n	800023c <app_led_handle+0x30>
        {
            app_led_excute();
 800022c:	f7ff ffc0 	bl	80001b0 <app_led_excute>
            app_led_state.tick = HAL_GetTick();
 8000230:	f000 fcf2 	bl	8000c18 <HAL_GetTick>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	4b01      	ldr	r3, [pc, #4]	; (8000240 <app_led_handle+0x34>)
 800023a:	809a      	strh	r2, [r3, #4]
        }

    }
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	2000008c 	.word	0x2000008c

08000244 <app_led_blink_all>:

void app_led_blink_all(uint16_t freq)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
    app_led_state.led_state_name = LED_BLINK_STATUS;
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <app_led_blink_all+0x20>)
 8000250:	2203      	movs	r2, #3
 8000252:	701a      	strb	r2, [r3, #0]
    app_led_state.time = freq;
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <app_led_blink_all+0x20>)
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	8053      	strh	r3, [r2, #2]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	2000008c 	.word	0x2000008c

08000268 <app_led_light_up>:
void app_led_blink_led(uint16_t freq)
{

}
void app_led_light_up(uint16_t freq)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	80fb      	strh	r3, [r7, #6]
    app_led_state.led_state_name = LED_LIGHT_UP_STATUS;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <app_led_light_up+0x34>)
 8000274:	2204      	movs	r2, #4
 8000276:	701a      	strb	r2, [r3, #0]
    app_led_state.time= freq;                           //time
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <app_led_light_up+0x34>)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	8053      	strh	r3, [r2, #2]
    app_led_state.effect.light_up.index = 0;            // chỉ số
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <app_led_light_up+0x34>)
 8000280:	2200      	movs	r2, #0
 8000282:	719a      	strb	r2, [r3, #6]
    app_led_state.effect.light_up.direct = 1;           //chiều tăng
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <app_led_light_up+0x34>)
 8000286:	2201      	movs	r2, #1
 8000288:	71da      	strb	r2, [r3, #7]
    app_led_state.effect.light_up.sta = 1;              //trạng thái bật
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <app_led_light_up+0x34>)
 800028c:	2201      	movs	r2, #1
 800028e:	721a      	strb	r2, [r3, #8]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000008c 	.word	0x2000008c

080002a0 <find_command_info>:
#include "cli_command_table.h"
#include "cli_type.h"

extern const cli_command_entry_t command_entry_table[];
cli_command_info_t *find_command_info(char *cmd)//khai báo hàm trả về con trỏ 
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
   const cli_command_entry_t *command_entry = command_entry_table; // con trỏ kiểu dữ liệu cm_infor, trỏ tới table
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <find_command_info+0x84>)
 80002aa:	60fb      	str	r3, [r7, #12]
   if(strcmp(cmd,"help")==0)//in lần lượt các text
 80002ac:	491e      	ldr	r1, [pc, #120]	; (8000328 <find_command_info+0x88>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff4c 	bl	800014c <strcmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <find_command_info+0x3e>
   {
    while(command_entry->command_info!= NULL)
 80002ba:	e00b      	b.n	80002d4 <find_command_info+0x34>
    {
        response_print(command_entry->command_info->help);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f9e6 	bl	8000694 <response_print>
        response_print("\n");
 80002c8:	4818      	ldr	r0, [pc, #96]	; (800032c <find_command_info+0x8c>)
 80002ca:	f000 f9e3 	bl	8000694 <response_print>
        command_entry++;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3308      	adds	r3, #8
 80002d2:	60fb      	str	r3, [r7, #12]
    while(command_entry->command_info!= NULL)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1ef      	bne.n	80002bc <find_command_info+0x1c>
 80002dc:	e01d      	b.n	800031a <find_command_info+0x7a>
    }
  
   }
   else if(strcmp(cmd,"help") != 0)
 80002de:	4912      	ldr	r1, [pc, #72]	; (8000328 <find_command_info+0x88>)
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f7ff ff33 	bl	800014c <strcmp>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d016      	beq.n	800031a <find_command_info+0x7a>
   {
   while(command_entry->command_info != NULL)           
 80002ec:	e00e      	b.n	800030c <find_command_info+0x6c>
   {
    if(strcmp(command_entry->name,cmd) == 0)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff29 	bl	800014c <strcmp>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d102      	bne.n	8000306 <find_command_info+0x66>
    {
        return command_entry->command_info; // thực hiện lệnh
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	e00a      	b.n	800031c <find_command_info+0x7c>
    }
    command_entry++;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3308      	adds	r3, #8
 800030a:	60fb      	str	r3, [r7, #12]
   while(command_entry->command_info != NULL)           
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1ec      	bne.n	80002ee <find_command_info+0x4e>
   }
   response_print("find not found command");
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <find_command_info+0x90>)
 8000316:	f000 f9bd 	bl	8000694 <response_print>
   }
   return NULL; // 
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	08003f00 	.word	0x08003f00
 8000328:	08003df4 	.word	0x08003df4
 800032c:	08003dfc 	.word	0x08003dfc
 8000330:	08003e00 	.word	0x08003e00

08000334 <cli_command_excutive>:

void cli_command_excutive(char *uart_buff,uint8_t len){
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
        char* argv[10];
        uint8_t arg_num=0;
 8000340:	2300      	movs	r3, #0
 8000342:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        char* pch; //tach chuoi
        pch = strtok((char*)uart_buff," ");
 8000346:	4917      	ldr	r1, [pc, #92]	; (80003a4 <cli_command_excutive+0x70>)
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f002 fa89 	bl	8002860 <strtok>
 800034e:	63b8      	str	r0, [r7, #56]	; 0x38
        while(pch != NULL)
 8000350:	e011      	b.n	8000376 <cli_command_excutive+0x42>
        {   
            argv[arg_num] = pch;
 8000352:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	3340      	adds	r3, #64	; 0x40
 800035a:	443b      	add	r3, r7
 800035c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800035e:	f843 2c34 	str.w	r2, [r3, #-52]
            pch = strtok(NULL, " ");
 8000362:	4910      	ldr	r1, [pc, #64]	; (80003a4 <cli_command_excutive+0x70>)
 8000364:	2000      	movs	r0, #0
 8000366:	f002 fa7b 	bl	8002860 <strtok>
 800036a:	63b8      	str	r0, [r7, #56]	; 0x38
            arg_num++; 
 800036c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000370:	3301      	adds	r3, #1
 8000372:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        while(pch != NULL)
 8000376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1ea      	bne.n	8000352 <cli_command_excutive+0x1e>
        }
        const cli_command_info_t *command_infor = find_command_info(argv[0]); // khai báo con trỏ cm_infor = con trỏ hàm 
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff8e 	bl	80002a0 <find_command_info>
 8000384:	6378      	str	r0, [r7, #52]	; 0x34
        if(command_infor != NULL)
 8000386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000388:	2b00      	cmp	r3, #0
 800038a:	d007      	beq.n	800039c <cli_command_excutive+0x68>
        {
            command_infor->function(argv,arg_num);
 800038c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8000394:	f107 020c 	add.w	r2, r7, #12
 8000398:	4610      	mov	r0, r2
 800039a:	4798      	blx	r3
        }    

 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	; 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08003e18 	.word	0x08003e18

080003a8 <gettemp_ci>:
#include "gettemp_ci.h"
#include "response.h"
#include "lm35.h"

void gettemp_ci(char **arg_v, uint8_t arg_num)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
    if(arg_num < 2)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d805      	bhi.n	80003c6 <gettemp_ci+0x1e>
    {
        response_print("dont enough, arg = %d",arg_num);
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	4619      	mov	r1, r3
 80003be:	4813      	ldr	r0, [pc, #76]	; (800040c <gettemp_ci+0x64>)
 80003c0:	f000 f968 	bl	8000694 <response_print>
        return;
 80003c4:	e01e      	b.n	8000404 <gettemp_ci+0x5c>
    }
    if(arg_num > 2)
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d905      	bls.n	80003d8 <gettemp_ci+0x30>
    {
        response_print("too much, arg = %d",arg_num);
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	4619      	mov	r1, r3
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <gettemp_ci+0x68>)
 80003d2:	f000 f95f 	bl	8000694 <response_print>
        return;
 80003d6:	e015      	b.n	8000404 <gettemp_ci+0x5c>
    }
    
    uint8_t channal = atoi(arg_v[1]);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3304      	adds	r3, #4
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 fa08 	bl	80027f4 <atoi>
 80003e4:	4603      	mov	r3, r0
 80003e6:	73fb      	strb	r3, [r7, #15]
    response_print("temp = %d\n",(uint8_t)gettemp_lm35(channal));
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f846 	bl	800047c <gettemp_lm35>
 80003f0:	4603      	mov	r3, r0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff febc 	bl	8000170 <__aeabi_f2uiz>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4619      	mov	r1, r3
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <gettemp_ci+0x6c>)
 8000400:	f000 f948 	bl	8000694 <response_print>
}
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	08003e98 	.word	0x08003e98
 8000410:	08003eb0 	.word	0x08003eb0
 8000414:	08003ec4 	.word	0x08003ec4

08000418 <set_led>:
#include "led_drive.h"
#include "string.h"
#include "stdint.h"

void set_led(uint8_t index,uint8_t status)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	460a      	mov	r2, r1
 8000422:	71fb      	strb	r3, [r7, #7]
 8000424:	4613      	mov	r3, r2
 8000426:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0 << index,(GPIO_PinState)status);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2201      	movs	r2, #1
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	b29b      	uxth	r3, r3
 8000432:	79ba      	ldrb	r2, [r7, #6]
 8000434:	4619      	mov	r1, r3
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <set_led+0x2c>)
 8000438:	f000 ff3c 	bl	80012b4 <HAL_GPIO_WritePin>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010800 	.word	0x40010800

08000448 <set_all_led>:
void toggle_led(uint8_t index)
{
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_0<< index);
}
void set_all_led(uint8_t sta)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0;i<8;i++)
 8000452:	2300      	movs	r3, #0
 8000454:	73fb      	strb	r3, [r7, #15]
 8000456:	e008      	b.n	800046a <set_all_led+0x22>
    {
        set_led(i,sta);
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	4611      	mov	r1, r2
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ffda 	bl	8000418 <set_led>
    for(uint8_t i=0;i<8;i++)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	3301      	adds	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	2b07      	cmp	r3, #7
 800046e:	d9f3      	bls.n	8000458 <set_all_led+0x10>
    }
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <gettemp_lm35>:
#include "lm35.h"

float gettemp_lm35(uint8_t channal)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
    float temp = 40.5;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <gettemp_lm35+0x38>)
 8000488:	60fb      	str	r3, [r7, #12]
    if      (channal==0)      temp =10.5;
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <gettemp_lm35+0x1a>
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <gettemp_lm35+0x3c>)
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e008      	b.n	80004a8 <gettemp_lm35+0x2c>
    else if (channal==1)temp =20.5;
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d102      	bne.n	80004a2 <gettemp_lm35+0x26>
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <gettemp_lm35+0x40>)
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e002      	b.n	80004a8 <gettemp_lm35+0x2c>
    else temp=0;
 80004a2:	f04f 0300 	mov.w	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
    return temp;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	42220000 	.word	0x42220000
 80004b8:	41280000 	.word	0x41280000
 80004bc:	41a40000 	.word	0x41a40000

080004c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t data_rx;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(huart-> Instance == huart1.Instance)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_UART_RxCpltCallback+0x30>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d109      	bne.n	80004e8 <HAL_UART_RxCpltCallback+0x28>
  {
    receive_data(data_rx);
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <HAL_UART_RxCpltCallback+0x34>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fad9 	bl	8000a90 <receive_data>
    HAL_UART_Receive_IT(&huart1,&data_rx,1);
 80004de:	2201      	movs	r2, #1
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <HAL_UART_RxCpltCallback+0x34>)
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <HAL_UART_RxCpltCallback+0x30>)
 80004e4:	f001 fbe1 	bl	8001caa <HAL_UART_Receive_IT>
  }
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000098 	.word	0x20000098
 80004f4:	200000e0 	.word	0x200000e0

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb34 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81e 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f882 	bl	800060c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f856 	bl	80005b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Transmit(&huart1,"hello",5,100);
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	2205      	movs	r2, #5
 8000510:	4908      	ldr	r1, [pc, #32]	; (8000534 <main+0x3c>)
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x40>)
 8000514:	f001 fb46 	bl	8001ba4 <HAL_UART_Transmit>
HAL_UART_Receive_IT(&huart1,&data_rx,1);      // nhan 1 byte thi nhay vao ham ngat 
 8000518:	2201      	movs	r2, #1
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <main+0x44>)
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x40>)
 800051e:	f001 fbc4 	bl	8001caa <HAL_UART_Receive_IT>
response_init(&huart1);
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x40>)
 8000524:	f000 f8da 	bl	80006dc <response_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_handle();
 8000528:	f000 fade 	bl	8000ae8 <uart_handle>
    app_led_handle();
 800052c:	f7ff fe6e 	bl	800020c <app_led_handle>
	  uart_handle();
 8000530:	e7fa      	b.n	8000528 <main+0x30>
 8000532:	bf00      	nop
 8000534:	08003ed0 	.word	0x08003ed0
 8000538:	20000098 	.word	0x20000098
 800053c:	200000e0 	.word	0x200000e0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b090      	sub	sp, #64	; 0x40
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f97e 	bl	8002850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056e:	2300      	movs	r3, #0
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	4618      	mov	r0, r3
 8000578:	f000 feb4 	bl	80012e4 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000582:	f000 f881 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f922 	bl	80017e8 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005aa:	f000 f86d 	bl	8000688 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3740      	adds	r7, #64	; 0x40
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_USART1_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f001 fa88 	bl	8001b04 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f845 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098
 8000608:	40013800 	.word	0x40013800

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_GPIO_Init+0x74>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <MX_GPIO_Init+0x74>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_GPIO_Init+0x74>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_GPIO_Init+0x74>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <MX_GPIO_Init+0x74>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_GPIO_Init+0x74>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000650:	2200      	movs	r2, #0
 8000652:	21ff      	movs	r1, #255	; 0xff
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <MX_GPIO_Init+0x78>)
 8000656:	f000 fe2d 	bl	80012b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0x78>)
 8000672:	f000 fc9b 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <response_print>:
#include "response.h"
static UART_HandleTypeDef *huart_printf;

void response_print(const char* str, ...)    
{
 8000694:	b40f      	push	{r0, r1, r2, r3}
 8000696:	b590      	push	{r4, r7, lr}
 8000698:	b09b      	sub	sp, #108	; 0x6c
 800069a:	af00      	add	r7, sp, #0
    char stringArray[100];

    va_list args; // khai báo danh sách đối số biến đổi(args sẽ gồm str,...)
    va_start(args, str);  // khởi tạo args và trỏ đến vị trí của đối số đầu tiên trong danh sách args
 800069c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006a0:	603b      	str	r3, [r7, #0]
    vsprintf(stringArray,str,args); // định dạng chuỗi kí tự
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f9d1 	bl	8002a50 <vsiprintf>
    va_end(args);   //dọn dẹp  
    HAL_UART_Transmit(huart_printf,(uint8_t*)stringArray,strlen(stringArray),100);
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <response_print+0x44>)
 80006b0:	681c      	ldr	r4, [r3, #0]
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd53 	bl	8000160 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	1d39      	adds	r1, r7, #4
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	4620      	mov	r0, r4
 80006c4:	f001 fa6e 	bl	8001ba4 <HAL_UART_Transmit>
}
 80006c8:	bf00      	nop
 80006ca:	376c      	adds	r7, #108	; 0x6c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006d2:	b004      	add	sp, #16
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000e4 	.word	0x200000e4

080006dc <response_init>:
void response_init(UART_HandleTypeDef *_huart_printf)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    huart_printf = _huart_printf;
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <response_init+0x18>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	200000e4 	.word	0x200000e4

080006f8 <setEffect_led>:
#include "setEffect_led_ci.h"
#include "response.h"
#include "stdlib.h"
#include "app_led.h"
void setEffect_led(char **arg_v, uint8_t arg_num)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
    uint8_t index_effect = atoi(arg_v[1]);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3304      	adds	r3, #4
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f872 	bl	80027f4 <atoi>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
    if(index_effect == 1)
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d10e      	bne.n	8000738 <setEffect_led+0x40>
    {
        uint16_t freq = atoi(arg_v[2]);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3308      	adds	r3, #8
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f867 	bl	80027f4 <atoi>
 8000726:	4603      	mov	r3, r0
 8000728:	81bb      	strh	r3, [r7, #12]
        app_led_blink_all(freq);
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd89 	bl	8000244 <app_led_blink_all>
        response_print("ok man");
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <setEffect_led+0x6c>)
 8000734:	f7ff ffae 	bl	8000694 <response_print>
    }
    if(index_effect == 2)
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d10e      	bne.n	800075c <setEffect_led+0x64>
    {
        uint16_t freq = atoi(arg_v[2]);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3308      	adds	r3, #8
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f855 	bl	80027f4 <atoi>
 800074a:	4603      	mov	r3, r0
 800074c:	817b      	strh	r3, [r7, #10]
        app_led_light_up(freq);
 800074e:	897b      	ldrh	r3, [r7, #10]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd89 	bl	8000268 <app_led_light_up>
        response_print("ok man");
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <setEffect_led+0x6c>)
 8000758:	f7ff ff9c 	bl	8000694 <response_print>
    }
    
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08003ed8 	.word	0x08003ed8

08000768 <settempMax>:
#include "settemp_ci.h"

void settempMax(char **arg_v, uint8_t arg_num)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]

}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <settempMix>:
void settempMix(char **arg_v, uint8_t arg_num)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
    
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_MspInit+0x5c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <HAL_MspInit+0x5c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_MspInit+0x5c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x5c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x5c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x5c>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_MspInit+0x60>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_MspInit+0x60>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010000 	.word	0x40010000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a20      	ldr	r2, [pc, #128]	; (8000894 <HAL_UART_MspInit+0x9c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d139      	bne.n	800088c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <HAL_UART_MspInit+0xa0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <HAL_UART_MspInit+0xa0>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_UART_MspInit+0xa0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_UART_MspInit+0xa0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <HAL_UART_MspInit+0xa0>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_UART_MspInit+0xa0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <HAL_UART_MspInit+0xa4>)
 800085e:	f000 fba5 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_UART_MspInit+0xa4>)
 8000878:	f000 fb98 	bl	8000fac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2025      	movs	r0, #37	; 0x25
 8000882:	f000 faaa 	bl	8000dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000886:	2025      	movs	r0, #37	; 0x25
 8000888:	f000 fac3 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40013800 	.word	0x40013800
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f985 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f001 f9fd 	bl	8001cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098

08000904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <_kill>:

int _kill(int pid, int sig)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800091c:	f001 ff6e 	bl	80027fc <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	2216      	movs	r2, #22
 8000924:	601a      	str	r2, [r3, #0]
  return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_exit>:

void _exit (int status)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800093a:	f04f 31ff 	mov.w	r1, #4294967295
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffe7 	bl	8000912 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000944:	e7fe      	b.n	8000944 <_exit+0x12>

08000946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	e00a      	b.n	800096e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000958:	f3af 8000 	nop.w
 800095c:	4601      	mov	r1, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	60ba      	str	r2, [r7, #8]
 8000964:	b2ca      	uxtb	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf0      	blt.n	8000958 <_read+0x12>
  }

  return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e009      	b.n	80009a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	60ba      	str	r2, [r7, #8]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbf1      	blt.n	8000992 <_write+0x12>
  }
  return len;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_close>:

int _close(int file)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009de:	605a      	str	r2, [r3, #4]
  return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_isatty>:

int _isatty(int file)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f4:	2301      	movs	r3, #1
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f001 fed8 	bl	80027fc <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20005000 	.word	0x20005000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	200000e8 	.word	0x200000e8
 8000a80:	20000168 	.word	0x20000168

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <receive_data>:

static char uart_buff[MAX_DATA_UART];
static uint8_t uart_len=0;
uint8_t uart_flag =0;
void receive_data(uint8_t data_rx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    if(data_rx == '\n')
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b0a      	cmp	r3, #10
 8000a9e:	d10d      	bne.n	8000abc <receive_data+0x2c>
    {
        uart_buff[uart_len++]='\0';
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <receive_data+0x4c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	b2d1      	uxtb	r1, r2
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <receive_data+0x4c>)
 8000aaa:	7011      	strb	r1, [r2, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <receive_data+0x50>)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	5499      	strb	r1, [r3, r2]
        uart_flag = 1;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <receive_data+0x54>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
    }
    else 
    {
        uart_buff[uart_len++] = data_rx;
    }
}
 8000aba:	e009      	b.n	8000ad0 <receive_data+0x40>
        uart_buff[uart_len++] = data_rx;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <receive_data+0x4c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	b2d1      	uxtb	r1, r2
 8000ac4:	4a05      	ldr	r2, [pc, #20]	; (8000adc <receive_data+0x4c>)
 8000ac6:	7011      	strb	r1, [r2, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <receive_data+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	5453      	strb	r3, [r2, r1]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000150 	.word	0x20000150
 8000ae0:	200000ec 	.word	0x200000ec
 8000ae4:	20000151 	.word	0x20000151

08000ae8 <uart_handle>:
void uart_init();   
void uart_handle()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    if(uart_flag)
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <uart_handle+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00b      	beq.n	8000b0c <uart_handle+0x24>
    {
        cli_command_excutive(uart_buff,uart_len);
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <uart_handle+0x2c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <uart_handle+0x30>)
 8000afc:	f7ff fc1a 	bl	8000334 <cli_command_excutive>
        uart_flag = 0;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <uart_handle+0x28>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
        uart_len = 0;
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <uart_handle+0x2c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    }
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000151 	.word	0x20000151
 8000b14:	20000150 	.word	0x20000150
 8000b18:	200000ec 	.word	0x200000ec

08000b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffb2 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b38:	4c09      	ldr	r4, [pc, #36]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f001 fe5f 	bl	8002808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fcd5 	bl	80004f8 <main>
  bx lr
 8000b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b58:	080041a4 	.word	0x080041a4
  ldr r2, =_sbss
 8000b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b60:	20000168 	.word	0x20000168

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x28>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x28>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f923 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe06 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f93b 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f903 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x20>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000154 	.word	0x20000154

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000154 	.word	0x20000154

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <__NVIC_EnableIRQ+0x34>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff90 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff2d 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff42 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff90 	bl	8000d1c <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5f 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff35 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d008      	beq.n	8000e70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2204      	movs	r2, #4
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e020      	b.n	8000eb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020e 	bic.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d005      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e051      	b.n	8000f84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <HAL_DMA_Abort_IT+0xd4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d029      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <HAL_DMA_Abort_IT+0xd8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d022      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x9e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <HAL_DMA_Abort_IT+0xdc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01a      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x98>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_DMA_Abort_IT+0xe0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d012      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x92>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_DMA_Abort_IT+0xe4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00a      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x8c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <HAL_DMA_Abort_IT+0xe8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d102      	bne.n	8000f42 <HAL_DMA_Abort_IT+0x86>
 8000f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f40:	e00e      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f46:	e00b      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4c:	e008      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	e005      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	e002      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	e000      	b.n	8000f60 <HAL_DMA_Abort_IT+0xa4>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_DMA_Abort_IT+0xec>)
 8000f62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	4798      	blx	r3
    } 
  }
  return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020008 	.word	0x40020008
 8000f94:	4002001c 	.word	0x4002001c
 8000f98:	40020030 	.word	0x40020030
 8000f9c:	40020044 	.word	0x40020044
 8000fa0:	40020058 	.word	0x40020058
 8000fa4:	4002006c 	.word	0x4002006c
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b08b      	sub	sp, #44	; 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e169      	b.n	8001294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8158 	bne.w	800128e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4a9a      	ldr	r2, [pc, #616]	; (800124c <HAL_GPIO_Init+0x2a0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d05e      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000fe8:	4a98      	ldr	r2, [pc, #608]	; (800124c <HAL_GPIO_Init+0x2a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d875      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000fee:	4a98      	ldr	r2, [pc, #608]	; (8001250 <HAL_GPIO_Init+0x2a4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d058      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a96      	ldr	r2, [pc, #600]	; (8001250 <HAL_GPIO_Init+0x2a4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d86f      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000ffa:	4a96      	ldr	r2, [pc, #600]	; (8001254 <HAL_GPIO_Init+0x2a8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d052      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001000:	4a94      	ldr	r2, [pc, #592]	; (8001254 <HAL_GPIO_Init+0x2a8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d869      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001006:	4a94      	ldr	r2, [pc, #592]	; (8001258 <HAL_GPIO_Init+0x2ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d04c      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 800100c:	4a92      	ldr	r2, [pc, #584]	; (8001258 <HAL_GPIO_Init+0x2ac>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d863      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001012:	4a92      	ldr	r2, [pc, #584]	; (800125c <HAL_GPIO_Init+0x2b0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d046      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001018:	4a90      	ldr	r2, [pc, #576]	; (800125c <HAL_GPIO_Init+0x2b0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d85d      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d82a      	bhi.n	8001078 <HAL_GPIO_Init+0xcc>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d859      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001026:	a201      	add	r2, pc, #4	; (adr r2, 800102c <HAL_GPIO_Init+0x80>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	080010a7 	.word	0x080010a7
 8001030:	08001081 	.word	0x08001081
 8001034:	08001093 	.word	0x08001093
 8001038:	080010d5 	.word	0x080010d5
 800103c:	080010db 	.word	0x080010db
 8001040:	080010db 	.word	0x080010db
 8001044:	080010db 	.word	0x080010db
 8001048:	080010db 	.word	0x080010db
 800104c:	080010db 	.word	0x080010db
 8001050:	080010db 	.word	0x080010db
 8001054:	080010db 	.word	0x080010db
 8001058:	080010db 	.word	0x080010db
 800105c:	080010db 	.word	0x080010db
 8001060:	080010db 	.word	0x080010db
 8001064:	080010db 	.word	0x080010db
 8001068:	080010db 	.word	0x080010db
 800106c:	080010db 	.word	0x080010db
 8001070:	08001089 	.word	0x08001089
 8001074:	0800109d 	.word	0x0800109d
 8001078:	4a79      	ldr	r2, [pc, #484]	; (8001260 <HAL_GPIO_Init+0x2b4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107e:	e02c      	b.n	80010da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e029      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	3304      	adds	r3, #4
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e024      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	3308      	adds	r3, #8
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e01f      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	330c      	adds	r3, #12
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e01a      	b.n	80010dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ae:	2304      	movs	r3, #4
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e013      	b.n	80010dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	611a      	str	r2, [r3, #16]
          break;
 80010c6:	e009      	b.n	80010dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	615a      	str	r2, [r3, #20]
          break;
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x130>
          break;
 80010da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	; 0xff
 80010e0:	d801      	bhi.n	80010e6 <HAL_GPIO_Init+0x13a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_Init+0x13e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	; 0xff
 80010f0:	d802      	bhi.n	80010f8 <HAL_GPIO_Init+0x14c>
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x152>
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3b08      	subs	r3, #8
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	210f      	movs	r1, #15
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	6a39      	ldr	r1, [r7, #32]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80b1 	beq.w	800128e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <HAL_GPIO_Init+0x2b8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x2b8>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001144:	4a48      	ldr	r2, [pc, #288]	; (8001268 <HAL_GPIO_Init+0x2bc>)
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a40      	ldr	r2, [pc, #256]	; (800126c <HAL_GPIO_Init+0x2c0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_GPIO_Init+0x1ec>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00d      	beq.n	8001194 <HAL_GPIO_Init+0x1e8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d007      	beq.n	8001190 <HAL_GPIO_Init+0x1e4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3d      	ldr	r2, [pc, #244]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_GPIO_Init+0x1e0>
 8001188:	2303      	movs	r3, #3
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 800118c:	2304      	movs	r3, #4
 800118e:	e004      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001190:	2302      	movs	r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001198:	2300      	movs	r3, #0
 800119a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119c:	f002 0203 	and.w	r2, r2, #3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4093      	lsls	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011aa:	492f      	ldr	r1, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x2bc>)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	492c      	ldr	r1, [pc, #176]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	4928      	ldr	r1, [pc, #160]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	4922      	ldr	r1, [pc, #136]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60cb      	str	r3, [r1, #12]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	491e      	ldr	r1, [pc, #120]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001204:	4013      	ands	r3, r2
 8001206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4918      	ldr	r1, [pc, #96]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4914      	ldr	r1, [pc, #80]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800122c:	4013      	ands	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d021      	beq.n	8001280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e021      	b.n	800128e <HAL_GPIO_Init+0x2e2>
 800124a:	bf00      	nop
 800124c:	10320000 	.word	0x10320000
 8001250:	10310000 	.word	0x10310000
 8001254:	10220000 	.word	0x10220000
 8001258:	10210000 	.word	0x10210000
 800125c:	10120000 	.word	0x10120000
 8001260:	10110000 	.word	0x10110000
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010c00 	.word	0x40010c00
 8001274:	40011000 	.word	0x40011000
 8001278:	40011400 	.word	0x40011400
 800127c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	43db      	mvns	r3, r3
 8001288:	4909      	ldr	r1, [pc, #36]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800128a:	4013      	ands	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3301      	adds	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f47f ae8e 	bne.w	8000fc0 <HAL_GPIO_Init+0x14>
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	372c      	adds	r7, #44	; 0x2c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e272      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8087 	beq.w	8001412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00c      	beq.n	800132a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001310:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d112      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
 800131c:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d10b      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d06c      	beq.n	8001410 <HAL_RCC_OscConfig+0x12c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d168      	bne.n	8001410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e24c      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x76>
 800134c:	4b80      	ldr	r3, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a7f      	ldr	r2, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7a      	ldr	r2, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0xbc>
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a71      	ldr	r2, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 80013a0:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6a      	ldr	r2, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc2a 	bl	8000c18 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc26 	bl	8000c18 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e200      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe4>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc16 	bl	8000c18 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fc12 	bl	8000c18 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1ec      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x10c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d063      	beq.n	80014e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142a:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d11c      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d116      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1c0      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4939      	ldr	r1, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	e03a      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fbcb 	bl	8000c18 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fbc7 	bl	8000c18 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e1a1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4927      	ldr	r1, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbaa 	bl	8000c18 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fba6 	bl	8000c18 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e180      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03a      	beq.n	8001568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fb8a 	bl	8000c18 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fb86 	bl	8000c18 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e160      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 face 	bl	8001ac8 <RCC_Delay>
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fb70 	bl	8000c18 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e00f      	b.n	800155c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fb6c 	bl	8000c18 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d908      	bls.n	800155c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e146      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	42420000 	.word	0x42420000
 8001558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e9      	bne.n	800153c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a6 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a87      	ldr	r2, [pc, #540]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b82      	ldr	r3, [pc, #520]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb2d 	bl	8000c18 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fb29 	bl	8000c18 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e103      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x312>
 80015e8:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a6e      	ldr	r2, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x334>
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4a66      	ldr	r2, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x356>
 8001620:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a60      	ldr	r2, [pc, #384]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a5d      	ldr	r2, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a5a      	ldr	r2, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fadd 	bl	8000c18 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fad9 	bl	8000c18 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0b1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x37e>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fac7 	bl	8000c18 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fac3 	bl	8000c18 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e09b      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a3b      	ldr	r2, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8087 	beq.w	80017da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d061      	beq.n	800179c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d146      	bne.n	800176e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fa97 	bl	8000c18 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fa93 	bl	8000c18 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e06d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4921      	ldr	r1, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a19      	ldr	r1, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	430b      	orrs	r3, r1
 800173a:	491b      	ldr	r1, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fa67 	bl	8000c18 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fa63 	bl	8000c18 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x46a>
 800176c:	e035      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fa50 	bl	8000c18 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fa4c 	bl	8000c18 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e026      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x498>
 800179a:	e01e      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e019      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x500>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d0      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4965      	ldr	r1, [pc, #404]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e073      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4936      	ldr	r1, [pc, #216]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f99e 	bl	8000c18 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f99a 	bl	8000c18 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e053      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d210      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f8fc 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003f28 	.word	0x08003f28
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x30>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ea:	e027      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ee:	613b      	str	r3, [r7, #16]
      break;
 80019f0:	e027      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	0c5b      	lsrs	r3, r3, #17
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1e:	fb03 f202 	mul.w	r2, r3, r2
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e004      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	693b      	ldr	r3, [r7, #16]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	08003f40 	.word	0x08003f40
 8001a5c:	08003f50 	.word	0x08003f50
 8001a60:	003d0900 	.word	0x003d0900

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff2 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08003f38 	.word	0x08003f38

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08003f38 	.word	0x08003f38

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e042      	b.n	8001b9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fe64 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fdc5 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d16d      	bne.n	8001ca0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_UART_Transmit+0x2c>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e066      	b.n	8001ca2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2221      	movs	r2, #33	; 0x21
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001be2:	f7ff f819 	bl	8000c18 <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bfc:	d108      	bne.n	8001c10 <HAL_UART_Transmit+0x6c>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e003      	b.n	8001c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c18:	e02a      	b.n	8001c70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fb14 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e036      	b.n	8001ca2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10b      	bne.n	8001c52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	e007      	b.n	8001c62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1cf      	bne.n	8001c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2200      	movs	r2, #0
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fae4 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d112      	bne.n	8001cea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_UART_Receive_IT+0x26>
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00b      	b.n	8001cec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fb24 	bl	800232e <UART_Start_Receive_IT>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	e000      	b.n	8001cec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0ba      	sub	sp, #232	; 0xe8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_UART_IRQHandler+0x66>
 8001d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fc01 	bl	800255a <UART_Receive_IT>
      return;
 8001d58:	e25b      	b.n	8002212 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80de 	beq.w	8001f20 <HAL_UART_IRQHandler+0x22c>
 8001d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80d1 	beq.w	8001f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_UART_IRQHandler+0xae>
 8001d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xd2>
 8001dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_UART_IRQHandler+0xf6>
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f043 0204 	orr.w	r2, r3, #4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d011      	beq.n	8001e1a <HAL_UART_IRQHandler+0x126>
 8001df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0208 	orr.w	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 81f2 	beq.w	8002208 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_UART_IRQHandler+0x14e>
 8001e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb8c 	bl	800255a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <HAL_UART_IRQHandler+0x17a>
 8001e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d04f      	beq.n	8001f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fa96 	bl	80023a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d041      	beq.n	8001f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3314      	adds	r3, #20
 8001e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e90:	e853 3f00 	ldrex	r3, [r3]
 8001e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ebe:	e841 2300 	strex	r3, r2, [r1]
 8001ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1d9      	bne.n	8001e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d013      	beq.n	8001efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	4a7e      	ldr	r2, [pc, #504]	; (80020d4 <HAL_UART_IRQHandler+0x3e0>)
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ffea 	bl	8000ebc <HAL_DMA_Abort_IT>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efc:	e00e      	b.n	8001f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f993 	bl	800222a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	e00a      	b.n	8001f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f98f 	bl	800222a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f0c:	e006      	b.n	8001f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f98b 	bl	800222a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f1a:	e175      	b.n	8002208 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	bf00      	nop
    return;
 8001f1e:	e173      	b.n	8002208 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	f040 814f 	bne.w	80021c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8148 	beq.w	80021c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8141 	beq.w	80021c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80b6 	beq.w	80020d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8145 	beq.w	800220c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	f080 813e 	bcs.w	800220c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	f000 8088 	beq.w	80020b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fb2:	e853 3f00 	ldrex	r3, [r3]
 8001fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fd0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fe0:	e841 2300 	strex	r3, r2, [r1]
 8001fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1d9      	bne.n	8001fa4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002014:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002018:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800201c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002020:	e841 2300 	strex	r3, r2, [r1]
 8002024:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e1      	bne.n	8001ff0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3314      	adds	r3, #20
 8002032:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002036:	e853 3f00 	ldrex	r3, [r3]
 800203a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3314      	adds	r3, #20
 800204c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002050:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002054:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002056:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002058:	e841 2300 	strex	r3, r2, [r1]
 800205c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800205e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e3      	bne.n	800202c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	f023 0310 	bic.w	r3, r3, #16
 8002088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002096:	65ba      	str	r2, [r7, #88]	; 0x58
 8002098:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800209c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800209e:	e841 2300 	strex	r3, r2, [r1]
 80020a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e3      	bne.n	8002072 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fec9 	bl	8000e46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8b6 	bl	800223c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020d0:	e09c      	b.n	800220c <HAL_UART_IRQHandler+0x518>
 80020d2:	bf00      	nop
 80020d4:	08002465 	.word	0x08002465
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 808e 	beq.w	8002210 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8089 	beq.w	8002210 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	e853 3f00 	ldrex	r3, [r3]
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002122:	647a      	str	r2, [r7, #68]	; 0x44
 8002124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e3      	bne.n	80020fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3314      	adds	r3, #20
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	623b      	str	r3, [r7, #32]
   return(result);
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3314      	adds	r3, #20
 8002156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800215a:	633a      	str	r2, [r7, #48]	; 0x30
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002162:	e841 2300 	strex	r3, r2, [r1]
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e3      	bne.n	8002136 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	e853 3f00 	ldrex	r3, [r3]
 800218a:	60fb      	str	r3, [r7, #12]
   return(result);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0310 	bic.w	r3, r3, #16
 8002192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	330c      	adds	r3, #12
 800219c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021a0:	61fa      	str	r2, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	69b9      	ldr	r1, [r7, #24]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	617b      	str	r3, [r7, #20]
   return(result);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e3      	bne.n	800217c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f83b 	bl	800223c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021c6:	e023      	b.n	8002210 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_UART_IRQHandler+0x4f4>
 80021d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f953 	bl	800248c <UART_Transmit_IT>
    return;
 80021e6:	e014      	b.n	8002212 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <HAL_UART_IRQHandler+0x51e>
 80021f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f992 	bl	800252a <UART_EndTransmit_IT>
    return;
 8002206:	e004      	b.n	8002212 <HAL_UART_IRQHandler+0x51e>
    return;
 8002208:	bf00      	nop
 800220a:	e002      	b.n	8002212 <HAL_UART_IRQHandler+0x51e>
      return;
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <HAL_UART_IRQHandler+0x51e>
      return;
 8002210:	bf00      	nop
  }
}
 8002212:	37e8      	adds	r7, #232	; 0xe8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b090      	sub	sp, #64	; 0x40
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002262:	e050      	b.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d04c      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800226c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
 8002272:	f7fe fcd1 	bl	8000c18 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800227e:	429a      	cmp	r2, r3
 8002280:	d241      	bcs.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	e853 3f00 	ldrex	r3, [r3]
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	330c      	adds	r3, #12
 80022a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a2:	637a      	str	r2, [r7, #52]	; 0x34
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022aa:	e841 2300 	strex	r3, r2, [r1]
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e5      	bne.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	e853 3f00 	ldrex	r3, [r3]
 80022c4:	613b      	str	r3, [r7, #16]
   return(result);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d6:	623a      	str	r2, [r7, #32]
 80022d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022da:	69f9      	ldr	r1, [r7, #28]
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e5      	bne.n	80022b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e00f      	b.n	8002326 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	429a      	cmp	r2, r3
 8002322:	d09f      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3740      	adds	r7, #64	; 0x40
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	4613      	mov	r3, r2
 800233a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2222      	movs	r2, #34	; 0x22
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002372:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b095      	sub	sp, #84	; 0x54
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b2:	e853 3f00 	ldrex	r3, [r3]
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023c8:	643a      	str	r2, [r7, #64]	; 0x40
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023d0:	e841 2300 	strex	r3, r2, [r1]
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e5      	bne.n	80023a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3314      	adds	r3, #20
 80023e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	e853 3f00 	ldrex	r3, [r3]
 80023ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3314      	adds	r3, #20
 80023fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002404:	e841 2300 	strex	r3, r2, [r1]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e5      	bne.n	80023dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	2b01      	cmp	r3, #1
 8002416:	d119      	bne.n	800244c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	60bb      	str	r3, [r7, #8]
   return(result);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f023 0310 	bic.w	r3, r3, #16
 800242e:	647b      	str	r3, [r7, #68]	; 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	330c      	adds	r3, #12
 8002436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002438:	61ba      	str	r2, [r7, #24]
 800243a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	613b      	str	r3, [r7, #16]
   return(result);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e5      	bne.n	8002418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800245a:	bf00      	nop
 800245c:	3754      	adds	r7, #84	; 0x54
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff fed3 	bl	800222a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b21      	cmp	r3, #33	; 0x21
 800249e:	d13e      	bne.n	800251e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d114      	bne.n	80024d4 <UART_Transmit_IT+0x48>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d110      	bne.n	80024d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]
 80024d2:	e008      	b.n	80024e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	1c59      	adds	r1, r3, #1
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6211      	str	r1, [r2, #32]
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4619      	mov	r1, r3
 80024f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800251e:	2302      	movs	r3, #2
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fe64 	bl	8002218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b08c      	sub	sp, #48	; 0x30
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b22      	cmp	r3, #34	; 0x22
 800256c:	f040 80ae 	bne.w	80026cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002578:	d117      	bne.n	80025aa <UART_Receive_IT+0x50>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	b29a      	uxth	r2, r3
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	1c9a      	adds	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
 80025a8:	e026      	b.n	80025f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025bc:	d007      	beq.n	80025ce <UART_Receive_IT+0x74>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <UART_Receive_IT+0x82>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e008      	b.n	80025ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29b      	uxth	r3, r3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002608:	2b00      	cmp	r3, #0
 800260a:	d15d      	bne.n	80026c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0220 	bic.w	r2, r2, #32
 800261a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2b01      	cmp	r3, #1
 8002650:	d135      	bne.n	80026be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	613b      	str	r3, [r7, #16]
   return(result);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f023 0310 	bic.w	r3, r3, #16
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	623a      	str	r2, [r7, #32]
 800267a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	69f9      	ldr	r1, [r7, #28]
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	61bb      	str	r3, [r7, #24]
   return(result);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d10a      	bne.n	80026b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fdc0 	bl	800223c <HAL_UARTEx_RxEventCallback>
 80026bc:	e002      	b.n	80026c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fd fefe 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e002      	b.n	80026ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002712:	f023 030c 	bic.w	r3, r3, #12
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	430b      	orrs	r3, r1
 800271e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <UART_SetConfig+0x114>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002740:	f7ff f9ae 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	e002      	b.n	800274e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002748:	f7ff f996 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 800274c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	009a      	lsls	r2, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <UART_SetConfig+0x118>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	0119      	lsls	r1, r3, #4
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009a      	lsls	r2, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fbb2 f2f3 	udiv	r2, r2, r3
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <UART_SetConfig+0x118>)
 8002786:	fba3 0302 	umull	r0, r3, r3, r2
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <UART_SetConfig+0x118>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a4:	4419      	add	r1, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <UART_SetConfig+0x118>)
 80027be:	fba3 0302 	umull	r0, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	fb00 f303 	mul.w	r3, r0, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <UART_SetConfig+0x118>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	440a      	add	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013800 	.word	0x40013800
 80027f0:	51eb851f 	.word	0x51eb851f

080027f4 <atoi>:
 80027f4:	220a      	movs	r2, #10
 80027f6:	2100      	movs	r1, #0
 80027f8:	f000 b90a 	b.w	8002a10 <strtol>

080027fc <__errno>:
 80027fc:	4b01      	ldr	r3, [pc, #4]	; (8002804 <__errno+0x8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c

08002808 <__libc_init_array>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	2600      	movs	r6, #0
 800280c:	4d0c      	ldr	r5, [pc, #48]	; (8002840 <__libc_init_array+0x38>)
 800280e:	4c0d      	ldr	r4, [pc, #52]	; (8002844 <__libc_init_array+0x3c>)
 8002810:	1b64      	subs	r4, r4, r5
 8002812:	10a4      	asrs	r4, r4, #2
 8002814:	42a6      	cmp	r6, r4
 8002816:	d109      	bne.n	800282c <__libc_init_array+0x24>
 8002818:	f001 fae0 	bl	8003ddc <_init>
 800281c:	2600      	movs	r6, #0
 800281e:	4d0a      	ldr	r5, [pc, #40]	; (8002848 <__libc_init_array+0x40>)
 8002820:	4c0a      	ldr	r4, [pc, #40]	; (800284c <__libc_init_array+0x44>)
 8002822:	1b64      	subs	r4, r4, r5
 8002824:	10a4      	asrs	r4, r4, #2
 8002826:	42a6      	cmp	r6, r4
 8002828:	d105      	bne.n	8002836 <__libc_init_array+0x2e>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002830:	4798      	blx	r3
 8002832:	3601      	adds	r6, #1
 8002834:	e7ee      	b.n	8002814 <__libc_init_array+0xc>
 8002836:	f855 3b04 	ldr.w	r3, [r5], #4
 800283a:	4798      	blx	r3
 800283c:	3601      	adds	r6, #1
 800283e:	e7f2      	b.n	8002826 <__libc_init_array+0x1e>
 8002840:	0800419c 	.word	0x0800419c
 8002844:	0800419c 	.word	0x0800419c
 8002848:	0800419c 	.word	0x0800419c
 800284c:	080041a0 	.word	0x080041a0

08002850 <memset>:
 8002850:	4603      	mov	r3, r0
 8002852:	4402      	add	r2, r0
 8002854:	4293      	cmp	r3, r2
 8002856:	d100      	bne.n	800285a <memset+0xa>
 8002858:	4770      	bx	lr
 800285a:	f803 1b01 	strb.w	r1, [r3], #1
 800285e:	e7f9      	b.n	8002854 <memset+0x4>

08002860 <strtok>:
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <strtok+0x5c>)
 8002862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002866:	681f      	ldr	r7, [r3, #0]
 8002868:	4605      	mov	r5, r0
 800286a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800286c:	460e      	mov	r6, r1
 800286e:	b9ec      	cbnz	r4, 80028ac <strtok+0x4c>
 8002870:	2050      	movs	r0, #80	; 0x50
 8002872:	f000 f927 	bl	8002ac4 <malloc>
 8002876:	4602      	mov	r2, r0
 8002878:	65b8      	str	r0, [r7, #88]	; 0x58
 800287a:	b920      	cbnz	r0, 8002886 <strtok+0x26>
 800287c:	2157      	movs	r1, #87	; 0x57
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <strtok+0x60>)
 8002880:	4810      	ldr	r0, [pc, #64]	; (80028c4 <strtok+0x64>)
 8002882:	f000 f8ef 	bl	8002a64 <__assert_func>
 8002886:	e9c0 4400 	strd	r4, r4, [r0]
 800288a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800288e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002892:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002896:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800289a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800289e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80028a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80028a6:	6184      	str	r4, [r0, #24]
 80028a8:	7704      	strb	r4, [r0, #28]
 80028aa:	6244      	str	r4, [r0, #36]	; 0x24
 80028ac:	4631      	mov	r1, r6
 80028ae:	4628      	mov	r0, r5
 80028b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028b2:	2301      	movs	r3, #1
 80028b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028b8:	f000 b806 	b.w	80028c8 <__strtok_r>
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	08003f58 	.word	0x08003f58
 80028c4:	08003f6f 	.word	0x08003f6f

080028c8 <__strtok_r>:
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b908      	cbnz	r0, 80028d0 <__strtok_r+0x8>
 80028cc:	6810      	ldr	r0, [r2, #0]
 80028ce:	b188      	cbz	r0, 80028f4 <__strtok_r+0x2c>
 80028d0:	4604      	mov	r4, r0
 80028d2:	460f      	mov	r7, r1
 80028d4:	4620      	mov	r0, r4
 80028d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80028da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80028de:	b91e      	cbnz	r6, 80028e8 <__strtok_r+0x20>
 80028e0:	b965      	cbnz	r5, 80028fc <__strtok_r+0x34>
 80028e2:	4628      	mov	r0, r5
 80028e4:	6015      	str	r5, [r2, #0]
 80028e6:	e005      	b.n	80028f4 <__strtok_r+0x2c>
 80028e8:	42b5      	cmp	r5, r6
 80028ea:	d1f6      	bne.n	80028da <__strtok_r+0x12>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <__strtok_r+0xa>
 80028f0:	6014      	str	r4, [r2, #0]
 80028f2:	7003      	strb	r3, [r0, #0]
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	461c      	mov	r4, r3
 80028f8:	e00c      	b.n	8002914 <__strtok_r+0x4c>
 80028fa:	b915      	cbnz	r5, 8002902 <__strtok_r+0x3a>
 80028fc:	460e      	mov	r6, r1
 80028fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002902:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002906:	42ab      	cmp	r3, r5
 8002908:	d1f7      	bne.n	80028fa <__strtok_r+0x32>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f3      	beq.n	80028f6 <__strtok_r+0x2e>
 800290e:	2300      	movs	r3, #0
 8002910:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002914:	6014      	str	r4, [r2, #0]
 8002916:	e7ed      	b.n	80028f4 <__strtok_r+0x2c>

08002918 <_strtol_l.constprop.0>:
 8002918:	2b01      	cmp	r3, #1
 800291a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800291e:	4680      	mov	r8, r0
 8002920:	d001      	beq.n	8002926 <_strtol_l.constprop.0+0xe>
 8002922:	2b24      	cmp	r3, #36	; 0x24
 8002924:	d906      	bls.n	8002934 <_strtol_l.constprop.0+0x1c>
 8002926:	f7ff ff69 	bl	80027fc <__errno>
 800292a:	2316      	movs	r3, #22
 800292c:	6003      	str	r3, [r0, #0]
 800292e:	2000      	movs	r0, #0
 8002930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002934:	460d      	mov	r5, r1
 8002936:	4f35      	ldr	r7, [pc, #212]	; (8002a0c <_strtol_l.constprop.0+0xf4>)
 8002938:	4628      	mov	r0, r5
 800293a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800293e:	5de6      	ldrb	r6, [r4, r7]
 8002940:	f016 0608 	ands.w	r6, r6, #8
 8002944:	d1f8      	bne.n	8002938 <_strtol_l.constprop.0+0x20>
 8002946:	2c2d      	cmp	r4, #45	; 0x2d
 8002948:	d12f      	bne.n	80029aa <_strtol_l.constprop.0+0x92>
 800294a:	2601      	movs	r6, #1
 800294c:	782c      	ldrb	r4, [r5, #0]
 800294e:	1c85      	adds	r5, r0, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d057      	beq.n	8002a04 <_strtol_l.constprop.0+0xec>
 8002954:	2b10      	cmp	r3, #16
 8002956:	d109      	bne.n	800296c <_strtol_l.constprop.0+0x54>
 8002958:	2c30      	cmp	r4, #48	; 0x30
 800295a:	d107      	bne.n	800296c <_strtol_l.constprop.0+0x54>
 800295c:	7828      	ldrb	r0, [r5, #0]
 800295e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002962:	2858      	cmp	r0, #88	; 0x58
 8002964:	d149      	bne.n	80029fa <_strtol_l.constprop.0+0xe2>
 8002966:	2310      	movs	r3, #16
 8002968:	786c      	ldrb	r4, [r5, #1]
 800296a:	3502      	adds	r5, #2
 800296c:	2700      	movs	r7, #0
 800296e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002972:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002976:	fbbe f9f3 	udiv	r9, lr, r3
 800297a:	4638      	mov	r0, r7
 800297c:	fb03 ea19 	mls	sl, r3, r9, lr
 8002980:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002984:	f1bc 0f09 	cmp.w	ip, #9
 8002988:	d814      	bhi.n	80029b4 <_strtol_l.constprop.0+0x9c>
 800298a:	4664      	mov	r4, ip
 800298c:	42a3      	cmp	r3, r4
 800298e:	dd22      	ble.n	80029d6 <_strtol_l.constprop.0+0xbe>
 8002990:	2f00      	cmp	r7, #0
 8002992:	db1d      	blt.n	80029d0 <_strtol_l.constprop.0+0xb8>
 8002994:	4581      	cmp	r9, r0
 8002996:	d31b      	bcc.n	80029d0 <_strtol_l.constprop.0+0xb8>
 8002998:	d101      	bne.n	800299e <_strtol_l.constprop.0+0x86>
 800299a:	45a2      	cmp	sl, r4
 800299c:	db18      	blt.n	80029d0 <_strtol_l.constprop.0+0xb8>
 800299e:	2701      	movs	r7, #1
 80029a0:	fb00 4003 	mla	r0, r0, r3, r4
 80029a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80029a8:	e7ea      	b.n	8002980 <_strtol_l.constprop.0+0x68>
 80029aa:	2c2b      	cmp	r4, #43	; 0x2b
 80029ac:	bf04      	itt	eq
 80029ae:	782c      	ldrbeq	r4, [r5, #0]
 80029b0:	1c85      	addeq	r5, r0, #2
 80029b2:	e7cd      	b.n	8002950 <_strtol_l.constprop.0+0x38>
 80029b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80029b8:	f1bc 0f19 	cmp.w	ip, #25
 80029bc:	d801      	bhi.n	80029c2 <_strtol_l.constprop.0+0xaa>
 80029be:	3c37      	subs	r4, #55	; 0x37
 80029c0:	e7e4      	b.n	800298c <_strtol_l.constprop.0+0x74>
 80029c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80029c6:	f1bc 0f19 	cmp.w	ip, #25
 80029ca:	d804      	bhi.n	80029d6 <_strtol_l.constprop.0+0xbe>
 80029cc:	3c57      	subs	r4, #87	; 0x57
 80029ce:	e7dd      	b.n	800298c <_strtol_l.constprop.0+0x74>
 80029d0:	f04f 37ff 	mov.w	r7, #4294967295
 80029d4:	e7e6      	b.n	80029a4 <_strtol_l.constprop.0+0x8c>
 80029d6:	2f00      	cmp	r7, #0
 80029d8:	da07      	bge.n	80029ea <_strtol_l.constprop.0+0xd2>
 80029da:	2322      	movs	r3, #34	; 0x22
 80029dc:	4670      	mov	r0, lr
 80029de:	f8c8 3000 	str.w	r3, [r8]
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d0a4      	beq.n	8002930 <_strtol_l.constprop.0+0x18>
 80029e6:	1e69      	subs	r1, r5, #1
 80029e8:	e005      	b.n	80029f6 <_strtol_l.constprop.0+0xde>
 80029ea:	b106      	cbz	r6, 80029ee <_strtol_l.constprop.0+0xd6>
 80029ec:	4240      	negs	r0, r0
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	d09e      	beq.n	8002930 <_strtol_l.constprop.0+0x18>
 80029f2:	2f00      	cmp	r7, #0
 80029f4:	d1f7      	bne.n	80029e6 <_strtol_l.constprop.0+0xce>
 80029f6:	6011      	str	r1, [r2, #0]
 80029f8:	e79a      	b.n	8002930 <_strtol_l.constprop.0+0x18>
 80029fa:	2430      	movs	r4, #48	; 0x30
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1b5      	bne.n	800296c <_strtol_l.constprop.0+0x54>
 8002a00:	2308      	movs	r3, #8
 8002a02:	e7b3      	b.n	800296c <_strtol_l.constprop.0+0x54>
 8002a04:	2c30      	cmp	r4, #48	; 0x30
 8002a06:	d0a9      	beq.n	800295c <_strtol_l.constprop.0+0x44>
 8002a08:	230a      	movs	r3, #10
 8002a0a:	e7af      	b.n	800296c <_strtol_l.constprop.0+0x54>
 8002a0c:	08004009 	.word	0x08004009

08002a10 <strtol>:
 8002a10:	4613      	mov	r3, r2
 8002a12:	460a      	mov	r2, r1
 8002a14:	4601      	mov	r1, r0
 8002a16:	4802      	ldr	r0, [pc, #8]	; (8002a20 <strtol+0x10>)
 8002a18:	6800      	ldr	r0, [r0, #0]
 8002a1a:	f7ff bf7d 	b.w	8002918 <_strtol_l.constprop.0>
 8002a1e:	bf00      	nop
 8002a20:	2000000c 	.word	0x2000000c

08002a24 <_vsiprintf_r>:
 8002a24:	b500      	push	{lr}
 8002a26:	b09b      	sub	sp, #108	; 0x6c
 8002a28:	9100      	str	r1, [sp, #0]
 8002a2a:	9104      	str	r1, [sp, #16]
 8002a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a30:	9105      	str	r1, [sp, #20]
 8002a32:	9102      	str	r1, [sp, #8]
 8002a34:	4905      	ldr	r1, [pc, #20]	; (8002a4c <_vsiprintf_r+0x28>)
 8002a36:	9103      	str	r1, [sp, #12]
 8002a38:	4669      	mov	r1, sp
 8002a3a:	f000 f983 	bl	8002d44 <_svfiprintf_r>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	9b00      	ldr	r3, [sp, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	b01b      	add	sp, #108	; 0x6c
 8002a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a4a:	bf00      	nop
 8002a4c:	ffff0208 	.word	0xffff0208

08002a50 <vsiprintf>:
 8002a50:	4613      	mov	r3, r2
 8002a52:	460a      	mov	r2, r1
 8002a54:	4601      	mov	r1, r0
 8002a56:	4802      	ldr	r0, [pc, #8]	; (8002a60 <vsiprintf+0x10>)
 8002a58:	6800      	ldr	r0, [r0, #0]
 8002a5a:	f7ff bfe3 	b.w	8002a24 <_vsiprintf_r>
 8002a5e:	bf00      	nop
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <__assert_func>:
 8002a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a66:	4614      	mov	r4, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <__assert_func+0x2c>)
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68d8      	ldr	r0, [r3, #12]
 8002a72:	b14c      	cbz	r4, 8002a88 <__assert_func+0x24>
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <__assert_func+0x30>)
 8002a76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	462b      	mov	r3, r5
 8002a7e:	4906      	ldr	r1, [pc, #24]	; (8002a98 <__assert_func+0x34>)
 8002a80:	f000 f80e 	bl	8002aa0 <fiprintf>
 8002a84:	f000 fe1c 	bl	80036c0 <abort>
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__assert_func+0x38>)
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	e7f3      	b.n	8002a76 <__assert_func+0x12>
 8002a8e:	bf00      	nop
 8002a90:	2000000c 	.word	0x2000000c
 8002a94:	08003fcc 	.word	0x08003fcc
 8002a98:	08003fd9 	.word	0x08003fd9
 8002a9c:	08004007 	.word	0x08004007

08002aa0 <fiprintf>:
 8002aa0:	b40e      	push	{r1, r2, r3}
 8002aa2:	b503      	push	{r0, r1, lr}
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	ab03      	add	r3, sp, #12
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <fiprintf+0x20>)
 8002aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aae:	6800      	ldr	r0, [r0, #0]
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	f000 fa6f 	bl	8002f94 <_vfiprintf_r>
 8002ab6:	b002      	add	sp, #8
 8002ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002abc:	b003      	add	sp, #12
 8002abe:	4770      	bx	lr
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <malloc>:
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <malloc+0xc>)
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	f000 b86b 	b.w	8002ba4 <_malloc_r>
 8002ace:	bf00      	nop
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <_free_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d040      	beq.n	8002b5e <_free_r+0x8a>
 8002adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae0:	1f0c      	subs	r4, r1, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bfb8      	it	lt
 8002ae6:	18e4      	addlt	r4, r4, r3
 8002ae8:	f001 f844 	bl	8003b74 <__malloc_lock>
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <_free_r+0x8c>)
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	b933      	cbnz	r3, 8002b00 <_free_r+0x2c>
 8002af2:	6063      	str	r3, [r4, #4]
 8002af4:	6014      	str	r4, [r2, #0]
 8002af6:	4628      	mov	r0, r5
 8002af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002afc:	f001 b840 	b.w	8003b80 <__malloc_unlock>
 8002b00:	42a3      	cmp	r3, r4
 8002b02:	d908      	bls.n	8002b16 <_free_r+0x42>
 8002b04:	6820      	ldr	r0, [r4, #0]
 8002b06:	1821      	adds	r1, r4, r0
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	bf01      	itttt	eq
 8002b0c:	6819      	ldreq	r1, [r3, #0]
 8002b0e:	685b      	ldreq	r3, [r3, #4]
 8002b10:	1809      	addeq	r1, r1, r0
 8002b12:	6021      	streq	r1, [r4, #0]
 8002b14:	e7ed      	b.n	8002af2 <_free_r+0x1e>
 8002b16:	461a      	mov	r2, r3
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	b10b      	cbz	r3, 8002b20 <_free_r+0x4c>
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	d9fa      	bls.n	8002b16 <_free_r+0x42>
 8002b20:	6811      	ldr	r1, [r2, #0]
 8002b22:	1850      	adds	r0, r2, r1
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	d10b      	bne.n	8002b40 <_free_r+0x6c>
 8002b28:	6820      	ldr	r0, [r4, #0]
 8002b2a:	4401      	add	r1, r0
 8002b2c:	1850      	adds	r0, r2, r1
 8002b2e:	4283      	cmp	r3, r0
 8002b30:	6011      	str	r1, [r2, #0]
 8002b32:	d1e0      	bne.n	8002af6 <_free_r+0x22>
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4401      	add	r1, r0
 8002b3a:	6011      	str	r1, [r2, #0]
 8002b3c:	6053      	str	r3, [r2, #4]
 8002b3e:	e7da      	b.n	8002af6 <_free_r+0x22>
 8002b40:	d902      	bls.n	8002b48 <_free_r+0x74>
 8002b42:	230c      	movs	r3, #12
 8002b44:	602b      	str	r3, [r5, #0]
 8002b46:	e7d6      	b.n	8002af6 <_free_r+0x22>
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	1821      	adds	r1, r4, r0
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	bf01      	itttt	eq
 8002b50:	6819      	ldreq	r1, [r3, #0]
 8002b52:	685b      	ldreq	r3, [r3, #4]
 8002b54:	1809      	addeq	r1, r1, r0
 8002b56:	6021      	streq	r1, [r4, #0]
 8002b58:	6063      	str	r3, [r4, #4]
 8002b5a:	6054      	str	r4, [r2, #4]
 8002b5c:	e7cb      	b.n	8002af6 <_free_r+0x22>
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	20000158 	.word	0x20000158

08002b64 <sbrk_aligned>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	4e0e      	ldr	r6, [pc, #56]	; (8002ba0 <sbrk_aligned+0x3c>)
 8002b68:	460c      	mov	r4, r1
 8002b6a:	6831      	ldr	r1, [r6, #0]
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	b911      	cbnz	r1, 8002b76 <sbrk_aligned+0x12>
 8002b70:	f000 fcd6 	bl	8003520 <_sbrk_r>
 8002b74:	6030      	str	r0, [r6, #0]
 8002b76:	4621      	mov	r1, r4
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f000 fcd1 	bl	8003520 <_sbrk_r>
 8002b7e:	1c43      	adds	r3, r0, #1
 8002b80:	d00a      	beq.n	8002b98 <sbrk_aligned+0x34>
 8002b82:	1cc4      	adds	r4, r0, #3
 8002b84:	f024 0403 	bic.w	r4, r4, #3
 8002b88:	42a0      	cmp	r0, r4
 8002b8a:	d007      	beq.n	8002b9c <sbrk_aligned+0x38>
 8002b8c:	1a21      	subs	r1, r4, r0
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f000 fcc6 	bl	8003520 <_sbrk_r>
 8002b94:	3001      	adds	r0, #1
 8002b96:	d101      	bne.n	8002b9c <sbrk_aligned+0x38>
 8002b98:	f04f 34ff 	mov.w	r4, #4294967295
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	2000015c 	.word	0x2000015c

08002ba4 <_malloc_r>:
 8002ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba8:	1ccd      	adds	r5, r1, #3
 8002baa:	f025 0503 	bic.w	r5, r5, #3
 8002bae:	3508      	adds	r5, #8
 8002bb0:	2d0c      	cmp	r5, #12
 8002bb2:	bf38      	it	cc
 8002bb4:	250c      	movcc	r5, #12
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	4607      	mov	r7, r0
 8002bba:	db01      	blt.n	8002bc0 <_malloc_r+0x1c>
 8002bbc:	42a9      	cmp	r1, r5
 8002bbe:	d905      	bls.n	8002bcc <_malloc_r+0x28>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bcc:	4e2e      	ldr	r6, [pc, #184]	; (8002c88 <_malloc_r+0xe4>)
 8002bce:	f000 ffd1 	bl	8003b74 <__malloc_lock>
 8002bd2:	6833      	ldr	r3, [r6, #0]
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	bb34      	cbnz	r4, 8002c26 <_malloc_r+0x82>
 8002bd8:	4629      	mov	r1, r5
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f7ff ffc2 	bl	8002b64 <sbrk_aligned>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	4604      	mov	r4, r0
 8002be4:	d14d      	bne.n	8002c82 <_malloc_r+0xde>
 8002be6:	6834      	ldr	r4, [r6, #0]
 8002be8:	4626      	mov	r6, r4
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	d140      	bne.n	8002c70 <_malloc_r+0xcc>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	4631      	mov	r1, r6
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	eb04 0803 	add.w	r8, r4, r3
 8002bf8:	f000 fc92 	bl	8003520 <_sbrk_r>
 8002bfc:	4580      	cmp	r8, r0
 8002bfe:	d13a      	bne.n	8002c76 <_malloc_r+0xd2>
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	3503      	adds	r5, #3
 8002c04:	1a6d      	subs	r5, r5, r1
 8002c06:	f025 0503 	bic.w	r5, r5, #3
 8002c0a:	3508      	adds	r5, #8
 8002c0c:	2d0c      	cmp	r5, #12
 8002c0e:	bf38      	it	cc
 8002c10:	250c      	movcc	r5, #12
 8002c12:	4638      	mov	r0, r7
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7ff ffa5 	bl	8002b64 <sbrk_aligned>
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d02b      	beq.n	8002c76 <_malloc_r+0xd2>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	442b      	add	r3, r5
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	e00e      	b.n	8002c44 <_malloc_r+0xa0>
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	1b52      	subs	r2, r2, r5
 8002c2a:	d41e      	bmi.n	8002c6a <_malloc_r+0xc6>
 8002c2c:	2a0b      	cmp	r2, #11
 8002c2e:	d916      	bls.n	8002c5e <_malloc_r+0xba>
 8002c30:	1961      	adds	r1, r4, r5
 8002c32:	42a3      	cmp	r3, r4
 8002c34:	6025      	str	r5, [r4, #0]
 8002c36:	bf18      	it	ne
 8002c38:	6059      	strne	r1, [r3, #4]
 8002c3a:	6863      	ldr	r3, [r4, #4]
 8002c3c:	bf08      	it	eq
 8002c3e:	6031      	streq	r1, [r6, #0]
 8002c40:	5162      	str	r2, [r4, r5]
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	4638      	mov	r0, r7
 8002c46:	f104 060b 	add.w	r6, r4, #11
 8002c4a:	f000 ff99 	bl	8003b80 <__malloc_unlock>
 8002c4e:	f026 0607 	bic.w	r6, r6, #7
 8002c52:	1d23      	adds	r3, r4, #4
 8002c54:	1af2      	subs	r2, r6, r3
 8002c56:	d0b6      	beq.n	8002bc6 <_malloc_r+0x22>
 8002c58:	1b9b      	subs	r3, r3, r6
 8002c5a:	50a3      	str	r3, [r4, r2]
 8002c5c:	e7b3      	b.n	8002bc6 <_malloc_r+0x22>
 8002c5e:	6862      	ldr	r2, [r4, #4]
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	bf0c      	ite	eq
 8002c64:	6032      	streq	r2, [r6, #0]
 8002c66:	605a      	strne	r2, [r3, #4]
 8002c68:	e7ec      	b.n	8002c44 <_malloc_r+0xa0>
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	6864      	ldr	r4, [r4, #4]
 8002c6e:	e7b2      	b.n	8002bd6 <_malloc_r+0x32>
 8002c70:	4634      	mov	r4, r6
 8002c72:	6876      	ldr	r6, [r6, #4]
 8002c74:	e7b9      	b.n	8002bea <_malloc_r+0x46>
 8002c76:	230c      	movs	r3, #12
 8002c78:	4638      	mov	r0, r7
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	f000 ff80 	bl	8003b80 <__malloc_unlock>
 8002c80:	e7a1      	b.n	8002bc6 <_malloc_r+0x22>
 8002c82:	6025      	str	r5, [r4, #0]
 8002c84:	e7de      	b.n	8002c44 <_malloc_r+0xa0>
 8002c86:	bf00      	nop
 8002c88:	20000158 	.word	0x20000158

08002c8c <__ssputs_r>:
 8002c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c90:	688e      	ldr	r6, [r1, #8]
 8002c92:	4682      	mov	sl, r0
 8002c94:	429e      	cmp	r6, r3
 8002c96:	460c      	mov	r4, r1
 8002c98:	4690      	mov	r8, r2
 8002c9a:	461f      	mov	r7, r3
 8002c9c:	d838      	bhi.n	8002d10 <__ssputs_r+0x84>
 8002c9e:	898a      	ldrh	r2, [r1, #12]
 8002ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ca4:	d032      	beq.n	8002d0c <__ssputs_r+0x80>
 8002ca6:	6825      	ldr	r5, [r4, #0]
 8002ca8:	6909      	ldr	r1, [r1, #16]
 8002caa:	3301      	adds	r3, #1
 8002cac:	eba5 0901 	sub.w	r9, r5, r1
 8002cb0:	6965      	ldr	r5, [r4, #20]
 8002cb2:	444b      	add	r3, r9
 8002cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cbc:	106d      	asrs	r5, r5, #1
 8002cbe:	429d      	cmp	r5, r3
 8002cc0:	bf38      	it	cc
 8002cc2:	461d      	movcc	r5, r3
 8002cc4:	0553      	lsls	r3, r2, #21
 8002cc6:	d531      	bpl.n	8002d2c <__ssputs_r+0xa0>
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7ff ff6b 	bl	8002ba4 <_malloc_r>
 8002cce:	4606      	mov	r6, r0
 8002cd0:	b950      	cbnz	r0, 8002ce8 <__ssputs_r+0x5c>
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f8ca 3000 	str.w	r3, [sl]
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce2:	81a3      	strh	r3, [r4, #12]
 8002ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce8:	464a      	mov	r2, r9
 8002cea:	6921      	ldr	r1, [r4, #16]
 8002cec:	f000 ff1a 	bl	8003b24 <memcpy>
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	81a3      	strh	r3, [r4, #12]
 8002cfc:	6126      	str	r6, [r4, #16]
 8002cfe:	444e      	add	r6, r9
 8002d00:	6026      	str	r6, [r4, #0]
 8002d02:	463e      	mov	r6, r7
 8002d04:	6165      	str	r5, [r4, #20]
 8002d06:	eba5 0509 	sub.w	r5, r5, r9
 8002d0a:	60a5      	str	r5, [r4, #8]
 8002d0c:	42be      	cmp	r6, r7
 8002d0e:	d900      	bls.n	8002d12 <__ssputs_r+0x86>
 8002d10:	463e      	mov	r6, r7
 8002d12:	4632      	mov	r2, r6
 8002d14:	4641      	mov	r1, r8
 8002d16:	6820      	ldr	r0, [r4, #0]
 8002d18:	f000 ff12 	bl	8003b40 <memmove>
 8002d1c:	68a3      	ldr	r3, [r4, #8]
 8002d1e:	2000      	movs	r0, #0
 8002d20:	1b9b      	subs	r3, r3, r6
 8002d22:	60a3      	str	r3, [r4, #8]
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	4433      	add	r3, r6
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	e7db      	b.n	8002ce4 <__ssputs_r+0x58>
 8002d2c:	462a      	mov	r2, r5
 8002d2e:	f000 ff2d 	bl	8003b8c <_realloc_r>
 8002d32:	4606      	mov	r6, r0
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d1e1      	bne.n	8002cfc <__ssputs_r+0x70>
 8002d38:	4650      	mov	r0, sl
 8002d3a:	6921      	ldr	r1, [r4, #16]
 8002d3c:	f7ff feca 	bl	8002ad4 <_free_r>
 8002d40:	e7c7      	b.n	8002cd2 <__ssputs_r+0x46>
	...

08002d44 <_svfiprintf_r>:
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	4698      	mov	r8, r3
 8002d4a:	898b      	ldrh	r3, [r1, #12]
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	460d      	mov	r5, r1
 8002d52:	4614      	mov	r4, r2
 8002d54:	b09d      	sub	sp, #116	; 0x74
 8002d56:	d50e      	bpl.n	8002d76 <_svfiprintf_r+0x32>
 8002d58:	690b      	ldr	r3, [r1, #16]
 8002d5a:	b963      	cbnz	r3, 8002d76 <_svfiprintf_r+0x32>
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	f7ff ff21 	bl	8002ba4 <_malloc_r>
 8002d62:	6028      	str	r0, [r5, #0]
 8002d64:	6128      	str	r0, [r5, #16]
 8002d66:	b920      	cbnz	r0, 8002d72 <_svfiprintf_r+0x2e>
 8002d68:	230c      	movs	r3, #12
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	e0d1      	b.n	8002f16 <_svfiprintf_r+0x1d2>
 8002d72:	2340      	movs	r3, #64	; 0x40
 8002d74:	616b      	str	r3, [r5, #20]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d80:	2330      	movs	r3, #48	; 0x30
 8002d82:	f04f 0901 	mov.w	r9, #1
 8002d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f30 <_svfiprintf_r+0x1ec>
 8002d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d92:	4623      	mov	r3, r4
 8002d94:	469a      	mov	sl, r3
 8002d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d9a:	b10a      	cbz	r2, 8002da0 <_svfiprintf_r+0x5c>
 8002d9c:	2a25      	cmp	r2, #37	; 0x25
 8002d9e:	d1f9      	bne.n	8002d94 <_svfiprintf_r+0x50>
 8002da0:	ebba 0b04 	subs.w	fp, sl, r4
 8002da4:	d00b      	beq.n	8002dbe <_svfiprintf_r+0x7a>
 8002da6:	465b      	mov	r3, fp
 8002da8:	4622      	mov	r2, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	4638      	mov	r0, r7
 8002dae:	f7ff ff6d 	bl	8002c8c <__ssputs_r>
 8002db2:	3001      	adds	r0, #1
 8002db4:	f000 80aa 	beq.w	8002f0c <_svfiprintf_r+0x1c8>
 8002db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dba:	445a      	add	r2, fp
 8002dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a2 	beq.w	8002f0c <_svfiprintf_r+0x1c8>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f04f 32ff 	mov.w	r2, #4294967295
 8002dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dd2:	f10a 0a01 	add.w	sl, sl, #1
 8002dd6:	9304      	str	r3, [sp, #16]
 8002dd8:	9307      	str	r3, [sp, #28]
 8002dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dde:	931a      	str	r3, [sp, #104]	; 0x68
 8002de0:	4654      	mov	r4, sl
 8002de2:	2205      	movs	r2, #5
 8002de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de8:	4851      	ldr	r0, [pc, #324]	; (8002f30 <_svfiprintf_r+0x1ec>)
 8002dea:	f000 fe8d 	bl	8003b08 <memchr>
 8002dee:	9a04      	ldr	r2, [sp, #16]
 8002df0:	b9d8      	cbnz	r0, 8002e2a <_svfiprintf_r+0xe6>
 8002df2:	06d0      	lsls	r0, r2, #27
 8002df4:	bf44      	itt	mi
 8002df6:	2320      	movmi	r3, #32
 8002df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dfc:	0711      	lsls	r1, r2, #28
 8002dfe:	bf44      	itt	mi
 8002e00:	232b      	movmi	r3, #43	; 0x2b
 8002e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e06:	f89a 3000 	ldrb.w	r3, [sl]
 8002e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0c:	d015      	beq.n	8002e3a <_svfiprintf_r+0xf6>
 8002e0e:	4654      	mov	r4, sl
 8002e10:	2000      	movs	r0, #0
 8002e12:	f04f 0c0a 	mov.w	ip, #10
 8002e16:	9a07      	ldr	r2, [sp, #28]
 8002e18:	4621      	mov	r1, r4
 8002e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e1e:	3b30      	subs	r3, #48	; 0x30
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d94e      	bls.n	8002ec2 <_svfiprintf_r+0x17e>
 8002e24:	b1b0      	cbz	r0, 8002e54 <_svfiprintf_r+0x110>
 8002e26:	9207      	str	r2, [sp, #28]
 8002e28:	e014      	b.n	8002e54 <_svfiprintf_r+0x110>
 8002e2a:	eba0 0308 	sub.w	r3, r0, r8
 8002e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	46a2      	mov	sl, r4
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	e7d2      	b.n	8002de0 <_svfiprintf_r+0x9c>
 8002e3a:	9b03      	ldr	r3, [sp, #12]
 8002e3c:	1d19      	adds	r1, r3, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	9103      	str	r1, [sp, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bfbb      	ittet	lt
 8002e46:	425b      	neglt	r3, r3
 8002e48:	f042 0202 	orrlt.w	r2, r2, #2
 8002e4c:	9307      	strge	r3, [sp, #28]
 8002e4e:	9307      	strlt	r3, [sp, #28]
 8002e50:	bfb8      	it	lt
 8002e52:	9204      	strlt	r2, [sp, #16]
 8002e54:	7823      	ldrb	r3, [r4, #0]
 8002e56:	2b2e      	cmp	r3, #46	; 0x2e
 8002e58:	d10c      	bne.n	8002e74 <_svfiprintf_r+0x130>
 8002e5a:	7863      	ldrb	r3, [r4, #1]
 8002e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5e:	d135      	bne.n	8002ecc <_svfiprintf_r+0x188>
 8002e60:	9b03      	ldr	r3, [sp, #12]
 8002e62:	3402      	adds	r4, #2
 8002e64:	1d1a      	adds	r2, r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bfb8      	it	lt
 8002e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e72:	9305      	str	r3, [sp, #20]
 8002e74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f34 <_svfiprintf_r+0x1f0>
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4650      	mov	r0, sl
 8002e7c:	7821      	ldrb	r1, [r4, #0]
 8002e7e:	f000 fe43 	bl	8003b08 <memchr>
 8002e82:	b140      	cbz	r0, 8002e96 <_svfiprintf_r+0x152>
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	eba0 000a 	sub.w	r0, r0, sl
 8002e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e8e:	9b04      	ldr	r3, [sp, #16]
 8002e90:	3401      	adds	r4, #1
 8002e92:	4303      	orrs	r3, r0
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	4826      	ldr	r0, [pc, #152]	; (8002f38 <_svfiprintf_r+0x1f4>)
 8002e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ea2:	f000 fe31 	bl	8003b08 <memchr>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d038      	beq.n	8002f1c <_svfiprintf_r+0x1d8>
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <_svfiprintf_r+0x1f8>)
 8002eac:	bb1b      	cbnz	r3, 8002ef6 <_svfiprintf_r+0x1b2>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	3307      	adds	r3, #7
 8002eb2:	f023 0307 	bic.w	r3, r3, #7
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ebc:	4433      	add	r3, r6
 8002ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec0:	e767      	b.n	8002d92 <_svfiprintf_r+0x4e>
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eca:	e7a5      	b.n	8002e18 <_svfiprintf_r+0xd4>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f04f 0c0a 	mov.w	ip, #10
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	3401      	adds	r4, #1
 8002ed6:	9305      	str	r3, [sp, #20]
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ede:	3a30      	subs	r2, #48	; 0x30
 8002ee0:	2a09      	cmp	r2, #9
 8002ee2:	d903      	bls.n	8002eec <_svfiprintf_r+0x1a8>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0c5      	beq.n	8002e74 <_svfiprintf_r+0x130>
 8002ee8:	9105      	str	r1, [sp, #20]
 8002eea:	e7c3      	b.n	8002e74 <_svfiprintf_r+0x130>
 8002eec:	4604      	mov	r4, r0
 8002eee:	2301      	movs	r3, #1
 8002ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ef4:	e7f0      	b.n	8002ed8 <_svfiprintf_r+0x194>
 8002ef6:	ab03      	add	r3, sp, #12
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	462a      	mov	r2, r5
 8002efc:	4638      	mov	r0, r7
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <_svfiprintf_r+0x1fc>)
 8002f00:	a904      	add	r1, sp, #16
 8002f02:	f3af 8000 	nop.w
 8002f06:	1c42      	adds	r2, r0, #1
 8002f08:	4606      	mov	r6, r0
 8002f0a:	d1d6      	bne.n	8002eba <_svfiprintf_r+0x176>
 8002f0c:	89ab      	ldrh	r3, [r5, #12]
 8002f0e:	065b      	lsls	r3, r3, #25
 8002f10:	f53f af2c 	bmi.w	8002d6c <_svfiprintf_r+0x28>
 8002f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f16:	b01d      	add	sp, #116	; 0x74
 8002f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1c:	ab03      	add	r3, sp, #12
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	462a      	mov	r2, r5
 8002f22:	4638      	mov	r0, r7
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <_svfiprintf_r+0x1fc>)
 8002f26:	a904      	add	r1, sp, #16
 8002f28:	f000 f9d4 	bl	80032d4 <_printf_i>
 8002f2c:	e7eb      	b.n	8002f06 <_svfiprintf_r+0x1c2>
 8002f2e:	bf00      	nop
 8002f30:	08004109 	.word	0x08004109
 8002f34:	0800410f 	.word	0x0800410f
 8002f38:	08004113 	.word	0x08004113
 8002f3c:	00000000 	.word	0x00000000
 8002f40:	08002c8d 	.word	0x08002c8d

08002f44 <__sfputc_r>:
 8002f44:	6893      	ldr	r3, [r2, #8]
 8002f46:	b410      	push	{r4}
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	da07      	bge.n	8002f60 <__sfputc_r+0x1c>
 8002f50:	6994      	ldr	r4, [r2, #24]
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	db01      	blt.n	8002f5a <__sfputc_r+0x16>
 8002f56:	290a      	cmp	r1, #10
 8002f58:	d102      	bne.n	8002f60 <__sfputc_r+0x1c>
 8002f5a:	bc10      	pop	{r4}
 8002f5c:	f000 baf0 	b.w	8003540 <__swbuf_r>
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	1c58      	adds	r0, r3, #1
 8002f64:	6010      	str	r0, [r2, #0]
 8002f66:	7019      	strb	r1, [r3, #0]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	bc10      	pop	{r4}
 8002f6c:	4770      	bx	lr

08002f6e <__sfputs_r>:
 8002f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f70:	4606      	mov	r6, r0
 8002f72:	460f      	mov	r7, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	18d5      	adds	r5, r2, r3
 8002f78:	42ac      	cmp	r4, r5
 8002f7a:	d101      	bne.n	8002f80 <__sfputs_r+0x12>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	e007      	b.n	8002f90 <__sfputs_r+0x22>
 8002f80:	463a      	mov	r2, r7
 8002f82:	4630      	mov	r0, r6
 8002f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f88:	f7ff ffdc 	bl	8002f44 <__sfputc_r>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d1f3      	bne.n	8002f78 <__sfputs_r+0xa>
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f94 <_vfiprintf_r>:
 8002f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f98:	460d      	mov	r5, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	b09d      	sub	sp, #116	; 0x74
 8002fa2:	b118      	cbz	r0, 8002fac <_vfiprintf_r+0x18>
 8002fa4:	6983      	ldr	r3, [r0, #24]
 8002fa6:	b90b      	cbnz	r3, 8002fac <_vfiprintf_r+0x18>
 8002fa8:	f000 fca8 	bl	80038fc <__sinit>
 8002fac:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <_vfiprintf_r+0x240>)
 8002fae:	429d      	cmp	r5, r3
 8002fb0:	d11b      	bne.n	8002fea <_vfiprintf_r+0x56>
 8002fb2:	6875      	ldr	r5, [r6, #4]
 8002fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb6:	07d9      	lsls	r1, r3, #31
 8002fb8:	d405      	bmi.n	8002fc6 <_vfiprintf_r+0x32>
 8002fba:	89ab      	ldrh	r3, [r5, #12]
 8002fbc:	059a      	lsls	r2, r3, #22
 8002fbe:	d402      	bmi.n	8002fc6 <_vfiprintf_r+0x32>
 8002fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fc2:	f000 fd39 	bl	8003a38 <__retarget_lock_acquire_recursive>
 8002fc6:	89ab      	ldrh	r3, [r5, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	d501      	bpl.n	8002fd0 <_vfiprintf_r+0x3c>
 8002fcc:	692b      	ldr	r3, [r5, #16]
 8002fce:	b9eb      	cbnz	r3, 800300c <_vfiprintf_r+0x78>
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 fb06 	bl	80035e4 <__swsetup_r>
 8002fd8:	b1c0      	cbz	r0, 800300c <_vfiprintf_r+0x78>
 8002fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fdc:	07dc      	lsls	r4, r3, #31
 8002fde:	d50e      	bpl.n	8002ffe <_vfiprintf_r+0x6a>
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	b01d      	add	sp, #116	; 0x74
 8002fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fea:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <_vfiprintf_r+0x244>)
 8002fec:	429d      	cmp	r5, r3
 8002fee:	d101      	bne.n	8002ff4 <_vfiprintf_r+0x60>
 8002ff0:	68b5      	ldr	r5, [r6, #8]
 8002ff2:	e7df      	b.n	8002fb4 <_vfiprintf_r+0x20>
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <_vfiprintf_r+0x248>)
 8002ff6:	429d      	cmp	r5, r3
 8002ff8:	bf08      	it	eq
 8002ffa:	68f5      	ldreq	r5, [r6, #12]
 8002ffc:	e7da      	b.n	8002fb4 <_vfiprintf_r+0x20>
 8002ffe:	89ab      	ldrh	r3, [r5, #12]
 8003000:	0598      	lsls	r0, r3, #22
 8003002:	d4ed      	bmi.n	8002fe0 <_vfiprintf_r+0x4c>
 8003004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003006:	f000 fd18 	bl	8003a3a <__retarget_lock_release_recursive>
 800300a:	e7e9      	b.n	8002fe0 <_vfiprintf_r+0x4c>
 800300c:	2300      	movs	r3, #0
 800300e:	9309      	str	r3, [sp, #36]	; 0x24
 8003010:	2320      	movs	r3, #32
 8003012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003016:	2330      	movs	r3, #48	; 0x30
 8003018:	f04f 0901 	mov.w	r9, #1
 800301c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003020:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80031e0 <_vfiprintf_r+0x24c>
 8003024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003028:	4623      	mov	r3, r4
 800302a:	469a      	mov	sl, r3
 800302c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003030:	b10a      	cbz	r2, 8003036 <_vfiprintf_r+0xa2>
 8003032:	2a25      	cmp	r2, #37	; 0x25
 8003034:	d1f9      	bne.n	800302a <_vfiprintf_r+0x96>
 8003036:	ebba 0b04 	subs.w	fp, sl, r4
 800303a:	d00b      	beq.n	8003054 <_vfiprintf_r+0xc0>
 800303c:	465b      	mov	r3, fp
 800303e:	4622      	mov	r2, r4
 8003040:	4629      	mov	r1, r5
 8003042:	4630      	mov	r0, r6
 8003044:	f7ff ff93 	bl	8002f6e <__sfputs_r>
 8003048:	3001      	adds	r0, #1
 800304a:	f000 80aa 	beq.w	80031a2 <_vfiprintf_r+0x20e>
 800304e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003050:	445a      	add	r2, fp
 8003052:	9209      	str	r2, [sp, #36]	; 0x24
 8003054:	f89a 3000 	ldrb.w	r3, [sl]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a2 	beq.w	80031a2 <_vfiprintf_r+0x20e>
 800305e:	2300      	movs	r3, #0
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003068:	f10a 0a01 	add.w	sl, sl, #1
 800306c:	9304      	str	r3, [sp, #16]
 800306e:	9307      	str	r3, [sp, #28]
 8003070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003074:	931a      	str	r3, [sp, #104]	; 0x68
 8003076:	4654      	mov	r4, sl
 8003078:	2205      	movs	r2, #5
 800307a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800307e:	4858      	ldr	r0, [pc, #352]	; (80031e0 <_vfiprintf_r+0x24c>)
 8003080:	f000 fd42 	bl	8003b08 <memchr>
 8003084:	9a04      	ldr	r2, [sp, #16]
 8003086:	b9d8      	cbnz	r0, 80030c0 <_vfiprintf_r+0x12c>
 8003088:	06d1      	lsls	r1, r2, #27
 800308a:	bf44      	itt	mi
 800308c:	2320      	movmi	r3, #32
 800308e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003092:	0713      	lsls	r3, r2, #28
 8003094:	bf44      	itt	mi
 8003096:	232b      	movmi	r3, #43	; 0x2b
 8003098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800309c:	f89a 3000 	ldrb.w	r3, [sl]
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d015      	beq.n	80030d0 <_vfiprintf_r+0x13c>
 80030a4:	4654      	mov	r4, sl
 80030a6:	2000      	movs	r0, #0
 80030a8:	f04f 0c0a 	mov.w	ip, #10
 80030ac:	9a07      	ldr	r2, [sp, #28]
 80030ae:	4621      	mov	r1, r4
 80030b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030b4:	3b30      	subs	r3, #48	; 0x30
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d94e      	bls.n	8003158 <_vfiprintf_r+0x1c4>
 80030ba:	b1b0      	cbz	r0, 80030ea <_vfiprintf_r+0x156>
 80030bc:	9207      	str	r2, [sp, #28]
 80030be:	e014      	b.n	80030ea <_vfiprintf_r+0x156>
 80030c0:	eba0 0308 	sub.w	r3, r0, r8
 80030c4:	fa09 f303 	lsl.w	r3, r9, r3
 80030c8:	4313      	orrs	r3, r2
 80030ca:	46a2      	mov	sl, r4
 80030cc:	9304      	str	r3, [sp, #16]
 80030ce:	e7d2      	b.n	8003076 <_vfiprintf_r+0xe2>
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	1d19      	adds	r1, r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	9103      	str	r1, [sp, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bfbb      	ittet	lt
 80030dc:	425b      	neglt	r3, r3
 80030de:	f042 0202 	orrlt.w	r2, r2, #2
 80030e2:	9307      	strge	r3, [sp, #28]
 80030e4:	9307      	strlt	r3, [sp, #28]
 80030e6:	bfb8      	it	lt
 80030e8:	9204      	strlt	r2, [sp, #16]
 80030ea:	7823      	ldrb	r3, [r4, #0]
 80030ec:	2b2e      	cmp	r3, #46	; 0x2e
 80030ee:	d10c      	bne.n	800310a <_vfiprintf_r+0x176>
 80030f0:	7863      	ldrb	r3, [r4, #1]
 80030f2:	2b2a      	cmp	r3, #42	; 0x2a
 80030f4:	d135      	bne.n	8003162 <_vfiprintf_r+0x1ce>
 80030f6:	9b03      	ldr	r3, [sp, #12]
 80030f8:	3402      	adds	r4, #2
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	bfb8      	it	lt
 8003104:	f04f 33ff 	movlt.w	r3, #4294967295
 8003108:	9305      	str	r3, [sp, #20]
 800310a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80031e4 <_vfiprintf_r+0x250>
 800310e:	2203      	movs	r2, #3
 8003110:	4650      	mov	r0, sl
 8003112:	7821      	ldrb	r1, [r4, #0]
 8003114:	f000 fcf8 	bl	8003b08 <memchr>
 8003118:	b140      	cbz	r0, 800312c <_vfiprintf_r+0x198>
 800311a:	2340      	movs	r3, #64	; 0x40
 800311c:	eba0 000a 	sub.w	r0, r0, sl
 8003120:	fa03 f000 	lsl.w	r0, r3, r0
 8003124:	9b04      	ldr	r3, [sp, #16]
 8003126:	3401      	adds	r4, #1
 8003128:	4303      	orrs	r3, r0
 800312a:	9304      	str	r3, [sp, #16]
 800312c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003130:	2206      	movs	r2, #6
 8003132:	482d      	ldr	r0, [pc, #180]	; (80031e8 <_vfiprintf_r+0x254>)
 8003134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003138:	f000 fce6 	bl	8003b08 <memchr>
 800313c:	2800      	cmp	r0, #0
 800313e:	d03f      	beq.n	80031c0 <_vfiprintf_r+0x22c>
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <_vfiprintf_r+0x258>)
 8003142:	bb1b      	cbnz	r3, 800318c <_vfiprintf_r+0x1f8>
 8003144:	9b03      	ldr	r3, [sp, #12]
 8003146:	3307      	adds	r3, #7
 8003148:	f023 0307 	bic.w	r3, r3, #7
 800314c:	3308      	adds	r3, #8
 800314e:	9303      	str	r3, [sp, #12]
 8003150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003152:	443b      	add	r3, r7
 8003154:	9309      	str	r3, [sp, #36]	; 0x24
 8003156:	e767      	b.n	8003028 <_vfiprintf_r+0x94>
 8003158:	460c      	mov	r4, r1
 800315a:	2001      	movs	r0, #1
 800315c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003160:	e7a5      	b.n	80030ae <_vfiprintf_r+0x11a>
 8003162:	2300      	movs	r3, #0
 8003164:	f04f 0c0a 	mov.w	ip, #10
 8003168:	4619      	mov	r1, r3
 800316a:	3401      	adds	r4, #1
 800316c:	9305      	str	r3, [sp, #20]
 800316e:	4620      	mov	r0, r4
 8003170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003174:	3a30      	subs	r2, #48	; 0x30
 8003176:	2a09      	cmp	r2, #9
 8003178:	d903      	bls.n	8003182 <_vfiprintf_r+0x1ee>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0c5      	beq.n	800310a <_vfiprintf_r+0x176>
 800317e:	9105      	str	r1, [sp, #20]
 8003180:	e7c3      	b.n	800310a <_vfiprintf_r+0x176>
 8003182:	4604      	mov	r4, r0
 8003184:	2301      	movs	r3, #1
 8003186:	fb0c 2101 	mla	r1, ip, r1, r2
 800318a:	e7f0      	b.n	800316e <_vfiprintf_r+0x1da>
 800318c:	ab03      	add	r3, sp, #12
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	462a      	mov	r2, r5
 8003192:	4630      	mov	r0, r6
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <_vfiprintf_r+0x25c>)
 8003196:	a904      	add	r1, sp, #16
 8003198:	f3af 8000 	nop.w
 800319c:	4607      	mov	r7, r0
 800319e:	1c78      	adds	r0, r7, #1
 80031a0:	d1d6      	bne.n	8003150 <_vfiprintf_r+0x1bc>
 80031a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a4:	07d9      	lsls	r1, r3, #31
 80031a6:	d405      	bmi.n	80031b4 <_vfiprintf_r+0x220>
 80031a8:	89ab      	ldrh	r3, [r5, #12]
 80031aa:	059a      	lsls	r2, r3, #22
 80031ac:	d402      	bmi.n	80031b4 <_vfiprintf_r+0x220>
 80031ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031b0:	f000 fc43 	bl	8003a3a <__retarget_lock_release_recursive>
 80031b4:	89ab      	ldrh	r3, [r5, #12]
 80031b6:	065b      	lsls	r3, r3, #25
 80031b8:	f53f af12 	bmi.w	8002fe0 <_vfiprintf_r+0x4c>
 80031bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031be:	e711      	b.n	8002fe4 <_vfiprintf_r+0x50>
 80031c0:	ab03      	add	r3, sp, #12
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	462a      	mov	r2, r5
 80031c6:	4630      	mov	r0, r6
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <_vfiprintf_r+0x25c>)
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	f000 f882 	bl	80032d4 <_printf_i>
 80031d0:	e7e4      	b.n	800319c <_vfiprintf_r+0x208>
 80031d2:	bf00      	nop
 80031d4:	0800415c 	.word	0x0800415c
 80031d8:	0800417c 	.word	0x0800417c
 80031dc:	0800413c 	.word	0x0800413c
 80031e0:	08004109 	.word	0x08004109
 80031e4:	0800410f 	.word	0x0800410f
 80031e8:	08004113 	.word	0x08004113
 80031ec:	00000000 	.word	0x00000000
 80031f0:	08002f6f 	.word	0x08002f6f

080031f4 <_printf_common>:
 80031f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f8:	4616      	mov	r6, r2
 80031fa:	4699      	mov	r9, r3
 80031fc:	688a      	ldr	r2, [r1, #8]
 80031fe:	690b      	ldr	r3, [r1, #16]
 8003200:	4607      	mov	r7, r0
 8003202:	4293      	cmp	r3, r2
 8003204:	bfb8      	it	lt
 8003206:	4613      	movlt	r3, r2
 8003208:	6033      	str	r3, [r6, #0]
 800320a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800320e:	460c      	mov	r4, r1
 8003210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003214:	b10a      	cbz	r2, 800321a <_printf_common+0x26>
 8003216:	3301      	adds	r3, #1
 8003218:	6033      	str	r3, [r6, #0]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	0699      	lsls	r1, r3, #26
 800321e:	bf42      	ittt	mi
 8003220:	6833      	ldrmi	r3, [r6, #0]
 8003222:	3302      	addmi	r3, #2
 8003224:	6033      	strmi	r3, [r6, #0]
 8003226:	6825      	ldr	r5, [r4, #0]
 8003228:	f015 0506 	ands.w	r5, r5, #6
 800322c:	d106      	bne.n	800323c <_printf_common+0x48>
 800322e:	f104 0a19 	add.w	sl, r4, #25
 8003232:	68e3      	ldr	r3, [r4, #12]
 8003234:	6832      	ldr	r2, [r6, #0]
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	42ab      	cmp	r3, r5
 800323a:	dc28      	bgt.n	800328e <_printf_common+0x9a>
 800323c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003240:	1e13      	subs	r3, r2, #0
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	bf18      	it	ne
 8003246:	2301      	movne	r3, #1
 8003248:	0692      	lsls	r2, r2, #26
 800324a:	d42d      	bmi.n	80032a8 <_printf_common+0xb4>
 800324c:	4649      	mov	r1, r9
 800324e:	4638      	mov	r0, r7
 8003250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003254:	47c0      	blx	r8
 8003256:	3001      	adds	r0, #1
 8003258:	d020      	beq.n	800329c <_printf_common+0xa8>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	68e5      	ldr	r5, [r4, #12]
 800325e:	f003 0306 	and.w	r3, r3, #6
 8003262:	2b04      	cmp	r3, #4
 8003264:	bf18      	it	ne
 8003266:	2500      	movne	r5, #0
 8003268:	6832      	ldr	r2, [r6, #0]
 800326a:	f04f 0600 	mov.w	r6, #0
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	bf08      	it	eq
 8003272:	1aad      	subeq	r5, r5, r2
 8003274:	6922      	ldr	r2, [r4, #16]
 8003276:	bf08      	it	eq
 8003278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800327c:	4293      	cmp	r3, r2
 800327e:	bfc4      	itt	gt
 8003280:	1a9b      	subgt	r3, r3, r2
 8003282:	18ed      	addgt	r5, r5, r3
 8003284:	341a      	adds	r4, #26
 8003286:	42b5      	cmp	r5, r6
 8003288:	d11a      	bne.n	80032c0 <_printf_common+0xcc>
 800328a:	2000      	movs	r0, #0
 800328c:	e008      	b.n	80032a0 <_printf_common+0xac>
 800328e:	2301      	movs	r3, #1
 8003290:	4652      	mov	r2, sl
 8003292:	4649      	mov	r1, r9
 8003294:	4638      	mov	r0, r7
 8003296:	47c0      	blx	r8
 8003298:	3001      	adds	r0, #1
 800329a:	d103      	bne.n	80032a4 <_printf_common+0xb0>
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a4:	3501      	adds	r5, #1
 80032a6:	e7c4      	b.n	8003232 <_printf_common+0x3e>
 80032a8:	2030      	movs	r0, #48	; 0x30
 80032aa:	18e1      	adds	r1, r4, r3
 80032ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032b6:	4422      	add	r2, r4
 80032b8:	3302      	adds	r3, #2
 80032ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032be:	e7c5      	b.n	800324c <_printf_common+0x58>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4622      	mov	r2, r4
 80032c4:	4649      	mov	r1, r9
 80032c6:	4638      	mov	r0, r7
 80032c8:	47c0      	blx	r8
 80032ca:	3001      	adds	r0, #1
 80032cc:	d0e6      	beq.n	800329c <_printf_common+0xa8>
 80032ce:	3601      	adds	r6, #1
 80032d0:	e7d9      	b.n	8003286 <_printf_common+0x92>
	...

080032d4 <_printf_i>:
 80032d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032d8:	7e0f      	ldrb	r7, [r1, #24]
 80032da:	4691      	mov	r9, r2
 80032dc:	2f78      	cmp	r7, #120	; 0x78
 80032de:	4680      	mov	r8, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	469a      	mov	sl, r3
 80032e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ea:	d807      	bhi.n	80032fc <_printf_i+0x28>
 80032ec:	2f62      	cmp	r7, #98	; 0x62
 80032ee:	d80a      	bhi.n	8003306 <_printf_i+0x32>
 80032f0:	2f00      	cmp	r7, #0
 80032f2:	f000 80d9 	beq.w	80034a8 <_printf_i+0x1d4>
 80032f6:	2f58      	cmp	r7, #88	; 0x58
 80032f8:	f000 80a4 	beq.w	8003444 <_printf_i+0x170>
 80032fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003304:	e03a      	b.n	800337c <_printf_i+0xa8>
 8003306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800330a:	2b15      	cmp	r3, #21
 800330c:	d8f6      	bhi.n	80032fc <_printf_i+0x28>
 800330e:	a101      	add	r1, pc, #4	; (adr r1, 8003314 <_printf_i+0x40>)
 8003310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003314:	0800336d 	.word	0x0800336d
 8003318:	08003381 	.word	0x08003381
 800331c:	080032fd 	.word	0x080032fd
 8003320:	080032fd 	.word	0x080032fd
 8003324:	080032fd 	.word	0x080032fd
 8003328:	080032fd 	.word	0x080032fd
 800332c:	08003381 	.word	0x08003381
 8003330:	080032fd 	.word	0x080032fd
 8003334:	080032fd 	.word	0x080032fd
 8003338:	080032fd 	.word	0x080032fd
 800333c:	080032fd 	.word	0x080032fd
 8003340:	0800348f 	.word	0x0800348f
 8003344:	080033b1 	.word	0x080033b1
 8003348:	08003471 	.word	0x08003471
 800334c:	080032fd 	.word	0x080032fd
 8003350:	080032fd 	.word	0x080032fd
 8003354:	080034b1 	.word	0x080034b1
 8003358:	080032fd 	.word	0x080032fd
 800335c:	080033b1 	.word	0x080033b1
 8003360:	080032fd 	.word	0x080032fd
 8003364:	080032fd 	.word	0x080032fd
 8003368:	08003479 	.word	0x08003479
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	1d1a      	adds	r2, r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	602a      	str	r2, [r5, #0]
 8003374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800337c:	2301      	movs	r3, #1
 800337e:	e0a4      	b.n	80034ca <_printf_i+0x1f6>
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	6829      	ldr	r1, [r5, #0]
 8003384:	0606      	lsls	r6, r0, #24
 8003386:	f101 0304 	add.w	r3, r1, #4
 800338a:	d50a      	bpl.n	80033a2 <_printf_i+0xce>
 800338c:	680e      	ldr	r6, [r1, #0]
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	2e00      	cmp	r6, #0
 8003392:	da03      	bge.n	800339c <_printf_i+0xc8>
 8003394:	232d      	movs	r3, #45	; 0x2d
 8003396:	4276      	negs	r6, r6
 8003398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800339c:	230a      	movs	r3, #10
 800339e:	485e      	ldr	r0, [pc, #376]	; (8003518 <_printf_i+0x244>)
 80033a0:	e019      	b.n	80033d6 <_printf_i+0x102>
 80033a2:	680e      	ldr	r6, [r1, #0]
 80033a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	bf18      	it	ne
 80033ac:	b236      	sxthne	r6, r6
 80033ae:	e7ef      	b.n	8003390 <_printf_i+0xbc>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	1d19      	adds	r1, r3, #4
 80033b6:	6029      	str	r1, [r5, #0]
 80033b8:	0601      	lsls	r1, r0, #24
 80033ba:	d501      	bpl.n	80033c0 <_printf_i+0xec>
 80033bc:	681e      	ldr	r6, [r3, #0]
 80033be:	e002      	b.n	80033c6 <_printf_i+0xf2>
 80033c0:	0646      	lsls	r6, r0, #25
 80033c2:	d5fb      	bpl.n	80033bc <_printf_i+0xe8>
 80033c4:	881e      	ldrh	r6, [r3, #0]
 80033c6:	2f6f      	cmp	r7, #111	; 0x6f
 80033c8:	bf0c      	ite	eq
 80033ca:	2308      	moveq	r3, #8
 80033cc:	230a      	movne	r3, #10
 80033ce:	4852      	ldr	r0, [pc, #328]	; (8003518 <_printf_i+0x244>)
 80033d0:	2100      	movs	r1, #0
 80033d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033d6:	6865      	ldr	r5, [r4, #4]
 80033d8:	2d00      	cmp	r5, #0
 80033da:	bfa8      	it	ge
 80033dc:	6821      	ldrge	r1, [r4, #0]
 80033de:	60a5      	str	r5, [r4, #8]
 80033e0:	bfa4      	itt	ge
 80033e2:	f021 0104 	bicge.w	r1, r1, #4
 80033e6:	6021      	strge	r1, [r4, #0]
 80033e8:	b90e      	cbnz	r6, 80033ee <_printf_i+0x11a>
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	d04d      	beq.n	800348a <_printf_i+0x1b6>
 80033ee:	4615      	mov	r5, r2
 80033f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80033f4:	fb03 6711 	mls	r7, r3, r1, r6
 80033f8:	5dc7      	ldrb	r7, [r0, r7]
 80033fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033fe:	4637      	mov	r7, r6
 8003400:	42bb      	cmp	r3, r7
 8003402:	460e      	mov	r6, r1
 8003404:	d9f4      	bls.n	80033f0 <_printf_i+0x11c>
 8003406:	2b08      	cmp	r3, #8
 8003408:	d10b      	bne.n	8003422 <_printf_i+0x14e>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	07de      	lsls	r6, r3, #31
 800340e:	d508      	bpl.n	8003422 <_printf_i+0x14e>
 8003410:	6923      	ldr	r3, [r4, #16]
 8003412:	6861      	ldr	r1, [r4, #4]
 8003414:	4299      	cmp	r1, r3
 8003416:	bfde      	ittt	le
 8003418:	2330      	movle	r3, #48	; 0x30
 800341a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800341e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003422:	1b52      	subs	r2, r2, r5
 8003424:	6122      	str	r2, [r4, #16]
 8003426:	464b      	mov	r3, r9
 8003428:	4621      	mov	r1, r4
 800342a:	4640      	mov	r0, r8
 800342c:	f8cd a000 	str.w	sl, [sp]
 8003430:	aa03      	add	r2, sp, #12
 8003432:	f7ff fedf 	bl	80031f4 <_printf_common>
 8003436:	3001      	adds	r0, #1
 8003438:	d14c      	bne.n	80034d4 <_printf_i+0x200>
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	b004      	add	sp, #16
 8003440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003444:	4834      	ldr	r0, [pc, #208]	; (8003518 <_printf_i+0x244>)
 8003446:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800344a:	6829      	ldr	r1, [r5, #0]
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003452:	6029      	str	r1, [r5, #0]
 8003454:	061d      	lsls	r5, r3, #24
 8003456:	d514      	bpl.n	8003482 <_printf_i+0x1ae>
 8003458:	07df      	lsls	r7, r3, #31
 800345a:	bf44      	itt	mi
 800345c:	f043 0320 	orrmi.w	r3, r3, #32
 8003460:	6023      	strmi	r3, [r4, #0]
 8003462:	b91e      	cbnz	r6, 800346c <_printf_i+0x198>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f023 0320 	bic.w	r3, r3, #32
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	2310      	movs	r3, #16
 800346e:	e7af      	b.n	80033d0 <_printf_i+0xfc>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	f043 0320 	orr.w	r3, r3, #32
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2378      	movs	r3, #120	; 0x78
 800347a:	4828      	ldr	r0, [pc, #160]	; (800351c <_printf_i+0x248>)
 800347c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003480:	e7e3      	b.n	800344a <_printf_i+0x176>
 8003482:	0659      	lsls	r1, r3, #25
 8003484:	bf48      	it	mi
 8003486:	b2b6      	uxthmi	r6, r6
 8003488:	e7e6      	b.n	8003458 <_printf_i+0x184>
 800348a:	4615      	mov	r5, r2
 800348c:	e7bb      	b.n	8003406 <_printf_i+0x132>
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	6826      	ldr	r6, [r4, #0]
 8003492:	1d18      	adds	r0, r3, #4
 8003494:	6961      	ldr	r1, [r4, #20]
 8003496:	6028      	str	r0, [r5, #0]
 8003498:	0635      	lsls	r5, r6, #24
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	d501      	bpl.n	80034a2 <_printf_i+0x1ce>
 800349e:	6019      	str	r1, [r3, #0]
 80034a0:	e002      	b.n	80034a8 <_printf_i+0x1d4>
 80034a2:	0670      	lsls	r0, r6, #25
 80034a4:	d5fb      	bpl.n	800349e <_printf_i+0x1ca>
 80034a6:	8019      	strh	r1, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	4615      	mov	r5, r2
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	e7ba      	b.n	8003426 <_printf_i+0x152>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	681d      	ldr	r5, [r3, #0]
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 fb23 	bl	8003b08 <memchr>
 80034c2:	b108      	cbz	r0, 80034c8 <_printf_i+0x1f4>
 80034c4:	1b40      	subs	r0, r0, r5
 80034c6:	6060      	str	r0, [r4, #4]
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	2300      	movs	r3, #0
 80034ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d2:	e7a8      	b.n	8003426 <_printf_i+0x152>
 80034d4:	462a      	mov	r2, r5
 80034d6:	4649      	mov	r1, r9
 80034d8:	4640      	mov	r0, r8
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	47d0      	blx	sl
 80034de:	3001      	adds	r0, #1
 80034e0:	d0ab      	beq.n	800343a <_printf_i+0x166>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	079b      	lsls	r3, r3, #30
 80034e6:	d413      	bmi.n	8003510 <_printf_i+0x23c>
 80034e8:	68e0      	ldr	r0, [r4, #12]
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	4298      	cmp	r0, r3
 80034ee:	bfb8      	it	lt
 80034f0:	4618      	movlt	r0, r3
 80034f2:	e7a4      	b.n	800343e <_printf_i+0x16a>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4632      	mov	r2, r6
 80034f8:	4649      	mov	r1, r9
 80034fa:	4640      	mov	r0, r8
 80034fc:	47d0      	blx	sl
 80034fe:	3001      	adds	r0, #1
 8003500:	d09b      	beq.n	800343a <_printf_i+0x166>
 8003502:	3501      	adds	r5, #1
 8003504:	68e3      	ldr	r3, [r4, #12]
 8003506:	9903      	ldr	r1, [sp, #12]
 8003508:	1a5b      	subs	r3, r3, r1
 800350a:	42ab      	cmp	r3, r5
 800350c:	dcf2      	bgt.n	80034f4 <_printf_i+0x220>
 800350e:	e7eb      	b.n	80034e8 <_printf_i+0x214>
 8003510:	2500      	movs	r5, #0
 8003512:	f104 0619 	add.w	r6, r4, #25
 8003516:	e7f5      	b.n	8003504 <_printf_i+0x230>
 8003518:	0800411a 	.word	0x0800411a
 800351c:	0800412b 	.word	0x0800412b

08003520 <_sbrk_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	2300      	movs	r3, #0
 8003524:	4d05      	ldr	r5, [pc, #20]	; (800353c <_sbrk_r+0x1c>)
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	602b      	str	r3, [r5, #0]
 800352c:	f7fd fa74 	bl	8000a18 <_sbrk>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_sbrk_r+0x1a>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	b103      	cbz	r3, 800353a <_sbrk_r+0x1a>
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	20000164 	.word	0x20000164

08003540 <__swbuf_r>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	460e      	mov	r6, r1
 8003544:	4614      	mov	r4, r2
 8003546:	4605      	mov	r5, r0
 8003548:	b118      	cbz	r0, 8003552 <__swbuf_r+0x12>
 800354a:	6983      	ldr	r3, [r0, #24]
 800354c:	b90b      	cbnz	r3, 8003552 <__swbuf_r+0x12>
 800354e:	f000 f9d5 	bl	80038fc <__sinit>
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <__swbuf_r+0x98>)
 8003554:	429c      	cmp	r4, r3
 8003556:	d12b      	bne.n	80035b0 <__swbuf_r+0x70>
 8003558:	686c      	ldr	r4, [r5, #4]
 800355a:	69a3      	ldr	r3, [r4, #24]
 800355c:	60a3      	str	r3, [r4, #8]
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	071a      	lsls	r2, r3, #28
 8003562:	d52f      	bpl.n	80035c4 <__swbuf_r+0x84>
 8003564:	6923      	ldr	r3, [r4, #16]
 8003566:	b36b      	cbz	r3, 80035c4 <__swbuf_r+0x84>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	b2f6      	uxtb	r6, r6
 800356e:	1ac0      	subs	r0, r0, r3
 8003570:	6963      	ldr	r3, [r4, #20]
 8003572:	4637      	mov	r7, r6
 8003574:	4283      	cmp	r3, r0
 8003576:	dc04      	bgt.n	8003582 <__swbuf_r+0x42>
 8003578:	4621      	mov	r1, r4
 800357a:	4628      	mov	r0, r5
 800357c:	f000 f92a 	bl	80037d4 <_fflush_r>
 8003580:	bb30      	cbnz	r0, 80035d0 <__swbuf_r+0x90>
 8003582:	68a3      	ldr	r3, [r4, #8]
 8003584:	3001      	adds	r0, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	60a3      	str	r3, [r4, #8]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	6022      	str	r2, [r4, #0]
 8003590:	701e      	strb	r6, [r3, #0]
 8003592:	6963      	ldr	r3, [r4, #20]
 8003594:	4283      	cmp	r3, r0
 8003596:	d004      	beq.n	80035a2 <__swbuf_r+0x62>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	07db      	lsls	r3, r3, #31
 800359c:	d506      	bpl.n	80035ac <__swbuf_r+0x6c>
 800359e:	2e0a      	cmp	r6, #10
 80035a0:	d104      	bne.n	80035ac <__swbuf_r+0x6c>
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 f915 	bl	80037d4 <_fflush_r>
 80035aa:	b988      	cbnz	r0, 80035d0 <__swbuf_r+0x90>
 80035ac:	4638      	mov	r0, r7
 80035ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <__swbuf_r+0x9c>)
 80035b2:	429c      	cmp	r4, r3
 80035b4:	d101      	bne.n	80035ba <__swbuf_r+0x7a>
 80035b6:	68ac      	ldr	r4, [r5, #8]
 80035b8:	e7cf      	b.n	800355a <__swbuf_r+0x1a>
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <__swbuf_r+0xa0>)
 80035bc:	429c      	cmp	r4, r3
 80035be:	bf08      	it	eq
 80035c0:	68ec      	ldreq	r4, [r5, #12]
 80035c2:	e7ca      	b.n	800355a <__swbuf_r+0x1a>
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f80c 	bl	80035e4 <__swsetup_r>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d0cb      	beq.n	8003568 <__swbuf_r+0x28>
 80035d0:	f04f 37ff 	mov.w	r7, #4294967295
 80035d4:	e7ea      	b.n	80035ac <__swbuf_r+0x6c>
 80035d6:	bf00      	nop
 80035d8:	0800415c 	.word	0x0800415c
 80035dc:	0800417c 	.word	0x0800417c
 80035e0:	0800413c 	.word	0x0800413c

080035e4 <__swsetup_r>:
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <__swsetup_r+0xcc>)
 80035e6:	b570      	push	{r4, r5, r6, lr}
 80035e8:	681d      	ldr	r5, [r3, #0]
 80035ea:	4606      	mov	r6, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	b125      	cbz	r5, 80035fa <__swsetup_r+0x16>
 80035f0:	69ab      	ldr	r3, [r5, #24]
 80035f2:	b913      	cbnz	r3, 80035fa <__swsetup_r+0x16>
 80035f4:	4628      	mov	r0, r5
 80035f6:	f000 f981 	bl	80038fc <__sinit>
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <__swsetup_r+0xd0>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	d10f      	bne.n	8003620 <__swsetup_r+0x3c>
 8003600:	686c      	ldr	r4, [r5, #4]
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003608:	0719      	lsls	r1, r3, #28
 800360a:	d42c      	bmi.n	8003666 <__swsetup_r+0x82>
 800360c:	06dd      	lsls	r5, r3, #27
 800360e:	d411      	bmi.n	8003634 <__swsetup_r+0x50>
 8003610:	2309      	movs	r3, #9
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	e03e      	b.n	800369e <__swsetup_r+0xba>
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <__swsetup_r+0xd4>)
 8003622:	429c      	cmp	r4, r3
 8003624:	d101      	bne.n	800362a <__swsetup_r+0x46>
 8003626:	68ac      	ldr	r4, [r5, #8]
 8003628:	e7eb      	b.n	8003602 <__swsetup_r+0x1e>
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <__swsetup_r+0xd8>)
 800362c:	429c      	cmp	r4, r3
 800362e:	bf08      	it	eq
 8003630:	68ec      	ldreq	r4, [r5, #12]
 8003632:	e7e6      	b.n	8003602 <__swsetup_r+0x1e>
 8003634:	0758      	lsls	r0, r3, #29
 8003636:	d512      	bpl.n	800365e <__swsetup_r+0x7a>
 8003638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800363a:	b141      	cbz	r1, 800364e <__swsetup_r+0x6a>
 800363c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003640:	4299      	cmp	r1, r3
 8003642:	d002      	beq.n	800364a <__swsetup_r+0x66>
 8003644:	4630      	mov	r0, r6
 8003646:	f7ff fa45 	bl	8002ad4 <_free_r>
 800364a:	2300      	movs	r3, #0
 800364c:	6363      	str	r3, [r4, #52]	; 0x34
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	2300      	movs	r3, #0
 8003658:	6063      	str	r3, [r4, #4]
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	b94b      	cbnz	r3, 800367e <__swsetup_r+0x9a>
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d003      	beq.n	800367e <__swsetup_r+0x9a>
 8003676:	4621      	mov	r1, r4
 8003678:	4630      	mov	r0, r6
 800367a:	f000 fa05 	bl	8003a88 <__smakebuf_r>
 800367e:	89a0      	ldrh	r0, [r4, #12]
 8003680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003684:	f010 0301 	ands.w	r3, r0, #1
 8003688:	d00a      	beq.n	80036a0 <__swsetup_r+0xbc>
 800368a:	2300      	movs	r3, #0
 800368c:	60a3      	str	r3, [r4, #8]
 800368e:	6963      	ldr	r3, [r4, #20]
 8003690:	425b      	negs	r3, r3
 8003692:	61a3      	str	r3, [r4, #24]
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	b943      	cbnz	r3, 80036aa <__swsetup_r+0xc6>
 8003698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800369c:	d1ba      	bne.n	8003614 <__swsetup_r+0x30>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	0781      	lsls	r1, r0, #30
 80036a2:	bf58      	it	pl
 80036a4:	6963      	ldrpl	r3, [r4, #20]
 80036a6:	60a3      	str	r3, [r4, #8]
 80036a8:	e7f4      	b.n	8003694 <__swsetup_r+0xb0>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e7f7      	b.n	800369e <__swsetup_r+0xba>
 80036ae:	bf00      	nop
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	0800415c 	.word	0x0800415c
 80036b8:	0800417c 	.word	0x0800417c
 80036bc:	0800413c 	.word	0x0800413c

080036c0 <abort>:
 80036c0:	2006      	movs	r0, #6
 80036c2:	b508      	push	{r3, lr}
 80036c4:	f000 faba 	bl	8003c3c <raise>
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fd f932 	bl	8000932 <_exit>
	...

080036d0 <__sflush_r>:
 80036d0:	898a      	ldrh	r2, [r1, #12]
 80036d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d4:	4605      	mov	r5, r0
 80036d6:	0710      	lsls	r0, r2, #28
 80036d8:	460c      	mov	r4, r1
 80036da:	d457      	bmi.n	800378c <__sflush_r+0xbc>
 80036dc:	684b      	ldr	r3, [r1, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	dc04      	bgt.n	80036ec <__sflush_r+0x1c>
 80036e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dc01      	bgt.n	80036ec <__sflush_r+0x1c>
 80036e8:	2000      	movs	r0, #0
 80036ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ee:	2e00      	cmp	r6, #0
 80036f0:	d0fa      	beq.n	80036e8 <__sflush_r+0x18>
 80036f2:	2300      	movs	r3, #0
 80036f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036f8:	682f      	ldr	r7, [r5, #0]
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	d032      	beq.n	8003764 <__sflush_r+0x94>
 80036fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	075a      	lsls	r2, r3, #29
 8003704:	d505      	bpl.n	8003712 <__sflush_r+0x42>
 8003706:	6863      	ldr	r3, [r4, #4]
 8003708:	1ac0      	subs	r0, r0, r3
 800370a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800370c:	b10b      	cbz	r3, 8003712 <__sflush_r+0x42>
 800370e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003710:	1ac0      	subs	r0, r0, r3
 8003712:	2300      	movs	r3, #0
 8003714:	4602      	mov	r2, r0
 8003716:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003718:	4628      	mov	r0, r5
 800371a:	6a21      	ldr	r1, [r4, #32]
 800371c:	47b0      	blx	r6
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	d106      	bne.n	8003732 <__sflush_r+0x62>
 8003724:	6829      	ldr	r1, [r5, #0]
 8003726:	291d      	cmp	r1, #29
 8003728:	d82c      	bhi.n	8003784 <__sflush_r+0xb4>
 800372a:	4a29      	ldr	r2, [pc, #164]	; (80037d0 <__sflush_r+0x100>)
 800372c:	40ca      	lsrs	r2, r1
 800372e:	07d6      	lsls	r6, r2, #31
 8003730:	d528      	bpl.n	8003784 <__sflush_r+0xb4>
 8003732:	2200      	movs	r2, #0
 8003734:	6062      	str	r2, [r4, #4]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	04d9      	lsls	r1, r3, #19
 800373a:	6022      	str	r2, [r4, #0]
 800373c:	d504      	bpl.n	8003748 <__sflush_r+0x78>
 800373e:	1c42      	adds	r2, r0, #1
 8003740:	d101      	bne.n	8003746 <__sflush_r+0x76>
 8003742:	682b      	ldr	r3, [r5, #0]
 8003744:	b903      	cbnz	r3, 8003748 <__sflush_r+0x78>
 8003746:	6560      	str	r0, [r4, #84]	; 0x54
 8003748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800374a:	602f      	str	r7, [r5, #0]
 800374c:	2900      	cmp	r1, #0
 800374e:	d0cb      	beq.n	80036e8 <__sflush_r+0x18>
 8003750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003754:	4299      	cmp	r1, r3
 8003756:	d002      	beq.n	800375e <__sflush_r+0x8e>
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff f9bb 	bl	8002ad4 <_free_r>
 800375e:	2000      	movs	r0, #0
 8003760:	6360      	str	r0, [r4, #52]	; 0x34
 8003762:	e7c2      	b.n	80036ea <__sflush_r+0x1a>
 8003764:	6a21      	ldr	r1, [r4, #32]
 8003766:	2301      	movs	r3, #1
 8003768:	4628      	mov	r0, r5
 800376a:	47b0      	blx	r6
 800376c:	1c41      	adds	r1, r0, #1
 800376e:	d1c7      	bne.n	8003700 <__sflush_r+0x30>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0c4      	beq.n	8003700 <__sflush_r+0x30>
 8003776:	2b1d      	cmp	r3, #29
 8003778:	d001      	beq.n	800377e <__sflush_r+0xae>
 800377a:	2b16      	cmp	r3, #22
 800377c:	d101      	bne.n	8003782 <__sflush_r+0xb2>
 800377e:	602f      	str	r7, [r5, #0]
 8003780:	e7b2      	b.n	80036e8 <__sflush_r+0x18>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003788:	81a3      	strh	r3, [r4, #12]
 800378a:	e7ae      	b.n	80036ea <__sflush_r+0x1a>
 800378c:	690f      	ldr	r7, [r1, #16]
 800378e:	2f00      	cmp	r7, #0
 8003790:	d0aa      	beq.n	80036e8 <__sflush_r+0x18>
 8003792:	0793      	lsls	r3, r2, #30
 8003794:	bf18      	it	ne
 8003796:	2300      	movne	r3, #0
 8003798:	680e      	ldr	r6, [r1, #0]
 800379a:	bf08      	it	eq
 800379c:	694b      	ldreq	r3, [r1, #20]
 800379e:	1bf6      	subs	r6, r6, r7
 80037a0:	600f      	str	r7, [r1, #0]
 80037a2:	608b      	str	r3, [r1, #8]
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	dd9f      	ble.n	80036e8 <__sflush_r+0x18>
 80037a8:	4633      	mov	r3, r6
 80037aa:	463a      	mov	r2, r7
 80037ac:	4628      	mov	r0, r5
 80037ae:	6a21      	ldr	r1, [r4, #32]
 80037b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80037b4:	47e0      	blx	ip
 80037b6:	2800      	cmp	r0, #0
 80037b8:	dc06      	bgt.n	80037c8 <__sflush_r+0xf8>
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	e790      	b.n	80036ea <__sflush_r+0x1a>
 80037c8:	4407      	add	r7, r0
 80037ca:	1a36      	subs	r6, r6, r0
 80037cc:	e7ea      	b.n	80037a4 <__sflush_r+0xd4>
 80037ce:	bf00      	nop
 80037d0:	20400001 	.word	0x20400001

080037d4 <_fflush_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	4605      	mov	r5, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	b913      	cbnz	r3, 80037e4 <_fflush_r+0x10>
 80037de:	2500      	movs	r5, #0
 80037e0:	4628      	mov	r0, r5
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	b118      	cbz	r0, 80037ee <_fflush_r+0x1a>
 80037e6:	6983      	ldr	r3, [r0, #24]
 80037e8:	b90b      	cbnz	r3, 80037ee <_fflush_r+0x1a>
 80037ea:	f000 f887 	bl	80038fc <__sinit>
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <_fflush_r+0x6c>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	d11b      	bne.n	800382c <_fflush_r+0x58>
 80037f4:	686c      	ldr	r4, [r5, #4]
 80037f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <_fflush_r+0xa>
 80037fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003800:	07d0      	lsls	r0, r2, #31
 8003802:	d404      	bmi.n	800380e <_fflush_r+0x3a>
 8003804:	0599      	lsls	r1, r3, #22
 8003806:	d402      	bmi.n	800380e <_fflush_r+0x3a>
 8003808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800380a:	f000 f915 	bl	8003a38 <__retarget_lock_acquire_recursive>
 800380e:	4628      	mov	r0, r5
 8003810:	4621      	mov	r1, r4
 8003812:	f7ff ff5d 	bl	80036d0 <__sflush_r>
 8003816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003818:	4605      	mov	r5, r0
 800381a:	07da      	lsls	r2, r3, #31
 800381c:	d4e0      	bmi.n	80037e0 <_fflush_r+0xc>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	059b      	lsls	r3, r3, #22
 8003822:	d4dd      	bmi.n	80037e0 <_fflush_r+0xc>
 8003824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003826:	f000 f908 	bl	8003a3a <__retarget_lock_release_recursive>
 800382a:	e7d9      	b.n	80037e0 <_fflush_r+0xc>
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <_fflush_r+0x70>)
 800382e:	429c      	cmp	r4, r3
 8003830:	d101      	bne.n	8003836 <_fflush_r+0x62>
 8003832:	68ac      	ldr	r4, [r5, #8]
 8003834:	e7df      	b.n	80037f6 <_fflush_r+0x22>
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <_fflush_r+0x74>)
 8003838:	429c      	cmp	r4, r3
 800383a:	bf08      	it	eq
 800383c:	68ec      	ldreq	r4, [r5, #12]
 800383e:	e7da      	b.n	80037f6 <_fflush_r+0x22>
 8003840:	0800415c 	.word	0x0800415c
 8003844:	0800417c 	.word	0x0800417c
 8003848:	0800413c 	.word	0x0800413c

0800384c <std>:
 800384c:	2300      	movs	r3, #0
 800384e:	b510      	push	{r4, lr}
 8003850:	4604      	mov	r4, r0
 8003852:	e9c0 3300 	strd	r3, r3, [r0]
 8003856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800385a:	6083      	str	r3, [r0, #8]
 800385c:	8181      	strh	r1, [r0, #12]
 800385e:	6643      	str	r3, [r0, #100]	; 0x64
 8003860:	81c2      	strh	r2, [r0, #14]
 8003862:	6183      	str	r3, [r0, #24]
 8003864:	4619      	mov	r1, r3
 8003866:	2208      	movs	r2, #8
 8003868:	305c      	adds	r0, #92	; 0x5c
 800386a:	f7fe fff1 	bl	8002850 <memset>
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <std+0x38>)
 8003870:	6224      	str	r4, [r4, #32]
 8003872:	6263      	str	r3, [r4, #36]	; 0x24
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <std+0x3c>)
 8003876:	62a3      	str	r3, [r4, #40]	; 0x28
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <std+0x40>)
 800387a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <std+0x44>)
 800387e:	6323      	str	r3, [r4, #48]	; 0x30
 8003880:	bd10      	pop	{r4, pc}
 8003882:	bf00      	nop
 8003884:	08003c75 	.word	0x08003c75
 8003888:	08003c97 	.word	0x08003c97
 800388c:	08003ccf 	.word	0x08003ccf
 8003890:	08003cf3 	.word	0x08003cf3

08003894 <_cleanup_r>:
 8003894:	4901      	ldr	r1, [pc, #4]	; (800389c <_cleanup_r+0x8>)
 8003896:	f000 b8af 	b.w	80039f8 <_fwalk_reent>
 800389a:	bf00      	nop
 800389c:	080037d5 	.word	0x080037d5

080038a0 <__sfmoreglue>:
 80038a0:	2268      	movs	r2, #104	; 0x68
 80038a2:	b570      	push	{r4, r5, r6, lr}
 80038a4:	1e4d      	subs	r5, r1, #1
 80038a6:	4355      	muls	r5, r2
 80038a8:	460e      	mov	r6, r1
 80038aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038ae:	f7ff f979 	bl	8002ba4 <_malloc_r>
 80038b2:	4604      	mov	r4, r0
 80038b4:	b140      	cbz	r0, 80038c8 <__sfmoreglue+0x28>
 80038b6:	2100      	movs	r1, #0
 80038b8:	e9c0 1600 	strd	r1, r6, [r0]
 80038bc:	300c      	adds	r0, #12
 80038be:	60a0      	str	r0, [r4, #8]
 80038c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038c4:	f7fe ffc4 	bl	8002850 <memset>
 80038c8:	4620      	mov	r0, r4
 80038ca:	bd70      	pop	{r4, r5, r6, pc}

080038cc <__sfp_lock_acquire>:
 80038cc:	4801      	ldr	r0, [pc, #4]	; (80038d4 <__sfp_lock_acquire+0x8>)
 80038ce:	f000 b8b3 	b.w	8003a38 <__retarget_lock_acquire_recursive>
 80038d2:	bf00      	nop
 80038d4:	20000161 	.word	0x20000161

080038d8 <__sfp_lock_release>:
 80038d8:	4801      	ldr	r0, [pc, #4]	; (80038e0 <__sfp_lock_release+0x8>)
 80038da:	f000 b8ae 	b.w	8003a3a <__retarget_lock_release_recursive>
 80038de:	bf00      	nop
 80038e0:	20000161 	.word	0x20000161

080038e4 <__sinit_lock_acquire>:
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <__sinit_lock_acquire+0x8>)
 80038e6:	f000 b8a7 	b.w	8003a38 <__retarget_lock_acquire_recursive>
 80038ea:	bf00      	nop
 80038ec:	20000162 	.word	0x20000162

080038f0 <__sinit_lock_release>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__sinit_lock_release+0x8>)
 80038f2:	f000 b8a2 	b.w	8003a3a <__retarget_lock_release_recursive>
 80038f6:	bf00      	nop
 80038f8:	20000162 	.word	0x20000162

080038fc <__sinit>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	f7ff fff0 	bl	80038e4 <__sinit_lock_acquire>
 8003904:	69a3      	ldr	r3, [r4, #24]
 8003906:	b11b      	cbz	r3, 8003910 <__sinit+0x14>
 8003908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390c:	f7ff bff0 	b.w	80038f0 <__sinit_lock_release>
 8003910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003914:	6523      	str	r3, [r4, #80]	; 0x50
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <__sinit+0x68>)
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <__sinit+0x6c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	62a2      	str	r2, [r4, #40]	; 0x28
 800391e:	42a3      	cmp	r3, r4
 8003920:	bf08      	it	eq
 8003922:	2301      	moveq	r3, #1
 8003924:	4620      	mov	r0, r4
 8003926:	bf08      	it	eq
 8003928:	61a3      	streq	r3, [r4, #24]
 800392a:	f000 f81f 	bl	800396c <__sfp>
 800392e:	6060      	str	r0, [r4, #4]
 8003930:	4620      	mov	r0, r4
 8003932:	f000 f81b 	bl	800396c <__sfp>
 8003936:	60a0      	str	r0, [r4, #8]
 8003938:	4620      	mov	r0, r4
 800393a:	f000 f817 	bl	800396c <__sfp>
 800393e:	2200      	movs	r2, #0
 8003940:	2104      	movs	r1, #4
 8003942:	60e0      	str	r0, [r4, #12]
 8003944:	6860      	ldr	r0, [r4, #4]
 8003946:	f7ff ff81 	bl	800384c <std>
 800394a:	2201      	movs	r2, #1
 800394c:	2109      	movs	r1, #9
 800394e:	68a0      	ldr	r0, [r4, #8]
 8003950:	f7ff ff7c 	bl	800384c <std>
 8003954:	2202      	movs	r2, #2
 8003956:	2112      	movs	r1, #18
 8003958:	68e0      	ldr	r0, [r4, #12]
 800395a:	f7ff ff77 	bl	800384c <std>
 800395e:	2301      	movs	r3, #1
 8003960:	61a3      	str	r3, [r4, #24]
 8003962:	e7d1      	b.n	8003908 <__sinit+0xc>
 8003964:	08003f54 	.word	0x08003f54
 8003968:	08003895 	.word	0x08003895

0800396c <__sfp>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	4607      	mov	r7, r0
 8003970:	f7ff ffac 	bl	80038cc <__sfp_lock_acquire>
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <__sfp+0x84>)
 8003976:	681e      	ldr	r6, [r3, #0]
 8003978:	69b3      	ldr	r3, [r6, #24]
 800397a:	b913      	cbnz	r3, 8003982 <__sfp+0x16>
 800397c:	4630      	mov	r0, r6
 800397e:	f7ff ffbd 	bl	80038fc <__sinit>
 8003982:	3648      	adds	r6, #72	; 0x48
 8003984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003988:	3b01      	subs	r3, #1
 800398a:	d503      	bpl.n	8003994 <__sfp+0x28>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	b30b      	cbz	r3, 80039d4 <__sfp+0x68>
 8003990:	6836      	ldr	r6, [r6, #0]
 8003992:	e7f7      	b.n	8003984 <__sfp+0x18>
 8003994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003998:	b9d5      	cbnz	r5, 80039d0 <__sfp+0x64>
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <__sfp+0x88>)
 800399c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039a0:	60e3      	str	r3, [r4, #12]
 80039a2:	6665      	str	r5, [r4, #100]	; 0x64
 80039a4:	f000 f847 	bl	8003a36 <__retarget_lock_init_recursive>
 80039a8:	f7ff ff96 	bl	80038d8 <__sfp_lock_release>
 80039ac:	2208      	movs	r2, #8
 80039ae:	4629      	mov	r1, r5
 80039b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039b8:	6025      	str	r5, [r4, #0]
 80039ba:	61a5      	str	r5, [r4, #24]
 80039bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039c0:	f7fe ff46 	bl	8002850 <memset>
 80039c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039cc:	4620      	mov	r0, r4
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d0:	3468      	adds	r4, #104	; 0x68
 80039d2:	e7d9      	b.n	8003988 <__sfp+0x1c>
 80039d4:	2104      	movs	r1, #4
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7ff ff62 	bl	80038a0 <__sfmoreglue>
 80039dc:	4604      	mov	r4, r0
 80039de:	6030      	str	r0, [r6, #0]
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1d5      	bne.n	8003990 <__sfp+0x24>
 80039e4:	f7ff ff78 	bl	80038d8 <__sfp_lock_release>
 80039e8:	230c      	movs	r3, #12
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	e7ee      	b.n	80039cc <__sfp+0x60>
 80039ee:	bf00      	nop
 80039f0:	08003f54 	.word	0x08003f54
 80039f4:	ffff0001 	.word	0xffff0001

080039f8 <_fwalk_reent>:
 80039f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039fc:	4606      	mov	r6, r0
 80039fe:	4688      	mov	r8, r1
 8003a00:	2700      	movs	r7, #0
 8003a02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a0a:	f1b9 0901 	subs.w	r9, r9, #1
 8003a0e:	d505      	bpl.n	8003a1c <_fwalk_reent+0x24>
 8003a10:	6824      	ldr	r4, [r4, #0]
 8003a12:	2c00      	cmp	r4, #0
 8003a14:	d1f7      	bne.n	8003a06 <_fwalk_reent+0xe>
 8003a16:	4638      	mov	r0, r7
 8003a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a1c:	89ab      	ldrh	r3, [r5, #12]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d907      	bls.n	8003a32 <_fwalk_reent+0x3a>
 8003a22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a26:	3301      	adds	r3, #1
 8003a28:	d003      	beq.n	8003a32 <_fwalk_reent+0x3a>
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	47c0      	blx	r8
 8003a30:	4307      	orrs	r7, r0
 8003a32:	3568      	adds	r5, #104	; 0x68
 8003a34:	e7e9      	b.n	8003a0a <_fwalk_reent+0x12>

08003a36 <__retarget_lock_init_recursive>:
 8003a36:	4770      	bx	lr

08003a38 <__retarget_lock_acquire_recursive>:
 8003a38:	4770      	bx	lr

08003a3a <__retarget_lock_release_recursive>:
 8003a3a:	4770      	bx	lr

08003a3c <__swhatbuf_r>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	460e      	mov	r6, r1
 8003a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a44:	4614      	mov	r4, r2
 8003a46:	2900      	cmp	r1, #0
 8003a48:	461d      	mov	r5, r3
 8003a4a:	b096      	sub	sp, #88	; 0x58
 8003a4c:	da08      	bge.n	8003a60 <__swhatbuf_r+0x24>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a54:	602a      	str	r2, [r5, #0]
 8003a56:	061a      	lsls	r2, r3, #24
 8003a58:	d410      	bmi.n	8003a7c <__swhatbuf_r+0x40>
 8003a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5e:	e00e      	b.n	8003a7e <__swhatbuf_r+0x42>
 8003a60:	466a      	mov	r2, sp
 8003a62:	f000 f96d 	bl	8003d40 <_fstat_r>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	dbf1      	blt.n	8003a4e <__swhatbuf_r+0x12>
 8003a6a:	9a01      	ldr	r2, [sp, #4]
 8003a6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a74:	425a      	negs	r2, r3
 8003a76:	415a      	adcs	r2, r3
 8003a78:	602a      	str	r2, [r5, #0]
 8003a7a:	e7ee      	b.n	8003a5a <__swhatbuf_r+0x1e>
 8003a7c:	2340      	movs	r3, #64	; 0x40
 8003a7e:	2000      	movs	r0, #0
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	b016      	add	sp, #88	; 0x58
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a88 <__smakebuf_r>:
 8003a88:	898b      	ldrh	r3, [r1, #12]
 8003a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a8c:	079d      	lsls	r5, r3, #30
 8003a8e:	4606      	mov	r6, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	d507      	bpl.n	8003aa4 <__smakebuf_r+0x1c>
 8003a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	6123      	str	r3, [r4, #16]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	6163      	str	r3, [r4, #20]
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	466a      	mov	r2, sp
 8003aa6:	ab01      	add	r3, sp, #4
 8003aa8:	f7ff ffc8 	bl	8003a3c <__swhatbuf_r>
 8003aac:	9900      	ldr	r1, [sp, #0]
 8003aae:	4605      	mov	r5, r0
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f7ff f877 	bl	8002ba4 <_malloc_r>
 8003ab6:	b948      	cbnz	r0, 8003acc <__smakebuf_r+0x44>
 8003ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abc:	059a      	lsls	r2, r3, #22
 8003abe:	d4ef      	bmi.n	8003aa0 <__smakebuf_r+0x18>
 8003ac0:	f023 0303 	bic.w	r3, r3, #3
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	e7e3      	b.n	8003a94 <__smakebuf_r+0xc>
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <__smakebuf_r+0x7c>)
 8003ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	6020      	str	r0, [r4, #0]
 8003ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	9b00      	ldr	r3, [sp, #0]
 8003adc:	6120      	str	r0, [r4, #16]
 8003ade:	6163      	str	r3, [r4, #20]
 8003ae0:	9b01      	ldr	r3, [sp, #4]
 8003ae2:	b15b      	cbz	r3, 8003afc <__smakebuf_r+0x74>
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aea:	f000 f93b 	bl	8003d64 <_isatty_r>
 8003aee:	b128      	cbz	r0, 8003afc <__smakebuf_r+0x74>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	89a0      	ldrh	r0, [r4, #12]
 8003afe:	4305      	orrs	r5, r0
 8003b00:	81a5      	strh	r5, [r4, #12]
 8003b02:	e7cd      	b.n	8003aa0 <__smakebuf_r+0x18>
 8003b04:	08003895 	.word	0x08003895

08003b08 <memchr>:
 8003b08:	4603      	mov	r3, r0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	b2c9      	uxtb	r1, r1
 8003b0e:	4402      	add	r2, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	d101      	bne.n	8003b1a <memchr+0x12>
 8003b16:	2000      	movs	r0, #0
 8003b18:	e003      	b.n	8003b22 <memchr+0x1a>
 8003b1a:	7804      	ldrb	r4, [r0, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	428c      	cmp	r4, r1
 8003b20:	d1f6      	bne.n	8003b10 <memchr+0x8>
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <memcpy>:
 8003b24:	440a      	add	r2, r1
 8003b26:	4291      	cmp	r1, r2
 8003b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b2c:	d100      	bne.n	8003b30 <memcpy+0xc>
 8003b2e:	4770      	bx	lr
 8003b30:	b510      	push	{r4, lr}
 8003b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b36:	4291      	cmp	r1, r2
 8003b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b3c:	d1f9      	bne.n	8003b32 <memcpy+0xe>
 8003b3e:	bd10      	pop	{r4, pc}

08003b40 <memmove>:
 8003b40:	4288      	cmp	r0, r1
 8003b42:	b510      	push	{r4, lr}
 8003b44:	eb01 0402 	add.w	r4, r1, r2
 8003b48:	d902      	bls.n	8003b50 <memmove+0x10>
 8003b4a:	4284      	cmp	r4, r0
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	d807      	bhi.n	8003b60 <memmove+0x20>
 8003b50:	1e43      	subs	r3, r0, #1
 8003b52:	42a1      	cmp	r1, r4
 8003b54:	d008      	beq.n	8003b68 <memmove+0x28>
 8003b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b5e:	e7f8      	b.n	8003b52 <memmove+0x12>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4402      	add	r2, r0
 8003b64:	428a      	cmp	r2, r1
 8003b66:	d100      	bne.n	8003b6a <memmove+0x2a>
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b72:	e7f7      	b.n	8003b64 <memmove+0x24>

08003b74 <__malloc_lock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	; (8003b7c <__malloc_lock+0x8>)
 8003b76:	f7ff bf5f 	b.w	8003a38 <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	20000160 	.word	0x20000160

08003b80 <__malloc_unlock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	; (8003b88 <__malloc_unlock+0x8>)
 8003b82:	f7ff bf5a 	b.w	8003a3a <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	20000160 	.word	0x20000160

08003b8c <_realloc_r>:
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	4680      	mov	r8, r0
 8003b92:	4614      	mov	r4, r2
 8003b94:	460e      	mov	r6, r1
 8003b96:	b921      	cbnz	r1, 8003ba2 <_realloc_r+0x16>
 8003b98:	4611      	mov	r1, r2
 8003b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9e:	f7ff b801 	b.w	8002ba4 <_malloc_r>
 8003ba2:	b92a      	cbnz	r2, 8003bb0 <_realloc_r+0x24>
 8003ba4:	f7fe ff96 	bl	8002ad4 <_free_r>
 8003ba8:	4625      	mov	r5, r4
 8003baa:	4628      	mov	r0, r5
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb0:	f000 f8fa 	bl	8003da8 <_malloc_usable_size_r>
 8003bb4:	4284      	cmp	r4, r0
 8003bb6:	4607      	mov	r7, r0
 8003bb8:	d802      	bhi.n	8003bc0 <_realloc_r+0x34>
 8003bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bbe:	d812      	bhi.n	8003be6 <_realloc_r+0x5a>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f7fe ffee 	bl	8002ba4 <_malloc_r>
 8003bc8:	4605      	mov	r5, r0
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d0ed      	beq.n	8003baa <_realloc_r+0x1e>
 8003bce:	42bc      	cmp	r4, r7
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	bf28      	it	cs
 8003bd6:	463a      	movcs	r2, r7
 8003bd8:	f7ff ffa4 	bl	8003b24 <memcpy>
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4640      	mov	r0, r8
 8003be0:	f7fe ff78 	bl	8002ad4 <_free_r>
 8003be4:	e7e1      	b.n	8003baa <_realloc_r+0x1e>
 8003be6:	4635      	mov	r5, r6
 8003be8:	e7df      	b.n	8003baa <_realloc_r+0x1e>

08003bea <_raise_r>:
 8003bea:	291f      	cmp	r1, #31
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4604      	mov	r4, r0
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	d904      	bls.n	8003bfe <_raise_r+0x14>
 8003bf4:	2316      	movs	r3, #22
 8003bf6:	6003      	str	r3, [r0, #0]
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	bd38      	pop	{r3, r4, r5, pc}
 8003bfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c00:	b112      	cbz	r2, 8003c08 <_raise_r+0x1e>
 8003c02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c06:	b94b      	cbnz	r3, 8003c1c <_raise_r+0x32>
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 f831 	bl	8003c70 <_getpid_r>
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4601      	mov	r1, r0
 8003c12:	4620      	mov	r0, r4
 8003c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c18:	f000 b818 	b.w	8003c4c <_kill_r>
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d00a      	beq.n	8003c36 <_raise_r+0x4c>
 8003c20:	1c59      	adds	r1, r3, #1
 8003c22:	d103      	bne.n	8003c2c <_raise_r+0x42>
 8003c24:	2316      	movs	r3, #22
 8003c26:	6003      	str	r3, [r0, #0]
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e7e7      	b.n	8003bfc <_raise_r+0x12>
 8003c2c:	2400      	movs	r4, #0
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c34:	4798      	blx	r3
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7e0      	b.n	8003bfc <_raise_r+0x12>
	...

08003c3c <raise>:
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <raise+0xc>)
 8003c3e:	4601      	mov	r1, r0
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7ff bfd2 	b.w	8003bea <_raise_r>
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <_kill_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	2300      	movs	r3, #0
 8003c50:	4d06      	ldr	r5, [pc, #24]	; (8003c6c <_kill_r+0x20>)
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	f7fc fe5a 	bl	8000912 <_kill>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d102      	bne.n	8003c68 <_kill_r+0x1c>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	b103      	cbz	r3, 8003c68 <_kill_r+0x1c>
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	bd38      	pop	{r3, r4, r5, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000164 	.word	0x20000164

08003c70 <_getpid_r>:
 8003c70:	f7fc be48 	b.w	8000904 <_getpid>

08003c74 <__sread>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	460c      	mov	r4, r1
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	f000 f89c 	bl	8003db8 <_read_r>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	bfab      	itete	ge
 8003c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c86:	89a3      	ldrhlt	r3, [r4, #12]
 8003c88:	181b      	addge	r3, r3, r0
 8003c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c8e:	bfac      	ite	ge
 8003c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c92:	81a3      	strhlt	r3, [r4, #12]
 8003c94:	bd10      	pop	{r4, pc}

08003c96 <__swrite>:
 8003c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	898b      	ldrh	r3, [r1, #12]
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	d505      	bpl.n	8003cb4 <__swrite+0x1e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	2200      	movs	r2, #0
 8003cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb0:	f000 f868 	bl	8003d84 <_lseek_r>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbc:	81a3      	strh	r3, [r4, #12]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cca:	f000 b817 	b.w	8003cfc <_write_r>

08003cce <__sseek>:
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	f000 f855 	bl	8003d84 <_lseek_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	bf15      	itete	ne
 8003ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cea:	81a3      	strheq	r3, [r4, #12]
 8003cec:	bf18      	it	ne
 8003cee:	81a3      	strhne	r3, [r4, #12]
 8003cf0:	bd10      	pop	{r4, pc}

08003cf2 <__sclose>:
 8003cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf6:	f000 b813 	b.w	8003d20 <_close_r>
	...

08003cfc <_write_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	2200      	movs	r2, #0
 8003d06:	4d05      	ldr	r5, [pc, #20]	; (8003d1c <_write_r+0x20>)
 8003d08:	602a      	str	r2, [r5, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7fc fe38 	bl	8000980 <_write>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_write_r+0x1e>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_write_r+0x1e>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	20000164 	.word	0x20000164

08003d20 <_close_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	2300      	movs	r3, #0
 8003d24:	4d05      	ldr	r5, [pc, #20]	; (8003d3c <_close_r+0x1c>)
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7fc fe44 	bl	80009b8 <_close>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_close_r+0x1a>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_close_r+0x1a>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20000164 	.word	0x20000164

08003d40 <_fstat_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	2300      	movs	r3, #0
 8003d44:	4d06      	ldr	r5, [pc, #24]	; (8003d60 <_fstat_r+0x20>)
 8003d46:	4604      	mov	r4, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	602b      	str	r3, [r5, #0]
 8003d4e:	f7fc fe3e 	bl	80009ce <_fstat>
 8003d52:	1c43      	adds	r3, r0, #1
 8003d54:	d102      	bne.n	8003d5c <_fstat_r+0x1c>
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	b103      	cbz	r3, 8003d5c <_fstat_r+0x1c>
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	bd38      	pop	{r3, r4, r5, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000164 	.word	0x20000164

08003d64 <_isatty_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	2300      	movs	r3, #0
 8003d68:	4d05      	ldr	r5, [pc, #20]	; (8003d80 <_isatty_r+0x1c>)
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7fc fe3c 	bl	80009ec <_isatty>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_isatty_r+0x1a>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_isatty_r+0x1a>
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	20000164 	.word	0x20000164

08003d84 <_lseek_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4d05      	ldr	r5, [pc, #20]	; (8003da4 <_lseek_r+0x20>)
 8003d90:	602a      	str	r2, [r5, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f7fc fe34 	bl	8000a00 <_lseek>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d102      	bne.n	8003da2 <_lseek_r+0x1e>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	b103      	cbz	r3, 8003da2 <_lseek_r+0x1e>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	20000164 	.word	0x20000164

08003da8 <_malloc_usable_size_r>:
 8003da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dac:	1f18      	subs	r0, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bfbc      	itt	lt
 8003db2:	580b      	ldrlt	r3, [r1, r0]
 8003db4:	18c0      	addlt	r0, r0, r3
 8003db6:	4770      	bx	lr

08003db8 <_read_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4d05      	ldr	r5, [pc, #20]	; (8003dd8 <_read_r+0x20>)
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f7fc fdbd 	bl	8000946 <_read>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_read_r+0x1e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_read_r+0x1e>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000164 	.word	0x20000164

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr
