
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000110c  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006218  08006218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800623c  0800623c  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800623c  0800623c  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800623c  0800623c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006244  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08006250  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08006250  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d5c  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000de4  00000000  00000000  00012d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00013b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00013f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158cd  00000000  00000000  00014290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004527  00000000  00000000  00029b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ba59  00000000  00000000  0002e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  000a9b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	2000000c 	.word	0x2000000c
 8005128:	00000000 	.word	0x00000000
 800512c:	08006200 	.word	0x08006200

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000010 	.word	0x20000010
 8005148:	08006200 	.word	0x08006200

0800514c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
SCB->VTOR = (uint32_t) ADDR_APP_PROGRAM;
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <main+0x2c>)
 8005152:	4a0a      	ldr	r2, [pc, #40]	; (800517c <main+0x30>)
 8005154:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005156:	f000 f929 	bl	80053ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800515a:	f000 f813 	bl	8005184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800515e:	f000 f84d 	bl	80051fc <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005166:	4806      	ldr	r0, [pc, #24]	; (8005180 <main+0x34>)
 8005168:	f000 fc26 	bl	80059b8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800516c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005170:	f000 f97e 	bl	8005470 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005174:	e7f5      	b.n	8005162 <main+0x16>
 8005176:	bf00      	nop
 8005178:	e000ed00 	.word	0xe000ed00
 800517c:	08005000 	.word	0x08005000
 8005180:	40011000 	.word	0x40011000

08005184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b090      	sub	sp, #64	; 0x40
 8005188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800518a:	f107 0318 	add.w	r3, r7, #24
 800518e:	2228      	movs	r2, #40	; 0x28
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f82c 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051a6:	2302      	movs	r3, #2
 80051a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051aa:	2301      	movs	r3, #1
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051ae:	2310      	movs	r3, #16
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051b6:	f107 0318 	add.w	r3, r7, #24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fc16 	bl	80059ec <HAL_RCC_OscConfig>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80051c6:	f000 f865 	bl	8005294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051ca:	230f      	movs	r3, #15
 80051cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fe84 	bl	8005ef0 <HAL_RCC_ClockConfig>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80051ee:	f000 f851 	bl	8005294 <Error_Handler>
  }
}
 80051f2:	bf00      	nop
 80051f4:	3740      	adds	r7, #64	; 0x40
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005202:	f107 0310 	add.w	r3, r7, #16
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <MX_GPIO_Init+0x90>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4a1d      	ldr	r2, [pc, #116]	; (800528c <MX_GPIO_Init+0x90>)
 8005216:	f043 0310 	orr.w	r3, r3, #16
 800521a:	6193      	str	r3, [r2, #24]
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <MX_GPIO_Init+0x90>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <MX_GPIO_Init+0x90>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <MX_GPIO_Init+0x90>)
 800522e:	f043 0320 	orr.w	r3, r3, #32
 8005232:	6193      	str	r3, [r2, #24]
 8005234:	4b15      	ldr	r3, [pc, #84]	; (800528c <MX_GPIO_Init+0x90>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <MX_GPIO_Init+0x90>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	4a11      	ldr	r2, [pc, #68]	; (800528c <MX_GPIO_Init+0x90>)
 8005246:	f043 0304 	orr.w	r3, r3, #4
 800524a:	6193      	str	r3, [r2, #24]
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <MX_GPIO_Init+0x90>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800525e:	480c      	ldr	r0, [pc, #48]	; (8005290 <MX_GPIO_Init+0x94>)
 8005260:	f000 fb92 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800526a:	2301      	movs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	2302      	movs	r3, #2
 8005274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005276:	f107 0310 	add.w	r3, r7, #16
 800527a:	4619      	mov	r1, r3
 800527c:	4804      	ldr	r0, [pc, #16]	; (8005290 <MX_GPIO_Init+0x94>)
 800527e:	f000 f9ff 	bl	8005680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005282:	bf00      	nop
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	40011000 	.word	0x40011000

08005294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
}
 800529a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800529c:	e7fe      	b.n	800529c <Error_Handler+0x8>
	...

080052a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_MspInit+0x5c>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_MspInit+0x5c>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	6193      	str	r3, [r2, #24]
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_MspInit+0x5c>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_MspInit+0x5c>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_MspInit+0x5c>)
 80052c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c8:	61d3      	str	r3, [r2, #28]
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_MspInit+0x5c>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <HAL_MspInit+0x60>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <HAL_MspInit+0x60>)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	40021000 	.word	0x40021000
 8005300:	40010000 	.word	0x40010000

08005304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005308:	e7fe      	b.n	8005308 <NMI_Handler+0x4>

0800530a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800530e:	e7fe      	b.n	800530e <HardFault_Handler+0x4>

08005310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005314:	e7fe      	b.n	8005314 <MemManage_Handler+0x4>

08005316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800531a:	e7fe      	b.n	800531a <BusFault_Handler+0x4>

0800531c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005320:	e7fe      	b.n	8005320 <UsageFault_Handler+0x4>

08005322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800533e:	bf00      	nop
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800534a:	f000 f875 	bl	8005438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}

08005352 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr
	...

08005360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005360:	f7ff fff7 	bl	8005352 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005364:	480b      	ldr	r0, [pc, #44]	; (8005394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005366:	490c      	ldr	r1, [pc, #48]	; (8005398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005368:	4a0c      	ldr	r2, [pc, #48]	; (800539c <LoopFillZerobss+0x16>)
  movs r3, #0
 800536a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800536c:	e002      	b.n	8005374 <LoopCopyDataInit>

0800536e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800536e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005372:	3304      	adds	r3, #4

08005374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005378:	d3f9      	bcc.n	800536e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800537c:	4c09      	ldr	r4, [pc, #36]	; (80053a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005380:	e001      	b.n	8005386 <LoopFillZerobss>

08005382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005384:	3204      	adds	r2, #4

08005386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005388:	d3fb      	bcc.n	8005382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800538a:	f000 ff0d 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800538e:	f7ff fedd 	bl	800514c <main>
  bx lr
 8005392:	4770      	bx	lr
  ldr r0, =_sdata
 8005394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005398:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800539c:	08006244 	.word	0x08006244
  ldr r2, =_sbss
 80053a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80053a4:	2000002c 	.word	0x2000002c

080053a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053a8:	e7fe      	b.n	80053a8 <ADC1_2_IRQHandler>
	...

080053ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_Init+0x28>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <HAL_Init+0x28>)
 80053b6:	f043 0310 	orr.w	r3, r3, #16
 80053ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053bc:	2003      	movs	r0, #3
 80053be:	f000 f92b 	bl	8005618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c2:	200f      	movs	r0, #15
 80053c4:	f000 f808 	bl	80053d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053c8:	f7ff ff6a 	bl	80052a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40022000 	.word	0x40022000

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_InitTick+0x54>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_InitTick+0x58>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f935 	bl	8005666 <HAL_SYSTICK_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e00e      	b.n	8005424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d80a      	bhi.n	8005422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800540c:	2200      	movs	r2, #0
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	f000 f90b 	bl	800562e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005418:	4a06      	ldr	r2, [pc, #24]	; (8005434 <HAL_InitTick+0x5c>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000000 	.word	0x20000000
 8005430:	20000008 	.word	0x20000008
 8005434:	20000004 	.word	0x20000004

08005438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_IncTick+0x1c>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_IncTick+0x20>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4413      	add	r3, r2
 8005448:	4a03      	ldr	r2, [pc, #12]	; (8005458 <HAL_IncTick+0x20>)
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	20000008 	.word	0x20000008
 8005458:	20000028 	.word	0x20000028

0800545c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return uwTick;
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <HAL_GetTick+0x10>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	20000028 	.word	0x20000028

08005470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005478:	f7ff fff0 	bl	800545c <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d005      	beq.n	8005496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <HAL_Delay+0x44>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005496:	bf00      	nop
 8005498:	f7ff ffe0 	bl	800545c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d8f7      	bhi.n	8005498 <HAL_Delay+0x28>
  {
  }
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000008 	.word	0x20000008

080054b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <__NVIC_SetPriorityGrouping+0x44>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054d4:	4013      	ands	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ea:	4a04      	ldr	r2, [pc, #16]	; (80054fc <__NVIC_SetPriorityGrouping+0x44>)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	60d3      	str	r3, [r2, #12]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <__NVIC_GetPriorityGrouping+0x18>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	f003 0307 	and.w	r3, r3, #7
}
 800550e:	4618      	mov	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db0a      	blt.n	8005546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	490c      	ldr	r1, [pc, #48]	; (8005568 <__NVIC_SetPriority+0x4c>)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	440b      	add	r3, r1
 8005540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005544:	e00a      	b.n	800555c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4908      	ldr	r1, [pc, #32]	; (800556c <__NVIC_SetPriority+0x50>)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3b04      	subs	r3, #4
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	440b      	add	r3, r1
 800555a:	761a      	strb	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f1c3 0307 	rsb	r3, r3, #7
 800558a:	2b04      	cmp	r3, #4
 800558c:	bf28      	it	cs
 800558e:	2304      	movcs	r3, #4
 8005590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3304      	adds	r3, #4
 8005596:	2b06      	cmp	r3, #6
 8005598:	d902      	bls.n	80055a0 <NVIC_EncodePriority+0x30>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3b03      	subs	r3, #3
 800559e:	e000      	b.n	80055a2 <NVIC_EncodePriority+0x32>
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	401a      	ands	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	43d9      	mvns	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	4313      	orrs	r3, r2
         );
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	; 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055e4:	d301      	bcc.n	80055ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055e6:	2301      	movs	r3, #1
 80055e8:	e00f      	b.n	800560a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <SysTick_Config+0x40>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f2:	210f      	movs	r1, #15
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	f7ff ff90 	bl	800551c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <SysTick_Config+0x40>)
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005602:	4b04      	ldr	r3, [pc, #16]	; (8005614 <SysTick_Config+0x40>)
 8005604:	2207      	movs	r2, #7
 8005606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000e010 	.word	0xe000e010

08005618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff49 	bl	80054b8 <__NVIC_SetPriorityGrouping>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	4603      	mov	r3, r0
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005640:	f7ff ff5e 	bl	8005500 <__NVIC_GetPriorityGrouping>
 8005644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	6978      	ldr	r0, [r7, #20]
 800564c:	f7ff ff90 	bl	8005570 <NVIC_EncodePriority>
 8005650:	4602      	mov	r2, r0
 8005652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff5f 	bl	800551c <__NVIC_SetPriority>
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ffb0 	bl	80055d4 <SysTick_Config>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005680:	b480      	push	{r7}
 8005682:	b08b      	sub	sp, #44	; 0x2c
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800568e:	2300      	movs	r3, #0
 8005690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005692:	e169      	b.n	8005968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005694:	2201      	movs	r2, #1
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	f040 8158 	bne.w	8005962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4a9a      	ldr	r2, [pc, #616]	; (8005920 <HAL_GPIO_Init+0x2a0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d05e      	beq.n	800577a <HAL_GPIO_Init+0xfa>
 80056bc:	4a98      	ldr	r2, [pc, #608]	; (8005920 <HAL_GPIO_Init+0x2a0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d875      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056c2:	4a98      	ldr	r2, [pc, #608]	; (8005924 <HAL_GPIO_Init+0x2a4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d058      	beq.n	800577a <HAL_GPIO_Init+0xfa>
 80056c8:	4a96      	ldr	r2, [pc, #600]	; (8005924 <HAL_GPIO_Init+0x2a4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d86f      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056ce:	4a96      	ldr	r2, [pc, #600]	; (8005928 <HAL_GPIO_Init+0x2a8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d052      	beq.n	800577a <HAL_GPIO_Init+0xfa>
 80056d4:	4a94      	ldr	r2, [pc, #592]	; (8005928 <HAL_GPIO_Init+0x2a8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d869      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056da:	4a94      	ldr	r2, [pc, #592]	; (800592c <HAL_GPIO_Init+0x2ac>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04c      	beq.n	800577a <HAL_GPIO_Init+0xfa>
 80056e0:	4a92      	ldr	r2, [pc, #584]	; (800592c <HAL_GPIO_Init+0x2ac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d863      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056e6:	4a92      	ldr	r2, [pc, #584]	; (8005930 <HAL_GPIO_Init+0x2b0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d046      	beq.n	800577a <HAL_GPIO_Init+0xfa>
 80056ec:	4a90      	ldr	r2, [pc, #576]	; (8005930 <HAL_GPIO_Init+0x2b0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d85d      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056f2:	2b12      	cmp	r3, #18
 80056f4:	d82a      	bhi.n	800574c <HAL_GPIO_Init+0xcc>
 80056f6:	2b12      	cmp	r3, #18
 80056f8:	d859      	bhi.n	80057ae <HAL_GPIO_Init+0x12e>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_GPIO_Init+0x80>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	0800577b 	.word	0x0800577b
 8005704:	08005755 	.word	0x08005755
 8005708:	08005767 	.word	0x08005767
 800570c:	080057a9 	.word	0x080057a9
 8005710:	080057af 	.word	0x080057af
 8005714:	080057af 	.word	0x080057af
 8005718:	080057af 	.word	0x080057af
 800571c:	080057af 	.word	0x080057af
 8005720:	080057af 	.word	0x080057af
 8005724:	080057af 	.word	0x080057af
 8005728:	080057af 	.word	0x080057af
 800572c:	080057af 	.word	0x080057af
 8005730:	080057af 	.word	0x080057af
 8005734:	080057af 	.word	0x080057af
 8005738:	080057af 	.word	0x080057af
 800573c:	080057af 	.word	0x080057af
 8005740:	080057af 	.word	0x080057af
 8005744:	0800575d 	.word	0x0800575d
 8005748:	08005771 	.word	0x08005771
 800574c:	4a79      	ldr	r2, [pc, #484]	; (8005934 <HAL_GPIO_Init+0x2b4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005752:	e02c      	b.n	80057ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	623b      	str	r3, [r7, #32]
          break;
 800575a:	e029      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	3304      	adds	r3, #4
 8005762:	623b      	str	r3, [r7, #32]
          break;
 8005764:	e024      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	3308      	adds	r3, #8
 800576c:	623b      	str	r3, [r7, #32]
          break;
 800576e:	e01f      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	330c      	adds	r3, #12
 8005776:	623b      	str	r3, [r7, #32]
          break;
 8005778:	e01a      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005782:	2304      	movs	r3, #4
 8005784:	623b      	str	r3, [r7, #32]
          break;
 8005786:	e013      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005790:	2308      	movs	r3, #8
 8005792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	611a      	str	r2, [r3, #16]
          break;
 800579a:	e009      	b.n	80057b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800579c:	2308      	movs	r3, #8
 800579e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	615a      	str	r2, [r3, #20]
          break;
 80057a6:	e003      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057a8:	2300      	movs	r3, #0
 80057aa:	623b      	str	r3, [r7, #32]
          break;
 80057ac:	e000      	b.n	80057b0 <HAL_GPIO_Init+0x130>
          break;
 80057ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2bff      	cmp	r3, #255	; 0xff
 80057b4:	d801      	bhi.n	80057ba <HAL_GPIO_Init+0x13a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	e001      	b.n	80057be <HAL_GPIO_Init+0x13e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2bff      	cmp	r3, #255	; 0xff
 80057c4:	d802      	bhi.n	80057cc <HAL_GPIO_Init+0x14c>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	e002      	b.n	80057d2 <HAL_GPIO_Init+0x152>
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	3b08      	subs	r3, #8
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	210f      	movs	r1, #15
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	6a39      	ldr	r1, [r7, #32]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	431a      	orrs	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80b1 	beq.w	8005962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005800:	4b4d      	ldr	r3, [pc, #308]	; (8005938 <HAL_GPIO_Init+0x2b8>)
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	4a4c      	ldr	r2, [pc, #304]	; (8005938 <HAL_GPIO_Init+0x2b8>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6193      	str	r3, [r2, #24]
 800580c:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <HAL_GPIO_Init+0x2b8>)
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005818:	4a48      	ldr	r2, [pc, #288]	; (800593c <HAL_GPIO_Init+0x2bc>)
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	3302      	adds	r3, #2
 8005820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	220f      	movs	r2, #15
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a40      	ldr	r2, [pc, #256]	; (8005940 <HAL_GPIO_Init+0x2c0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_GPIO_Init+0x1ec>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <HAL_GPIO_Init+0x2c4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00d      	beq.n	8005868 <HAL_GPIO_Init+0x1e8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a3e      	ldr	r2, [pc, #248]	; (8005948 <HAL_GPIO_Init+0x2c8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <HAL_GPIO_Init+0x1e4>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3d      	ldr	r2, [pc, #244]	; (800594c <HAL_GPIO_Init+0x2cc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_GPIO_Init+0x1e0>
 800585c:	2303      	movs	r3, #3
 800585e:	e006      	b.n	800586e <HAL_GPIO_Init+0x1ee>
 8005860:	2304      	movs	r3, #4
 8005862:	e004      	b.n	800586e <HAL_GPIO_Init+0x1ee>
 8005864:	2302      	movs	r3, #2
 8005866:	e002      	b.n	800586e <HAL_GPIO_Init+0x1ee>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <HAL_GPIO_Init+0x1ee>
 800586c:	2300      	movs	r3, #0
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	f002 0203 	and.w	r2, r2, #3
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	4093      	lsls	r3, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800587e:	492f      	ldr	r1, [pc, #188]	; (800593c <HAL_GPIO_Init+0x2bc>)
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d006      	beq.n	80058a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	492c      	ldr	r1, [pc, #176]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	608b      	str	r3, [r1, #8]
 80058a4:	e006      	b.n	80058b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	4928      	ldr	r1, [pc, #160]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058c0:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	4922      	ldr	r1, [pc, #136]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60cb      	str	r3, [r1, #12]
 80058cc:	e006      	b.n	80058dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80058ce:	4b20      	ldr	r3, [pc, #128]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	491e      	ldr	r1, [pc, #120]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4918      	ldr	r1, [pc, #96]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	604b      	str	r3, [r1, #4]
 80058f4:	e006      	b.n	8005904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	4914      	ldr	r1, [pc, #80]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 8005900:	4013      	ands	r3, r2
 8005902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d021      	beq.n	8005954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	490e      	ldr	r1, [pc, #56]	; (8005950 <HAL_GPIO_Init+0x2d0>)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]
 800591c:	e021      	b.n	8005962 <HAL_GPIO_Init+0x2e2>
 800591e:	bf00      	nop
 8005920:	10320000 	.word	0x10320000
 8005924:	10310000 	.word	0x10310000
 8005928:	10220000 	.word	0x10220000
 800592c:	10210000 	.word	0x10210000
 8005930:	10120000 	.word	0x10120000
 8005934:	10110000 	.word	0x10110000
 8005938:	40021000 	.word	0x40021000
 800593c:	40010000 	.word	0x40010000
 8005940:	40010800 	.word	0x40010800
 8005944:	40010c00 	.word	0x40010c00
 8005948:	40011000 	.word	0x40011000
 800594c:	40011400 	.word	0x40011400
 8005950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_GPIO_Init+0x304>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	43db      	mvns	r3, r3
 800595c:	4909      	ldr	r1, [pc, #36]	; (8005984 <HAL_GPIO_Init+0x304>)
 800595e:	4013      	ands	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	3301      	adds	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	f47f ae8e 	bne.w	8005694 <HAL_GPIO_Init+0x14>
  }
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	372c      	adds	r7, #44	; 0x2c
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	40010400 	.word	0x40010400

08005988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	807b      	strh	r3, [r7, #2]
 8005994:	4613      	mov	r3, r2
 8005996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005998:	787b      	ldrb	r3, [r7, #1]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80059a4:	e003      	b.n	80059ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	041a      	lsls	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	041a      	lsls	r2, r3, #16
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	43d9      	mvns	r1, r3
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	400b      	ands	r3, r1
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	611a      	str	r2, [r3, #16]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e272      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8087 	beq.w	8005b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a0c:	4b92      	ldr	r3, [pc, #584]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d00c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a18:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d112      	bne.n	8005a4a <HAL_RCC_OscConfig+0x5e>
 8005a24:	4b8c      	ldr	r3, [pc, #560]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d10b      	bne.n	8005a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a32:	4b89      	ldr	r3, [pc, #548]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d06c      	beq.n	8005b18 <HAL_RCC_OscConfig+0x12c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d168      	bne.n	8005b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e24c      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x76>
 8005a54:	4b80      	ldr	r3, [pc, #512]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a7f      	ldr	r2, [pc, #508]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e02e      	b.n	8005ac0 <HAL_RCC_OscConfig+0xd4>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x98>
 8005a6a:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a7a      	ldr	r2, [pc, #488]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	4b78      	ldr	r3, [pc, #480]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a77      	ldr	r2, [pc, #476]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e01d      	b.n	8005ac0 <HAL_RCC_OscConfig+0xd4>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0xbc>
 8005a8e:	4b72      	ldr	r3, [pc, #456]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a71      	ldr	r2, [pc, #452]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b6f      	ldr	r3, [pc, #444]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a6e      	ldr	r2, [pc, #440]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e00b      	b.n	8005ac0 <HAL_RCC_OscConfig+0xd4>
 8005aa8:	4b6b      	ldr	r3, [pc, #428]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a6a      	ldr	r2, [pc, #424]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a67      	ldr	r2, [pc, #412]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7ff fcc8 	bl	800545c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7ff fcc4 	bl	800545c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e200      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	4b5d      	ldr	r3, [pc, #372]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0xe4>
 8005aee:	e014      	b.n	8005b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7ff fcb4 	bl	800545c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af8:	f7ff fcb0 	bl	800545c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	; 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e1ec      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0a:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x10c>
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d063      	beq.n	8005bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b26:	4b4c      	ldr	r3, [pc, #304]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b32:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d11c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x18c>
 8005b3e:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d116      	bne.n	8005b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4a:	4b43      	ldr	r3, [pc, #268]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_RCC_OscConfig+0x176>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e1c0      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b62:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4939      	ldr	r1, [pc, #228]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b76:	e03a      	b.n	8005bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d020      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_RCC_OscConfig+0x270>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7ff fc69 	bl	800545c <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8e:	f7ff fc65 	bl	800545c <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e1a1      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba0:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bac:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4927      	ldr	r1, [pc, #156]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]
 8005bc0:	e015      	b.n	8005bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bc2:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <HAL_RCC_OscConfig+0x270>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7ff fc48 	bl	800545c <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd0:	f7ff fc44 	bl	800545c <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e180      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03a      	beq.n	8005c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d019      	beq.n	8005c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <HAL_RCC_OscConfig+0x274>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c08:	f7ff fc28 	bl	800545c <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c10:	f7ff fc24 	bl	800545c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e160      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCC_OscConfig+0x26c>)
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0f0      	beq.n	8005c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f000 fa9c 	bl	800616c <RCC_Delay>
 8005c34:	e01c      	b.n	8005c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <HAL_RCC_OscConfig+0x274>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3c:	f7ff fc0e 	bl	800545c <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c42:	e00f      	b.n	8005c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c44:	f7ff fc0a 	bl	800545c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d908      	bls.n	8005c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e146      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	42420000 	.word	0x42420000
 8005c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c64:	4b92      	ldr	r3, [pc, #584]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e9      	bne.n	8005c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80a6 	beq.w	8005dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	4b88      	ldr	r3, [pc, #544]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4a87      	ldr	r2, [pc, #540]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	61d3      	str	r3, [r2, #28]
 8005c9a:	4b85      	ldr	r3, [pc, #532]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <HAL_RCC_OscConfig+0x4c8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d118      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb6:	4b7f      	ldr	r3, [pc, #508]	; (8005eb4 <HAL_RCC_OscConfig+0x4c8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7e      	ldr	r2, [pc, #504]	; (8005eb4 <HAL_RCC_OscConfig+0x4c8>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc2:	f7ff fbcb 	bl	800545c <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cca:	f7ff fbc7 	bl	800545c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b64      	cmp	r3, #100	; 0x64
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e103      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	4b75      	ldr	r3, [pc, #468]	; (8005eb4 <HAL_RCC_OscConfig+0x4c8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <HAL_RCC_OscConfig+0x312>
 8005cf0:	4b6f      	ldr	r3, [pc, #444]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	4a6e      	ldr	r2, [pc, #440]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6213      	str	r3, [r2, #32]
 8005cfc:	e02d      	b.n	8005d5a <HAL_RCC_OscConfig+0x36e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x334>
 8005d06:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4a69      	ldr	r2, [pc, #420]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	6213      	str	r3, [r2, #32]
 8005d12:	4b67      	ldr	r3, [pc, #412]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	4a66      	ldr	r2, [pc, #408]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	6213      	str	r3, [r2, #32]
 8005d1e:	e01c      	b.n	8005d5a <HAL_RCC_OscConfig+0x36e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d10c      	bne.n	8005d42 <HAL_RCC_OscConfig+0x356>
 8005d28:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	4a60      	ldr	r2, [pc, #384]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	6213      	str	r3, [r2, #32]
 8005d34:	4b5e      	ldr	r3, [pc, #376]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4a5d      	ldr	r2, [pc, #372]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	6213      	str	r3, [r2, #32]
 8005d40:	e00b      	b.n	8005d5a <HAL_RCC_OscConfig+0x36e>
 8005d42:	4b5b      	ldr	r3, [pc, #364]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4a5a      	ldr	r2, [pc, #360]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	6213      	str	r3, [r2, #32]
 8005d4e:	4b58      	ldr	r3, [pc, #352]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4a57      	ldr	r2, [pc, #348]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d54:	f023 0304 	bic.w	r3, r3, #4
 8005d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d015      	beq.n	8005d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d62:	f7ff fb7b 	bl	800545c <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6a:	f7ff fb77 	bl	800545c <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0b1      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	4b4b      	ldr	r3, [pc, #300]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0ee      	beq.n	8005d6a <HAL_RCC_OscConfig+0x37e>
 8005d8c:	e014      	b.n	8005db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8e:	f7ff fb65 	bl	800545c <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7ff fb61 	bl	800545c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e09b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dac:	4b40      	ldr	r3, [pc, #256]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ee      	bne.n	8005d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d105      	bne.n	8005dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dbe:	4b3c      	ldr	r3, [pc, #240]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8087 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dd4:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d061      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d146      	bne.n	8005e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de8:	4b33      	ldr	r3, [pc, #204]	; (8005eb8 <HAL_RCC_OscConfig+0x4cc>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7ff fb35 	bl	800545c <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df6:	f7ff fb31 	bl	800545c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e06d      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1c:	d108      	bne.n	8005e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4921      	ldr	r1, [pc, #132]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e30:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a19      	ldr	r1, [r3, #32]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	430b      	orrs	r3, r1
 8005e42:	491b      	ldr	r1, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4e:	f7ff fb05 	bl	800545c <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e56:	f7ff fb01 	bl	800545c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e03d      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x46a>
 8005e74:	e035      	b.n	8005ee2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7ff faee 	bl	800545c <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e84:	f7ff faea 	bl	800545c <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e026      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCC_OscConfig+0x4c4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x498>
 8005ea2:	e01e      	b.n	8005ee2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e019      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_OscConfig+0x500>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d106      	bne.n	8005ede <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40021000 	.word	0x40021000

08005ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0d0      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f04:	4b6a      	ldr	r3, [pc, #424]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d910      	bls.n	8005f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b67      	ldr	r3, [pc, #412]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 0207 	bic.w	r2, r3, #7
 8005f1a:	4965      	ldr	r1, [pc, #404]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b63      	ldr	r3, [pc, #396]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0b8      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f4c:	4b59      	ldr	r3, [pc, #356]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a58      	ldr	r2, [pc, #352]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f64:	4b53      	ldr	r3, [pc, #332]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a52      	ldr	r2, [pc, #328]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f70:	4b50      	ldr	r3, [pc, #320]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	494d      	ldr	r1, [pc, #308]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d040      	beq.n	8006010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f96:	4b47      	ldr	r3, [pc, #284]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d115      	bne.n	8005fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e07f      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fae:	4b41      	ldr	r3, [pc, #260]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e073      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbe:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e06b      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f023 0203 	bic.w	r2, r3, #3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	4936      	ldr	r1, [pc, #216]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe0:	f7ff fa3c 	bl	800545c <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe8:	f7ff fa38 	bl	800545c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e053      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f003 020c 	and.w	r2, r3, #12
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	429a      	cmp	r2, r3
 800600e:	d1eb      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d210      	bcs.n	8006040 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 0207 	bic.w	r2, r3, #7
 8006026:	4922      	ldr	r1, [pc, #136]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e032      	b.n	80060a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4916      	ldr	r1, [pc, #88]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	490e      	ldr	r1, [pc, #56]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800607e:	f000 f821 	bl	80060c4 <HAL_RCC_GetSysClockFreq>
 8006082:	4602      	mov	r2, r0
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	490a      	ldr	r1, [pc, #40]	; (80060b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006090:	5ccb      	ldrb	r3, [r1, r3]
 8006092:	fa22 f303 	lsr.w	r3, r2, r3
 8006096:	4a09      	ldr	r2, [pc, #36]	; (80060bc <HAL_RCC_ClockConfig+0x1cc>)
 8006098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_ClockConfig+0x1d0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff f99a 	bl	80053d8 <HAL_InitTick>

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40022000 	.word	0x40022000
 80060b4:	40021000 	.word	0x40021000
 80060b8:	08006218 	.word	0x08006218
 80060bc:	20000000 	.word	0x20000000
 80060c0:	20000004 	.word	0x20000004

080060c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060de:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <HAL_RCC_GetSysClockFreq+0x94>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d002      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x30>
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d003      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0x36>
 80060f2:	e027      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <HAL_RCC_GetSysClockFreq+0x98>)
 80060f6:	613b      	str	r3, [r7, #16]
      break;
 80060f8:	e027      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	0c9b      	lsrs	r3, r3, #18
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	4a17      	ldr	r2, [pc, #92]	; (8006160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d010      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <HAL_RCC_GetSysClockFreq+0x94>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	0c5b      	lsrs	r3, r3, #17
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <HAL_RCC_GetSysClockFreq+0xa0>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a0d      	ldr	r2, [pc, #52]	; (800615c <HAL_RCC_GetSysClockFreq+0x98>)
 8006126:	fb03 f202 	mul.w	r2, r3, r2
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e004      	b.n	800613e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0c      	ldr	r2, [pc, #48]	; (8006168 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	613b      	str	r3, [r7, #16]
      break;
 8006142:	e002      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <HAL_RCC_GetSysClockFreq+0x98>)
 8006146:	613b      	str	r3, [r7, #16]
      break;
 8006148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614a:	693b      	ldr	r3, [r7, #16]
}
 800614c:	4618      	mov	r0, r3
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
 800615c:	007a1200 	.word	0x007a1200
 8006160:	08006228 	.word	0x08006228
 8006164:	08006238 	.word	0x08006238
 8006168:	003d0900 	.word	0x003d0900

0800616c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <RCC_Delay+0x34>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a0a      	ldr	r2, [pc, #40]	; (80061a4 <RCC_Delay+0x38>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0a5b      	lsrs	r3, r3, #9
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	fb02 f303 	mul.w	r3, r2, r3
 8006186:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006188:	bf00      	nop
  }
  while (Delay --);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	60fa      	str	r2, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f9      	bne.n	8006188 <RCC_Delay+0x1c>
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr
 80061a0:	20000000 	.word	0x20000000
 80061a4:	10624dd3 	.word	0x10624dd3

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	2600      	movs	r6, #0
 80061ac:	4d0c      	ldr	r5, [pc, #48]	; (80061e0 <__libc_init_array+0x38>)
 80061ae:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	f000 f822 	bl	8006200 <_init>
 80061bc:	2600      	movs	r6, #0
 80061be:	4d0a      	ldr	r5, [pc, #40]	; (80061e8 <__libc_init_array+0x40>)
 80061c0:	4c0a      	ldr	r4, [pc, #40]	; (80061ec <__libc_init_array+0x44>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	0800623c 	.word	0x0800623c
 80061e4:	0800623c 	.word	0x0800623c
 80061e8:	0800623c 	.word	0x0800623c
 80061ec:	08006240 	.word	0x08006240

080061f0 <memset>:
 80061f0:	4603      	mov	r3, r0
 80061f2:	4402      	add	r2, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <_init>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr

0800620c <_fini>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr
