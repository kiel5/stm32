
bootloader_ota.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  2000000c  08002d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08002d6c  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d85  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccd  00000000  00000000  00028dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002aa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635f  00000000  00000000  0002ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b68  00000000  00000000  00041d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee7e  00000000  00000000  0004b907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  000ca7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d14 	.word	0x08002d14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d14 	.word	0x08002d14

0800014c <ring_buff_init>:
#include "Ringbuffer.h"

void ring_buff_init(Ringbuffer *ring_buff,uint8_t *buff, uint16_t len)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
    ring_buff->buffer = buff;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
    ring_buff->head = 0;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	2200      	movs	r2, #0
 8000164:	809a      	strh	r2, [r3, #4]
    ring_buff->tail = 0;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	2200      	movs	r2, #0
 800016a:	80da      	strh	r2, [r3, #6]
    ring_buff->maxlen = len; 
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	88fa      	ldrh	r2, [r7, #6]
 8000170:	811a      	strh	r2, [r3, #8]
}
 8000172:	bf00      	nop
 8000174:	3714      	adds	r7, #20
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <ring_buff_push>:
uint8_t ring_buff_push(Ringbuffer *ring_buff, uint8_t data)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	70fb      	strb	r3, [r7, #3]
    uint16_t next;
    next = ring_buff->head + 1;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	889b      	ldrh	r3, [r3, #4]
 800018c:	3301      	adds	r3, #1
 800018e:	81fb      	strh	r3, [r7, #14]
    if(next >= ring_buff->maxlen)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	891b      	ldrh	r3, [r3, #8]
 8000194:	89fa      	ldrh	r2, [r7, #14]
 8000196:	429a      	cmp	r2, r3
 8000198:	d301      	bcc.n	800019e <ring_buff_push+0x22>
    {
        next = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	81fb      	strh	r3, [r7, #14]
    }
    if(next == ring_buff->tail)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	88db      	ldrh	r3, [r3, #6]
 80001a2:	89fa      	ldrh	r2, [r7, #14]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d101      	bne.n	80001ac <ring_buff_push+0x30>
    {
        return -1;
 80001a8:	23ff      	movs	r3, #255	; 0xff
 80001aa:	e00a      	b.n	80001c2 <ring_buff_push+0x46>
    }
    ring_buff->buffer[ring_buff->head] = data;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	8892      	ldrh	r2, [r2, #4]
 80001b4:	4413      	add	r3, r2
 80001b6:	78fa      	ldrb	r2, [r7, #3]
 80001b8:	701a      	strb	r2, [r3, #0]
    ring_buff->head = next;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	89fa      	ldrh	r2, [r7, #14]
 80001be:	809a      	strh	r2, [r3, #4]
    return 0; 
 80001c0:	2300      	movs	r3, #0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	3714      	adds	r7, #20
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <ring_buff_pop>:
uint8_t ring_buff_pop(Ringbuffer *ring_buff, uint8_t *data)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
    uint8_t next;
    if(ring_buff->head == ring_buff->tail) return -1;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	889a      	ldrh	r2, [r3, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	88db      	ldrh	r3, [r3, #6]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d101      	bne.n	80001e6 <ring_buff_pop+0x1a>
 80001e2:	23ff      	movs	r3, #255	; 0xff
 80001e4:	e019      	b.n	800021a <ring_buff_pop+0x4e>
    next = ring_buff->tail +1;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	88db      	ldrh	r3, [r3, #6]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	3301      	adds	r3, #1
 80001ee:	73fb      	strb	r3, [r7, #15]
    if(next >=ring_buff->maxlen)           next = 0;
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	891b      	ldrh	r3, [r3, #8]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d301      	bcc.n	8000200 <ring_buff_pop+0x34>
 80001fc:	2300      	movs	r3, #0
 80001fe:	73fb      	strb	r3, [r7, #15]
    *data = ring_buff->buffer[ring_buff->tail];
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	88d2      	ldrh	r2, [r2, #6]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	701a      	strb	r2, [r3, #0]
    ring_buff->tail = next;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	b29a      	uxth	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	80da      	strh	r2, [r3, #6]
    return 0;
 8000218:	2300      	movs	r3, #0
}
 800021a:	4618      	mov	r0, r3
 800021c:	3714      	adds	r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <ring_buff_available>:

uint16_t ring_buff_available(Ringbuffer *ring_buff)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if(ring_buff->head < ring_buff->tail){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	889a      	ldrh	r2, [r3, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	88db      	ldrh	r3, [r3, #6]
 8000234:	429a      	cmp	r2, r3
 8000236:	d20a      	bcs.n	800024e <ring_buff_available+0x2a>
        return ring_buff->maxlen - (ring_buff->tail - ring_buff->head);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	891a      	ldrh	r2, [r3, #8]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	8899      	ldrh	r1, [r3, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	88db      	ldrh	r3, [r3, #6]
 8000244:	1acb      	subs	r3, r1, r3
 8000246:	b29b      	uxth	r3, r3
 8000248:	4413      	add	r3, r2
 800024a:	b29b      	uxth	r3, r3
 800024c:	e005      	b.n	800025a <ring_buff_available+0x36>
    }
    return (ring_buff->head - ring_buff->tail); 
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	889a      	ldrh	r2, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	88db      	ldrh	r3, [r3, #6]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	b29b      	uxth	r3, r3
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <min_application_handler>:
    OTA_END_STATE
}OTA_State_Typedef;
OTA_State_Typedef ota_state;
void min_application_handler(uint8_t min_id, uint8_t const*min_payload, 
                              uint8_t len_payload, uint8_t port)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6039      	str	r1, [r7, #0]
 800026c:	4611      	mov	r1, r2
 800026e:	461a      	mov	r2, r3
 8000270:	4603      	mov	r3, r0
 8000272:	71fb      	strb	r3, [r7, #7]
 8000274:	460b      	mov	r3, r1
 8000276:	71bb      	strb	r3, [r7, #6]
 8000278:	4613      	mov	r3, r2
 800027a:	717b      	strb	r3, [r7, #5]
  // HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,min_payload[0]);
  // min_send_frame(&min_cxt,MIN_ID,&min_payload[0],1);
      switch (ota_state)
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <min_application_handler+0x6c>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b04      	cmp	r3, #4
 8000282:	d81e      	bhi.n	80002c2 <min_application_handler+0x5e>
 8000284:	a201      	add	r2, pc, #4	; (adr r2, 800028c <min_application_handler+0x28>)
 8000286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028a:	bf00      	nop
 800028c:	080002a1 	.word	0x080002a1
 8000290:	080002c3 	.word	0x080002c3
 8000294:	080002c3 	.word	0x080002c3
 8000298:	080002c3 	.word	0x080002c3
 800029c:	080002c3 	.word	0x080002c3

    //min_payload có dạng 0x00, 0x01, 0x02 
    case OTA_IDLE_STATE:
    {
    OTACode* ota_code = (OTACode *)min_payload;
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	60fb      	str	r3, [r7, #12]
    if(ota_code->command_id == OTA_CODE && ota_code->ota_cmd == REQUEST_CODE)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10c      	bne.n	80002c6 <min_application_handler+0x62>
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d108      	bne.n	80002c6 <min_application_handler+0x62>
    {
        ota_state = OTA_START_STATE;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <min_application_handler+0x6c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
        ota_send_code(START_CODE);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f81c 	bl	80002f8 <ota_send_code>
    }

        break;
 80002c0:	e001      	b.n	80002c6 <min_application_handler+0x62>
    case OTA_SEND_DATA_STATE:
        break;
    case OTA_END_STATE:
        break;  
    default:
        break;
 80002c2:	bf00      	nop
 80002c4:	e000      	b.n	80002c8 <min_application_handler+0x64>
        break;
 80002c6:	bf00      	nop
    }
}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000022c 	.word	0x2000022c

080002d4 <bootloader_send_data>:

void bootloader_send_data(void *data, uint8_t len)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
    min_send_frame(&min_cxt,MIN_ID,(uint8_t*) data,len);
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	2101      	movs	r1, #1
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <bootloader_send_data+0x20>)
 80002e8:	f000 fe21 	bl	8000f2e <min_send_frame>
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000028 	.word	0x20000028

080002f8 <ota_send_code>:
void ota_send_code(OTA_CODE_NAME ota_code)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    //uint8_t buff_ota_start[] = {0x00,1, 0x00};
    OTACode cmd;
    cmd.command_id = OTA_CODE;
 8000302:	2300      	movs	r3, #0
 8000304:	733b      	strb	r3, [r7, #12]
    cmd.len  = 1;
 8000306:	2301      	movs	r3, #1
 8000308:	737b      	strb	r3, [r7, #13]
    cmd.ota_cmd = ota_code;
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	73bb      	strb	r3, [r7, #14]
    bootloader_send_data(&cmd,sizeof(cmd));
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	2103      	movs	r1, #3
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffdd 	bl	80002d4 <bootloader_send_data>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <bootloader_handlde>:
{
  uint8_t cmd[] = {0x00,1,2};
  min_send_frame(&min_cxt,MIN_ID,cmd,3);
}
void bootloader_handlde()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
    uint8_t len = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    if(uart_available() > 0)
 800032e:	f000 ff39 	bl	80011a4 <uart_available>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <bootloader_handlde+0x20>
    {
      data = uart_read();
 8000338:	f000 ff3e 	bl	80011b8 <uart_read>
 800033c:	4603      	mov	r3, r0
 800033e:	71bb      	strb	r3, [r7, #6]
      len = 1;
 8000340:	2301      	movs	r3, #1
 8000342:	71fb      	strb	r3, [r7, #7]
    }
    min_poll(&min_cxt,&data, len);
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	1dbb      	adds	r3, r7, #6
 8000348:	4619      	mov	r1, r3
 800034a:	4803      	ldr	r0, [pc, #12]	; (8000358 <bootloader_handlde+0x34>)
 800034c:	f000 fd18 	bl	8000d80 <min_poll>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028

0800035c <bootloader_init>:
void bootloader_init()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
    min_init_context(&min_cxt,MIN_PORT);
 8000360:	2100      	movs	r1, #0
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <bootloader_init+0x18>)
 8000364:	f000 fdb2 	bl	8000ecc <min_init_context>
    ota_state = OTA_IDLE_STATE;
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <bootloader_init+0x1c>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028
 8000378:	2000022c 	.word	0x2000022c

0800037c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <HAL_UART_RxCpltCallback+0x30>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	d109      	bne.n	80003a4 <HAL_UART_RxCpltCallback+0x28>
  {
    uart_receive(data);
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <HAL_UART_RxCpltCallback+0x34>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fef5 	bl	8001184 <uart_receive>
    HAL_UART_Receive_IT(&huart1,&data,1);
 800039a:	2201      	movs	r2, #1
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <HAL_UART_RxCpltCallback+0x34>)
 800039e:	4803      	ldr	r0, [pc, #12]	; (80003ac <HAL_UART_RxCpltCallback+0x30>)
 80003a0:	f001 ff54 	bl	800224c <HAL_UART_Receive_IT>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000230 	.word	0x20000230
 80003b0:	20000278 	.word	0x20000278

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 ff41 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f817 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f881 	bl	80004c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003c6:	f000 f855 	bl	8000474 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 80003ca:	f000 ff05 	bl	80011d8 <uart_init>
  HAL_UART_Receive_IT(&huart1,&data,1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	4905      	ldr	r1, [pc, #20]	; (80003e8 <main+0x34>)
 80003d2:	4806      	ldr	r0, [pc, #24]	; (80003ec <main+0x38>)
 80003d4:	f001 ff3a 	bl	800224c <HAL_UART_Receive_IT>
  bootloader_init();
 80003d8:	f7ff ffc0 	bl	800035c <bootloader_init>

  uint8_t flag =1;
 80003dc:	2301      	movs	r3, #1
 80003de:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bootloader_handlde(); 
 80003e0:	f7ff ffa0 	bl	8000324 <bootloader_handlde>
 80003e4:	e7fc      	b.n	80003e0 <main+0x2c>
 80003e6:	bf00      	nop
 80003e8:	20000278 	.word	0x20000278
 80003ec:	20000230 	.word	0x20000230

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	; 0x40
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fc80 	bl	8002d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	2310      	movs	r3, #16
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000422:	2300      	movs	r3, #0
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000426:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800042a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 faab 	bl	800198c <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800043c:	f000 f866 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2302      	movs	r3, #2
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fd18 	bl	8001e90 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000466:	f000 f851 	bl	800050c <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	; 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <MX_USART1_UART_Init+0x50>)
 800047c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004ac:	f001 fe7e 	bl	80021ac <HAL_UART_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b6:	f000 f829 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000230 	.word	0x20000230
 80004c4:	40013800 	.word	0x40013800

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_GPIO_Init+0x40>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <MX_GPIO_Init+0x40>)
 80004d4:	f043 0320 	orr.w	r3, r3, #32
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_GPIO_Init+0x40>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0320 	and.w	r3, r3, #32
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_GPIO_Init+0x40>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_GPIO_Init+0x40>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_GPIO_Init+0x40>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>

08000516 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	405a      	eors	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 8; j++) {
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	e011      	b.n	8000572 <crc32_step+0x42>
        uint32_t mask = (uint32_t) -(context->crc & 1U);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	085a      	lsrs	r2, r3, #1
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <crc32_step+0x54>)
 8000564:	400b      	ands	r3, r1
 8000566:	405a      	eors	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 8; j++) {
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3301      	adds	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b07      	cmp	r3, #7
 8000576:	d9ea      	bls.n	800054e <crc32_step+0x1e>
    }
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	edb88320 	.word	0xedb88320

08000588 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	43db      	mvns	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <stuffed_tx_byte>:


static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	4613      	mov	r3, r2
 80005ae:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fcf6 	bl	8000fac <min_tx_byte>
    if(crc) {
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d007      	beq.n	80005d6 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffad 	bl	8000530 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if(byte == HEADER_BYTE) {
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2baa      	cmp	r3, #170	; 0xaa
 80005da:	d118      	bne.n	800060e <stuffed_tx_byte+0x6e>
        if(--self->tx_header_byte_countdown == 0) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80005e2:	3b01      	subs	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10f      	bne.n	8000616 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE);        // Stuff byte
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80005fc:	2155      	movs	r1, #85	; 0x55
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fcd4 	bl	8000fac <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2202      	movs	r2, #2
 8000608:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
        }
    }
    else {
        self->tx_header_byte_countdown = 2U;
    }
}
 800060c:	e003      	b.n	8000616 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2202      	movs	r2, #2
 8000612:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	4613      	mov	r3, r2
 800062e:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2202      	movs	r2, #2
 8000634:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    crc32_init_context(&self->tx_checksum);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff69 	bl	8000516 <crc32_init_context>

    min_tx_start(self->port);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fc99 	bl	8000f82 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000656:	21aa      	movs	r1, #170	; 0xaa
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fca7 	bl	8000fac <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000664:	21aa      	movs	r1, #170	; 0xaa
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fca0 	bl	8000fac <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000672:	21aa      	movs	r1, #170	; 0xaa
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc99 	bl	8000fac <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 800067a:	7afb      	ldrb	r3, [r7, #11]
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff8d 	bl	80005a0 <stuffed_tx_byte>
    if(id_control & 0x80U) {
 8000686:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800068a:	2b00      	cmp	r3, #0
 800068c:	da05      	bge.n	800069a <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 800068e:	7abb      	ldrb	r3, [r7, #10]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f7ff ff83 	bl	80005a0 <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 800069a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f7ff ff7c 	bl	80005a0 <stuffed_tx_byte>

    for(i = 0, n = payload_len; n > 0; n--, i++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	75bb      	strb	r3, [r7, #22]
 80006ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006b0:	75fb      	strb	r3, [r7, #23]
 80006b2:	e015      	b.n	80006e0 <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 80006b4:	8c3b      	ldrh	r3, [r7, #32]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2201      	movs	r2, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff ff6d 	bl	80005a0 <stuffed_tx_byte>
        payload_offset++;
 80006c6:	8c3b      	ldrh	r3, [r7, #32]
 80006c8:	3301      	adds	r3, #1
 80006ca:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 80006cc:	8c3a      	ldrh	r2, [r7, #32]
 80006ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006d0:	4013      	ands	r3, r2
 80006d2:	843b      	strh	r3, [r7, #32]
    for(i = 0, n = payload_len; n > 0; n--, i++) {
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	75fb      	strb	r3, [r7, #23]
 80006da:	7dbb      	ldrb	r3, [r7, #22]
 80006dc:	3301      	adds	r3, #1
 80006de:	75bb      	strb	r3, [r7, #22]
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1e6      	bne.n	80006b4 <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff4b 	bl	8000588 <crc32_finalize>
 80006f2:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff ff4e 	bl	80005a0 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff46 	bl	80005a0 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f7ff ff3e 	bl	80005a0 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff ff37 	bl	80005a0 <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000738:	2155      	movs	r1, #85	; 0x55
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc36 	bl	8000fac <min_tx_byte>

    min_tx_finished(self->port);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fc25 	bl	8000f96 <min_tx_finished>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000762:	461a      	mov	r2, r3
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000778:	3b01      	subs	r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    self->transport_fifo.head_idx++;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <transport_fifo_get>:
    return ret;
}

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80007d6:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4413      	add	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 020f 	and.w	r2, r3, #15
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af04      	add	r7, sp, #16
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	79db      	ldrb	r3, [r3, #7]
 800080a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080e:	b2d9      	uxtb	r1, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	7a18      	ldrb	r0, [r3, #8]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	889b      	ldrh	r3, [r3, #4]
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	7992      	ldrb	r2, [r2, #6]
 800081c:	9202      	str	r2, [sp, #8]
 800081e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000822:	9201      	str	r2, [sp, #4]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <transport_fifo_send+0x44>)
 8000828:	4602      	mov	r2, r0
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fef7 	bl	800061e <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <transport_fifo_send+0x48>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000027c 	.word	0x2000027c
 8000844:	2000067c 	.word	0x2000067c

08000848 <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af04      	add	r7, sp, #16
 800084e:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
    if(ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fbc2 	bl	8000fe0 <min_tx_space>
 800085c:	4603      	mov	r3, r0
 800085e:	2b0a      	cmp	r3, #10
 8000860:	d913      	bls.n	800088a <send_ack+0x42>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	33e8      	adds	r3, #232	; 0xe8
 800086c:	2101      	movs	r1, #1
 800086e:	9102      	str	r1, [sp, #8]
 8000870:	21ff      	movs	r1, #255	; 0xff
 8000872:	9101      	str	r1, [sp, #4]
 8000874:	2100      	movs	r1, #0
 8000876:	9100      	str	r1, [sp, #0]
 8000878:	21ff      	movs	r1, #255	; 0xff
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fecf 	bl	800061e <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <send_ack+0x4c>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000067c 	.word	0x2000067c

08000898 <transport_fifo_reset>:
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
    }
}

static void transport_fifo_reset(struct min_context *self)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    self->transport_fifo.head_idx = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.tail_idx = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    self->transport_fifo.sn_max = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
    self->transport_fifo.sn_min = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
    self->transport_fifo.rn = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <transport_fifo_reset+0x70>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <transport_fifo_reset+0x70>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2000067c 	.word	0x2000067c

0800090c <find_retransmit_frame>:
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
}

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800092a:	461a      	mov	r2, r3
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <find_retransmit_frame+0xa4>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800094c:	77fb      	strb	r3, [r7, #31]
    for(i = 0; i < window_size; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	77bb      	strb	r3, [r7, #30]
 8000952:	e023      	b.n	800099c <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <find_retransmit_frame+0xa4>)
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	7ffa      	ldrb	r2, [r7, #31]
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4403      	add	r3, r0
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1acb      	subs	r3, r1, r3
 800096a:	60fb      	str	r3, [r7, #12]
        if(elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	429a      	cmp	r2, r3
 8000972:	d909      	bls.n	8000988 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8000978:	7ffa      	ldrb	r2, [r7, #31]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8000988:	7ffb      	ldrb	r3, [r7, #31]
 800098a:	3301      	adds	r3, #1
 800098c:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	77fb      	strb	r3, [r7, #31]
    for(i = 0; i < window_size; i++) {
 8000996:	7fbb      	ldrb	r3, [r7, #30]
 8000998:	3301      	adds	r3, #1
 800099a:	77bb      	strb	r3, [r7, #30]
 800099c:	7fba      	ldrb	r2, [r7, #30]
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3d7      	bcc.n	8000954 <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 80009a4:	69bb      	ldr	r3, [r7, #24]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	2000067c 	.word	0x2000067c

080009b4 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 80009c2:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	33ec      	adds	r3, #236	; 0xec
 80009c8:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80009d0:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80009d8:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 80009da:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <valid_frame_received+0x170>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    switch(id_control) {
 80009e4:	7f7b      	ldrb	r3, [r7, #29]
 80009e6:	2bfe      	cmp	r3, #254	; 0xfe
 80009e8:	d053      	beq.n	8000a92 <valid_frame_received+0xde>
 80009ea:	2bff      	cmp	r3, #255	; 0xff
 80009ec:	d15c      	bne.n	8000aa8 <valid_frame_received+0xf4>
        case ACK:
            // If we get an ACK then we remove all the acknowledged frames with seq < rn
            // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
            // they have gone missing.
            // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
            num_acked = seq - self->transport_fifo.sn_min;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80009f4:	7dba      	ldrb	r2, [r7, #22]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	757b      	strb	r3, [r7, #21]
            num_nacked = payload[0] - seq;
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	753b      	strb	r3, [r7, #20]
            num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	74fb      	strb	r3, [r7, #19]

            if(num_acked <= num_in_window) {
 8000a14:	7d7a      	ldrb	r2, [r7, #21]
 8000a16:	7cfb      	ldrb	r3, [r7, #19]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d832      	bhi.n	8000a82 <valid_frame_received+0xce>
                uint8_t i;

                self->transport_fifo.sn_min = seq;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7dba      	ldrb	r2, [r7, #22]
 8000a20:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
                assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
                // Now pop off all the frames up to (but not including) rn
                // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
                min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
                for(i = 0; i < num_acked; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	77fb      	strb	r3, [r7, #31]
 8000a28:	e005      	b.n	8000a36 <valid_frame_received+0x82>
                    transport_fifo_pop(self);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fe92 	bl	8000754 <transport_fifo_pop>
                for(i = 0; i < num_acked; i++) {
 8000a30:	7ffb      	ldrb	r3, [r7, #31]
 8000a32:	3301      	adds	r3, #1
 8000a34:	77fb      	strb	r3, [r7, #31]
 8000a36:	7ffa      	ldrb	r2, [r7, #31]
 8000a38:	7d7b      	ldrb	r3, [r7, #21]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3f5      	bcc.n	8000a2a <valid_frame_received+0x76>
                }
                uint8_t idx = self->transport_fifo.head_idx;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000a44:	77bb      	strb	r3, [r7, #30]
                // Now retransmit the number of frames that were requested
                for(i = 0; i < num_nacked; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	77fb      	strb	r3, [r7, #31]
 8000a4a:	e015      	b.n	8000a78 <valid_frame_received+0xc4>
                    struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8000a4c:	7fba      	ldrb	r2, [r7, #30]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
                    transport_fifo_send(self, retransmit_frame);
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fecc 	bl	80007fc <transport_fifo_send>
                    idx++;
 8000a64:	7fbb      	ldrb	r3, [r7, #30]
 8000a66:	3301      	adds	r3, #1
 8000a68:	77bb      	strb	r3, [r7, #30]
                    idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8000a6a:	7fbb      	ldrb	r3, [r7, #30]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	77bb      	strb	r3, [r7, #30]
                for(i = 0; i < num_nacked; i++) {
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	3301      	adds	r3, #1
 8000a76:	77fb      	strb	r3, [r7, #31]
 8000a78:	7ffa      	ldrb	r2, [r7, #31]
 8000a7a:	7d3b      	ldrb	r3, [r7, #20]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3e5      	bcc.n	8000a4c <valid_frame_received+0x98>
            }
            else {
                min_debug_print("Received spurious ACK seq=%d\n", seq);
                self->transport_fifo.spurious_acks++;
            }
            break;
 8000a80:	e04c      	b.n	8000b1c <valid_frame_received+0x168>
                self->transport_fifo.spurious_acks++;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            break;
 8000a90:	e044      	b.n	8000b1c <valid_frame_received+0x168>
            // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
            // sequence numbers, etc.)
            // We don't send anything, we just do it. The other end can send frames to see if this end is
            // alive (pings, etc.) or just wait to get application frames.
            min_debug_print("Received reset\n");
            self->transport_fifo.resets_received++;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            transport_fifo_reset(self);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fef9 	bl	8000898 <transport_fifo_reset>
            break;
 8000aa6:	e039      	b.n	8000b1c <valid_frame_received+0x168>
        default:
            if (id_control & 0x80U) {
 8000aa8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da29      	bge.n	8000b04 <valid_frame_received+0x150>
                // Incoming application frames

                // Reset the activity time (an idle connection will be stalled)
                self->transport_fifo.last_received_frame_ms = now;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <valid_frame_received+0x170>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                if (seq == self->transport_fifo.rn) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000ac0:	7dba      	ldrb	r2, [r7, #22]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d116      	bne.n	8000af4 <valid_frame_received+0x140>
                    // Accept this frame as matching the sequence number we were looking for

                    // Now looking for the next one in the sequence
                    self->transport_fifo.rn++;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    // Always send an ACK back for the frame we received
                    // ACKs are short (should be about 9 microseconds to send on the wire) and
                    // this will cut the latency down.
                    // We also periodically send an ACK in case the ACK was lost, and in any case
                    // frames are re-sent.
                    send_ack(self);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff feb6 	bl	8000848 <send_ack>

                    // Now ready to pass this up to the application handlers

                    // Pass frame up to application handler to deal with
                    min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
                    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8000adc:	7f7b      	ldrb	r3, [r7, #29]
 8000ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ae2:	b2d8      	uxtb	r0, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000aea:	7dfa      	ldrb	r2, [r7, #23]
 8000aec:	69b9      	ldr	r1, [r7, #24]
 8000aee:	f7ff fbb9 	bl	8000264 <min_application_handler>
            else {
                // Not a transport frame
                min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
            }
            break;
 8000af2:	e012      	b.n	8000b1a <valid_frame_received+0x166>
                    self->transport_fifo.sequence_mismatch_drop++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            break;
 8000b02:	e00a      	b.n	8000b1a <valid_frame_received+0x166>
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8000b04:	7f7b      	ldrb	r3, [r7, #29]
 8000b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000b12:	7dfa      	ldrb	r2, [r7, #23]
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	f7ff fba5 	bl	8000264 <min_application_handler>
            break;
 8000b1a:	bf00      	nop
    }
#else // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000067c 	.word	0x2000067c

08000b28 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if(self->rx_header_bytes_seen == 2) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d114      	bne.n	8000b68 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(byte == HEADER_BYTE) {
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2baa      	cmp	r3, #170	; 0xaa
 8000b4a:	d104      	bne.n	8000b56 <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            return;
 8000b54:	e110      	b.n	8000d78 <rx_byte+0x250>
        }
        if(byte == STUFF_BYTE) {
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b55      	cmp	r3, #85	; 0x55
 8000b5a:	f000 8108 	beq.w	8000d6e <rx_byte+0x246>
            /* Discard this byte; carry on receiving on the next character */
            return;
        }
        else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            return;
 8000b66:	e107      	b.n	8000d78 <rx_byte+0x250>
        }
    }

    if(byte == HEADER_BYTE) {
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	2baa      	cmp	r3, #170	; 0xaa
 8000b6c:	d108      	bne.n	8000b80 <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8000b7e:	e003      	b.n	8000b88 <rx_byte+0x60>
    }
    else {
        self->rx_header_bytes_seen = 0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
    }

    switch(self->rx_frame_state) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8000b8e:	2b09      	cmp	r3, #9
 8000b90:	f200 80e8 	bhi.w	8000d64 <rx_byte+0x23c>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <rx_byte+0x74>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000d73 	.word	0x08000d73
 8000ba0:	08000bc5 	.word	0x08000bc5
 8000ba4:	08000c15 	.word	0x08000c15
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c75 	.word	0x08000c75
 8000bb0:	08000cc5 	.word	0x08000cc5
 8000bb4:	08000cd9 	.word	0x08000cd9
 8000bb8:	08000cf5 	.word	0x08000cf5
 8000bbc:	08000d11 	.word	0x08000d11
 8000bc0:	08000d4f 	.word	0x08000d4f
        case SEARCHING_FOR_SOF:
            break;
        case RECEIVING_ID_CONTROL:
            self->rx_frame_id_control = byte;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
            self->rx_frame_payload_bytes = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
            crc32_init_context(&self->rx_checksum);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fc9b 	bl	8000516 <crc32_init_context>
            crc32_step(&self->rx_checksum, byte);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000be6:	78fa      	ldrb	r2, [r7, #3]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fca0 	bl	8000530 <crc32_step>
            if(byte & 0x80U) {
 8000bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	da04      	bge.n	8000c02 <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
                self->rx_frame_state = RECEIVING_SEQ;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            else {
                self->rx_frame_seq = 0;
                self->rx_frame_state = RECEIVING_LENGTH;
            }
            break;
 8000c00:	e0ba      	b.n	8000d78 <rx_byte+0x250>
                self->rx_frame_seq = 0;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
                self->rx_frame_state = RECEIVING_LENGTH;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000c12:	e0b1      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_SEQ:
            self->rx_frame_seq = byte;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
            crc32_step(&self->rx_checksum, byte);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc82 	bl	8000530 <crc32_step>
            self->rx_frame_state = RECEIVING_LENGTH;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000c34:	e0a0      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_LENGTH:
            self->rx_frame_length = byte;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	78fa      	ldrb	r2, [r7, #3]
 8000c3a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
            self->rx_control = byte;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	78fa      	ldrb	r2, [r7, #3]
 8000c42:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
            crc32_step(&self->rx_checksum, byte);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000c4c:	78fa      	ldrb	r2, [r7, #3]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc6d 	bl	8000530 <crc32_step>
            if(self->rx_frame_length > 0) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <rx_byte+0x142>
                // Can reduce the RAM size by compiling limits to frame sizes
                if(self->rx_frame_length <= MAX_PAYLOAD) {
                    self->rx_frame_state = RECEIVING_PAYLOAD;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2204      	movs	r2, #4
 8000c64:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
                }
            }
            else {
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
            }
            break;
 8000c68:	e086      	b.n	8000d78 <rx_byte+0x250>
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000c72:	e081      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_PAYLOAD:
            self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	b2d1      	uxtb	r1, r2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	f882 11fa 	strb.w	r1, [r2, #506]	; 0x1fa
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	78fa      	ldrb	r2, [r7, #3]
 8000c8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
            crc32_step(&self->rx_checksum, byte);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc48 	bl	8000530 <crc32_step>
            if(--self->rx_frame_length == 0) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d15d      	bne.n	8000d76 <rx_byte+0x24e>
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            break;
 8000cc2:	e058      	b.n	8000d76 <rx_byte+0x24e>
        case RECEIVING_CHECKSUM_3:
            self->rx_frame_checksum = ((uint32_t)byte) << 24;
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	061a      	lsls	r2, r3, #24
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_2;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000cd6:	e04f      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_2:
            self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2207      	movs	r2, #7
 8000cee:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000cf2:	e041      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_1:
            self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2208      	movs	r2, #8
 8000d0a:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000d0e:	e033      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_0:
            self->rx_frame_checksum |= byte;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            crc = crc32_finalize(&self->rx_checksum);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc2e 	bl	8000588 <crc32_finalize>
 8000d2c:	60f8      	str	r0, [r7, #12]
            if(self->rx_frame_checksum != crc) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d004      	beq.n	8000d44 <rx_byte+0x21c>
                min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
                // Frame fails the checksum and so is dropped
                self->rx_frame_state = SEARCHING_FOR_SOF;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            else {
                // Checksum passes, go on to check for the end-of-frame marker
                self->rx_frame_state = RECEIVING_EOF;
            }
            break;
 8000d42:	e019      	b.n	8000d78 <rx_byte+0x250>
                self->rx_frame_state = RECEIVING_EOF;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2209      	movs	r2, #9
 8000d48:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000d4c:	e014      	b.n	8000d78 <rx_byte+0x250>
        case RECEIVING_EOF:
            if(byte == 0x55u) {
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	2b55      	cmp	r3, #85	; 0x55
 8000d52:	d102      	bne.n	8000d5a <rx_byte+0x232>
                // Frame received OK, pass up data to handler
                valid_frame_received(self);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fe2d 	bl	80009b4 <valid_frame_received>
            } else {
                // else discard
                min_debug_print("Received invalid EOF 0x%02X", byte);
            }
            // Look for next frame */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000d62:	e009      	b.n	8000d78 <rx_byte+0x250>
        default:
            // Should never get here but in case we do then reset to a safe state
            min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8000d6c:	e004      	b.n	8000d78 <rx_byte+0x250>
            return;
 8000d6e:	bf00      	nop
 8000d70:	e002      	b.n	8000d78 <rx_byte+0x250>
            break;
 8000d72:	bf00      	nop
 8000d74:	e000      	b.n	8000d78 <rx_byte+0x250>
            break;
 8000d76:	bf00      	nop
    }
}
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop

08000d80 <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for(i = 0; i < buf_len; i++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	e00a      	b.n	8000da8 <min_poll+0x28>
        rx_byte(self, buf[i]);
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fec3 	bl	8000b28 <rx_byte>
    for(i = 0; i < buf_len; i++) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3f0      	bcc.n	8000d92 <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 8000db0:	f000 f922 	bl	8000ff8 <min_time_ms>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <min_poll+0x148>)
 8000db8:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8000dba:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <min_poll+0x148>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	bf94      	ite	ls
 8000dce:	2301      	movls	r3, #1
 8000dd0:	2300      	movhi	r3, #0
 8000dd2:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <min_poll+0x148>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de4:	4293      	cmp	r3, r2
 8000de6:	bf94      	ite	ls
 8000de8:	2301      	movls	r3, #1
 8000dea:	2300      	movhi	r3, #0
 8000dec:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	767b      	strb	r3, [r7, #25]
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8000dfe:	7e7b      	ldrb	r3, [r7, #25]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d82a      	bhi.n	8000e5a <min_poll+0xda>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000e0a:	7e7a      	ldrb	r2, [r7, #25]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d224      	bcs.n	8000e5a <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 8000e10:	7e7b      	ldrb	r3, [r7, #25]
 8000e12:	4619      	mov	r1, r3
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fcd5 	bl	80007c4 <transport_fifo_get>
 8000e1a:	6178      	str	r0, [r7, #20]
        if(ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	799b      	ldrb	r3, [r3, #6]
 8000e20:	f103 040b 	add.w	r4, r3, #11
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f8d8 	bl	8000fe0 <min_tx_space>
 8000e30:	4603      	mov	r3, r0
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d834      	bhi.n	8000ea0 <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 8000e40:	6979      	ldr	r1, [r7, #20]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff fcda 	bl	80007fc <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8000e58:	e022      	b.n	8000ea0 <min_poll+0x120>
        }
    }
    else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if((window_size > 0) && remote_connected) {
 8000e5a:	7e7b      	ldrb	r3, [r7, #25]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d020      	beq.n	8000ea2 <min_poll+0x122>
 8000e60:	7efb      	ldrb	r3, [r7, #27]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d01d      	beq.n	8000ea2 <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fd50 	bl	800090c <find_retransmit_frame>
 8000e6c:	6138      	str	r0, [r7, #16]
            if(now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <min_poll+0x148>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b31      	cmp	r3, #49	; 0x31
 8000e7a:	d912      	bls.n	8000ea2 <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if(ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	799b      	ldrb	r3, [r3, #6]
 8000e80:	f103 040b 	add.w	r4, r3, #11
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f8a8 	bl	8000fe0 <min_tx_space>
 8000e90:	4603      	mov	r3, r0
 8000e92:	429c      	cmp	r4, r3
 8000e94:	d805      	bhi.n	8000ea2 <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff fcaf 	bl	80007fc <transport_fifo_send>
 8000e9e:	e000      	b.n	8000ea2 <min_poll+0x122>
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8000ea0:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if(now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <min_poll+0x148>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b19      	cmp	r3, #25
 8000eb0:	d905      	bls.n	8000ebe <min_poll+0x13e>
        if(remote_active) {
 8000eb2:	7ebb      	ldrb	r3, [r7, #26]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <min_poll+0x13e>
            send_ack(self);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff fcc5 	bl	8000848 <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000067c 	.word	0x2000067c

08000ecc <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void * p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
    self->port = port;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    self->transport_fifo.dropped_frames = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    self->transport_fifo.resets_received = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    self->transport_fifo.n_frames_max = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    transport_fifo_reset(self);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fcb9 	bl	8000898 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
    min_debug_print("MIN init complete\n");
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <min_send_frame>:

// Sends an application MIN frame on the wire (do not put into the transport queue)
void min_send_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b089      	sub	sp, #36	; 0x24
 8000f32:	af04      	add	r7, sp, #16
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	72fb      	strb	r3, [r7, #11]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	72bb      	strb	r3, [r7, #10]
    if((ON_WIRE_SIZE(payload_len) <= min_tx_space(self->port))) {
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	f103 040b 	add.w	r4, r3, #11
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f846 	bl	8000fe0 <min_tx_space>
 8000f54:	4603      	mov	r3, r0
 8000f56:	429c      	cmp	r4, r3
 8000f58:	d80f      	bhi.n	8000f7a <min_send_frame+0x4c>
        on_wire_bytes(self, min_id & (uint8_t) 0x3fU, 0, payload, 0, 0xffffU, payload_len);
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f60:	b2d9      	uxtb	r1, r3
 8000f62:	7abb      	ldrb	r3, [r7, #10]
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff fb52 	bl	800061e <on_wire_bytes>
    }
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <min_tx_start>:
#include "min.h"
#include "stm32f1xx.h"
#include "stm32f1xx_hal.h"
#include "stdint.h"

void min_tx_start(uint8_t port){}
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <min_tx_finished>:
void min_tx_finished(uint8_t port){}
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte) // hàm tự định nghĩa mỗi chip: gửi uart 1 byte
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
  USART1->DR = byte;
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <min_tx_byte+0x30>)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	6053      	str	r3, [r2, #4]
  while (!(USART1->SR & USART_SR_TC));
 8000fc2:	bf00      	nop
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <min_tx_byte+0x30>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f9      	beq.n	8000fc4 <min_tx_byte+0x18>
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <min_tx_space>:
uint16_t min_tx_space(uint8_t port)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  return 512;
 8000fea:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <min_time_ms>:
uint32_t min_time_ms(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000ffc:	f000 f978 	bl	80012f0 <HAL_GetTick>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x60>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_MspInit+0x60>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_UART_MspInit+0x9c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d139      	bne.n	8001100 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_UART_MspInit+0xa0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_UART_MspInit+0xa0>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_UART_MspInit+0xa0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_UART_MspInit+0xa0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_UART_MspInit+0xa4>)
 80010d2:	f000 fad7 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <HAL_UART_MspInit+0xa4>)
 80010ec:	f000 faca 	bl	8001684 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2025      	movs	r0, #37	; 0x25
 80010f6:	f000 f9dc 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010fa:	2025      	movs	r0, #37	; 0x25
 80010fc:	f000 f9f5 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115a:	f000 f8b7 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <USART1_IRQHandler+0x10>)
 800116a:	f001 f895 	bl	8002298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000230 	.word	0x20000230

08001178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <uart_receive>:

uint8_t buff_uart[UART_RING_LEN];
Ringbuffer ringbuff;
 
void uart_receive(uint8_t data_rx)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    ring_buff_push(&ringbuff,data_rx);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4619      	mov	r1, r3
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <uart_receive+0x1c>)
 8001194:	f7fe fff2 	bl	800017c <ring_buff_push>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000700 	.word	0x20000700

080011a4 <uart_available>:
uint16_t uart_available()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    return ring_buff_available(&ringbuff);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <uart_available+0x10>)
 80011aa:	f7ff f83b 	bl	8000224 <ring_buff_available>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000700 	.word	0x20000700

080011b8 <uart_read>:
uint8_t uart_read()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
    uint8_t data;
    ring_buff_pop(&ringbuff,&data);
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <uart_read+0x1c>)
 80011c4:	f7ff f802 	bl	80001cc <ring_buff_pop>
    return data;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000700 	.word	0x20000700

080011d8 <uart_init>:
void uart_init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    ring_buff_init(&ringbuff,buff_uart,UART_RING_LEN);
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	4903      	ldr	r1, [pc, #12]	; (80011ec <uart_init+0x14>)
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <uart_init+0x18>)
 80011e2:	f7fe ffb3 	bl	800014c <ring_buff_init>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000680 	.word	0x20000680
 80011f0:	20000700 	.word	0x20000700

080011f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff ffc0 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fa:	490c      	ldr	r1, [pc, #48]	; (800122c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001210:	4c09      	ldr	r4, [pc, #36]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f001 fd4d 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001222:	f7ff f8c7 	bl	80003b4 <main>
  bx lr
 8001226:	4770      	bx	lr
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001230:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 8001234:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001238:	20000710 	.word	0x20000710

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f923 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fed4 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f93b 	bl	8001506 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f903 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x20>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000008 	.word	0x20000008
 80012ec:	2000070c 	.word	0x2000070c

080012f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	2000070c 	.word	0x2000070c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff90 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff2d 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff42 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2204      	movs	r2, #4
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e020      	b.n	800158a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020e 	bic.w	r2, r2, #14
 8001556:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d005      	beq.n	80015b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e051      	b.n	800165c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 020e 	bic.w	r2, r2, #14
 80015c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_DMA_Abort_IT+0xd4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d029      	beq.n	8001636 <HAL_DMA_Abort_IT+0xa2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_DMA_Abort_IT+0xd8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_Abort_IT+0x9e>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_DMA_Abort_IT+0xdc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01a      	beq.n	800162c <HAL_DMA_Abort_IT+0x98>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_DMA_Abort_IT+0xe0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_Abort_IT+0x92>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_DMA_Abort_IT+0xe4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00a      	beq.n	8001620 <HAL_DMA_Abort_IT+0x8c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_DMA_Abort_IT+0xe8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d102      	bne.n	800161a <HAL_DMA_Abort_IT+0x86>
 8001614:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 800161a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800161e:	e00b      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001624:	e008      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162a:	e005      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	e002      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001632:	2310      	movs	r3, #16
 8001634:	e000      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001636:	2301      	movs	r3, #1
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_DMA_Abort_IT+0xec>)
 800163a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    } 
  }
  return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e169      	b.n	800196c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001698:	2201      	movs	r2, #1
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8158 	bne.w	8001966 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a9a      	ldr	r2, [pc, #616]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d05e      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016c0:	4a98      	ldr	r2, [pc, #608]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d875      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016c6:	4a98      	ldr	r2, [pc, #608]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016cc:	4a96      	ldr	r2, [pc, #600]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d86f      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016d2:	4a96      	ldr	r2, [pc, #600]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d052      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016d8:	4a94      	ldr	r2, [pc, #592]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d869      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016de:	4a94      	ldr	r2, [pc, #592]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04c      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016e4:	4a92      	ldr	r2, [pc, #584]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d863      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d046      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016f0:	4a90      	ldr	r2, [pc, #576]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d85d      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xcc>
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d859      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_GPIO_Init+0x80>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800177f 	.word	0x0800177f
 8001708:	08001759 	.word	0x08001759
 800170c:	0800176b 	.word	0x0800176b
 8001710:	080017ad 	.word	0x080017ad
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017b3 	.word	0x080017b3
 800171c:	080017b3 	.word	0x080017b3
 8001720:	080017b3 	.word	0x080017b3
 8001724:	080017b3 	.word	0x080017b3
 8001728:	080017b3 	.word	0x080017b3
 800172c:	080017b3 	.word	0x080017b3
 8001730:	080017b3 	.word	0x080017b3
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017b3 	.word	0x080017b3
 8001744:	080017b3 	.word	0x080017b3
 8001748:	08001761 	.word	0x08001761
 800174c:	08001775 	.word	0x08001775
 8001750:	4a79      	ldr	r2, [pc, #484]	; (8001938 <HAL_GPIO_Init+0x2b4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001756:	e02c      	b.n	80017b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e029      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e024      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	3308      	adds	r3, #8
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e01f      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	330c      	adds	r3, #12
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e01a      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e013      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	611a      	str	r2, [r3, #16]
          break;
 800179e:	e009      	b.n	80017b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	615a      	str	r2, [r3, #20]
          break;
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          break;
 80017b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d801      	bhi.n	80017be <HAL_GPIO_Init+0x13a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_Init+0x13e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d802      	bhi.n	80017d0 <HAL_GPIO_Init+0x14c>
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x152>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3b08      	subs	r3, #8
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	210f      	movs	r1, #15
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80b1 	beq.w	8001966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x2b8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a40      	ldr	r2, [pc, #256]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d013      	beq.n	8001870 <HAL_GPIO_Init+0x1ec>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_GPIO_Init+0x2c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00d      	beq.n	800186c <HAL_GPIO_Init+0x1e8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <HAL_GPIO_Init+0x2c8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x1e4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_GPIO_Init+0x2cc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d101      	bne.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001860:	2303      	movs	r3, #3
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001864:	2304      	movs	r3, #4
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001868:	2302      	movs	r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001870:	2300      	movs	r3, #0
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001882:	492f      	ldr	r1, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	492c      	ldr	r1, [pc, #176]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4928      	ldr	r1, [pc, #160]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	491e      	ldr	r1, [pc, #120]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4918      	ldr	r1, [pc, #96]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4914      	ldr	r1, [pc, #80]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d021      	beq.n	8001958 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e021      	b.n	8001966 <HAL_GPIO_Init+0x2e2>
 8001922:	bf00      	nop
 8001924:	10320000 	.word	0x10320000
 8001928:	10310000 	.word	0x10310000
 800192c:	10220000 	.word	0x10220000
 8001930:	10210000 	.word	0x10210000
 8001934:	10120000 	.word	0x10120000
 8001938:	10110000 	.word	0x10110000
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011000 	.word	0x40011000
 8001950:	40011400 	.word	0x40011400
 8001954:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_GPIO_Init+0x304>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	43db      	mvns	r3, r3
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <HAL_GPIO_Init+0x304>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	3301      	adds	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae8e 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	372c      	adds	r7, #44	; 0x2c
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e272      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8087 	beq.w	8001aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d00c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b8:	4b8f      	ldr	r3, [pc, #572]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d112      	bne.n	80019ea <HAL_RCC_OscConfig+0x5e>
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d10b      	bne.n	80019ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d2:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d06c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x12c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d168      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e24c      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x76>
 80019f4:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7f      	ldr	r2, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e02e      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7a      	ldr	r2, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a77      	ldr	r2, [pc, #476]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e01d      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0xbc>
 8001a2e:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a71      	ldr	r2, [pc, #452]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a67      	ldr	r2, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc42 	bl	80012f0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fc3e 	bl	80012f0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e200      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe4>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc2e 	bl	80012f0 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fc2a 	bl	80012f0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1ec      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x10c>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x18c>
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e1c0      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fbe3 	bl	80012f0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fbdf 	bl	80012f0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1a1      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4927      	ldr	r1, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fbc2 	bl	80012f0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fbbe 	bl	80012f0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e180      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03a      	beq.n	8001c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d019      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fba2 	bl	80012f0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fb9e 	bl	80012f0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e160      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f000 face 	bl	8002170 <RCC_Delay>
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fb88 	bl	80012f0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fb84 	bl	80012f0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d908      	bls.n	8001c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e146      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	42420000 	.word	0x42420000
 8001c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e9      	bne.n	8001be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80a6 	beq.w	8001d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a87      	ldr	r2, [pc, #540]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b85      	ldr	r3, [pc, #532]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x4c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x4c8>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb45 	bl	80012f0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fb41 	bl	80012f0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	; 0x64
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e103      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x4c8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x312>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x334>
 8001ca6:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x356>
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff faf5 	bl	80012f0 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff faf1 	bl	80012f0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0b1      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ee      	beq.n	8001d0a <HAL_RCC_OscConfig+0x37e>
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fadf 	bl	80012f0 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff fadb 	bl	80012f0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e09b      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8087 	beq.w	8001e82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d061      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d146      	bne.n	8001e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff faaf 	bl	80012f0 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff faab 	bl	80012f0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e06d      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4921      	ldr	r1, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a19      	ldr	r1, [r3, #32]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	430b      	orrs	r3, r1
 8001de2:	491b      	ldr	r1, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fa7f 	bl	80012f0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff fa7b 	bl	80012f0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e03d      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46a>
 8001e14:	e035      	b.n	8001e82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fa68 	bl	80012f0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff fa64 	bl	80012f0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e026      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x498>
 8001e42:	e01e      	b.n	8001e82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e019      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x500>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d0      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d910      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4965      	ldr	r1, [pc, #404]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0b8      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	494d      	ldr	r1, [pc, #308]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d040      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e07f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e073      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06b      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4936      	ldr	r1, [pc, #216]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f9b6 	bl	80012f0 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f9b2 	bl	80012f0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e053      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d210      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4922      	ldr	r1, [pc, #136]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e032      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4916      	ldr	r1, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	490e      	ldr	r1, [pc, #56]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201e:	f000 f821 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	490a      	ldr	r1, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1c8>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1cc>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1d0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f914 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	08002d2c 	.word	0x08002d2c
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x30>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x36>
 8002092:	e027      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002096:	613b      	str	r3, [r7, #16]
      break;
 8002098:	e027      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0c5b      	lsrs	r3, r3, #17
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	fb03 f202 	mul.w	r2, r3, r2
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e004      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	613b      	str	r3, [r7, #16]
      break;
 80020e2:	e002      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 80020e6:	613b      	str	r3, [r7, #16]
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	693b      	ldr	r3, [r7, #16]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	08002d44 	.word	0x08002d44
 8002104:	08002d54 	.word	0x08002d54
 8002108:	003d0900 	.word	0x003d0900

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_RCC_GetHCLKFreq+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000000 	.word	0x20000000

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002124:	f7ff fff2 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08002d3c 	.word	0x08002d3c

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800214c:	f7ff ffde 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0adb      	lsrs	r3, r3, #11
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08002d3c 	.word	0x08002d3c

08002170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <RCC_Delay+0x34>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <RCC_Delay+0x38>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800218c:	bf00      	nop
  }
  while (Delay --);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e5a      	subs	r2, r3, #1
 8002192:	60fa      	str	r2, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f9      	bne.n	800218c <RCC_Delay+0x1c>
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	20000000 	.word	0x20000000
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e042      	b.n	8002244 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe ff4a 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fcd5 	bl	8002ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	d112      	bne.n	800228c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_UART_Receive_IT+0x26>
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00b      	b.n	800228e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	461a      	mov	r2, r3
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fab7 	bl	80027f6 <UART_Start_Receive_IT>
 8002288:	4603      	mov	r3, r0
 800228a:	e000      	b.n	800228e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0ba      	sub	sp, #232	; 0xe8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_UART_IRQHandler+0x66>
 80022ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fb93 	bl	8002a22 <UART_Receive_IT>
      return;
 80022fc:	e25b      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80de 	beq.w	80024c4 <HAL_UART_IRQHandler+0x22c>
 8002308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80d1 	beq.w	80024c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0xae>
 800232e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_UART_IRQHandler+0xd2>
 8002352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_UART_IRQHandler+0xf6>
 8002376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f043 0204 	orr.w	r2, r3, #4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_UART_IRQHandler+0x126>
 800239a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0208 	orr.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 81f2 	beq.w	80027ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_UART_IRQHandler+0x14e>
 80023d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb1e 	bl	8002a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_UART_IRQHandler+0x17a>
 800240a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04f      	beq.n	80024b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa28 	bl	8002868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d041      	beq.n	80024aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800243c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800245e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800246a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1d9      	bne.n	8002426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d013      	beq.n	80024a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <HAL_UART_IRQHandler+0x3e0>)
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f884 	bl	8001594 <HAL_DMA_Abort_IT>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e00e      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f993 	bl	80027ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	e00a      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f98f 	bl	80027ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	e006      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f98b 	bl	80027ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80024be:	e175      	b.n	80027ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	bf00      	nop
    return;
 80024c2:	e173      	b.n	80027ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 814f 	bne.w	800276c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8148 	beq.w	800276c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8141 	beq.w	800276c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80b6 	beq.w	800267c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800251c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8145 	beq.w	80027b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800252e:	429a      	cmp	r2, r3
 8002530:	f080 813e 	bcs.w	80027b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800253a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b20      	cmp	r3, #32
 8002544:	f000 8088 	beq.w	8002658 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002574:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002580:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002584:	e841 2300 	strex	r3, r2, [r1]
 8002588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800258c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1d9      	bne.n	8002548 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e1      	bne.n	8002594 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	f023 0310 	bic.w	r3, r3, #16
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800263a:	65ba      	str	r2, [r7, #88]	; 0x58
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002642:	e841 2300 	strex	r3, r2, [r1]
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e3      	bne.n	8002616 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe ff63 	bl	800151e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002666:	b29b      	uxth	r3, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8b6 	bl	80027e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002674:	e09c      	b.n	80027b0 <HAL_UART_IRQHandler+0x518>
 8002676:	bf00      	nop
 8002678:	0800292d 	.word	0x0800292d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 808e 	beq.w	80027b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8089 	beq.w	80027b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026c6:	647a      	str	r2, [r7, #68]	; 0x44
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e3      	bne.n	80026da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	e853 3f00 	ldrex	r3, [r3]
 800272e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0310 	bic.w	r3, r3, #16
 8002736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002744:	61fa      	str	r2, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	617b      	str	r3, [r7, #20]
   return(result);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e3      	bne.n	8002720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800275e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f83b 	bl	80027e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800276a:	e023      	b.n	80027b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800276c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <HAL_UART_IRQHandler+0x4f4>
 8002778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8e5 	bl	8002954 <UART_Transmit_IT>
    return;
 800278a:	e014      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800278c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <HAL_UART_IRQHandler+0x51e>
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f924 	bl	80029f2 <UART_EndTransmit_IT>
    return;
 80027aa:	e004      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80027ac:	bf00      	nop
 80027ae:	e002      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027b4:	bf00      	nop
  }
}
 80027b6:	37e8      	adds	r7, #232	; 0xe8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	; 0x22
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b095      	sub	sp, #84	; 0x54
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	e853 3f00 	ldrex	r3, [r3]
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002890:	643a      	str	r2, [r7, #64]	; 0x40
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002898:	e841 2300 	strex	r3, r2, [r1]
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e5      	bne.n	8002870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e5      	bne.n	80028a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d119      	bne.n	8002914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f023 0310 	bic.w	r3, r3, #16
 80028f6:	647b      	str	r3, [r7, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002900:	61ba      	str	r2, [r7, #24]
 8002902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6979      	ldr	r1, [r7, #20]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	613b      	str	r3, [r7, #16]
   return(result);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e5      	bne.n	80028e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002922:	bf00      	nop
 8002924:	3754      	adds	r7, #84	; 0x54
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff41 	bl	80027ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b21      	cmp	r3, #33	; 0x21
 8002966:	d13e      	bne.n	80029e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d114      	bne.n	800299c <UART_Transmit_IT+0x48>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d110      	bne.n	800299c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	1c9a      	adds	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]
 800299a:	e008      	b.n	80029ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6211      	str	r1, [r2, #32]
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4619      	mov	r1, r3
 80029bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fed2 	bl	80027bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b08c      	sub	sp, #48	; 0x30
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b22      	cmp	r3, #34	; 0x22
 8002a34:	f040 80ae 	bne.w	8002b94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a40:	d117      	bne.n	8002a72 <UART_Receive_IT+0x50>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d113      	bne.n	8002a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	1c9a      	adds	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a70:	e026      	b.n	8002ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a84:	d007      	beq.n	8002a96 <UART_Receive_IT+0x74>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <UART_Receive_IT+0x82>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e008      	b.n	8002ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d15d      	bne.n	8002b90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d135      	bne.n	8002b86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	623a      	str	r2, [r7, #32]
 8002b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	69f9      	ldr	r1, [r7, #28]
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d10a      	bne.n	8002b78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fe2e 	bl	80027e0 <HAL_UARTEx_RxEventCallback>
 8002b84:	e002      	b.n	8002b8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fbf8 	bl	800037c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e002      	b.n	8002b96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bda:	f023 030c 	bic.w	r3, r3, #12
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <UART_SetConfig+0x114>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d103      	bne.n	8002c10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7ff fa9e 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	e002      	b.n	8002c16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff fa86 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	0119      	lsls	r1, r3, #4
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2064      	movs	r0, #100	; 0x64
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	; 0x32
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	4419      	add	r1, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c86:	fba3 0302 	umull	r0, r3, r3, r2
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2064      	movs	r0, #100	; 0x64
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	440a      	add	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	51eb851f 	.word	0x51eb851f

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	4d0c      	ldr	r5, [pc, #48]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc2:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	42a6      	cmp	r6, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	f000 f822 	bl	8002d14 <_init>
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	4d0a      	ldr	r5, [pc, #40]	; (8002cfc <__libc_init_array+0x40>)
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <__libc_init_array+0x44>)
 8002cd6:	1b64      	subs	r4, r4, r5
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	42a6      	cmp	r6, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce4:	4798      	blx	r3
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cee:	4798      	blx	r3
 8002cf0:	3601      	adds	r6, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	08002d58 	.word	0x08002d58
 8002cf8:	08002d58 	.word	0x08002d58
 8002cfc:	08002d58 	.word	0x08002d58
 8002d00:	08002d5c 	.word	0x08002d5c

08002d04 <memset>:
 8002d04:	4603      	mov	r3, r0
 8002d06:	4402      	add	r2, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <_init>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr

08002d20 <_fini>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr
